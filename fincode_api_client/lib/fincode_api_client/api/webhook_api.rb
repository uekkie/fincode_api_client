=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module FincodeApiClient
  class WebhookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Webhook設定 登録
    # Webhook設定を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップ上で発生したイベントを購読するWebhook設定を登録します。 
    # @option opts [WebhookSettingCreatingRequest] :webhook_setting_creating_request 
    # @return [WebhookSettingCreatingResponse]
    def create_webhook_setting(opts = {})
      data, _status_code, _headers = create_webhook_setting_with_http_info(opts)
      data
    end

    # Webhook設定 登録
    # Webhook設定を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップ上で発生したイベントを購読するWebhook設定を登録します。 
    # @option opts [WebhookSettingCreatingRequest] :webhook_setting_creating_request 
    # @return [Array<(WebhookSettingCreatingResponse, Integer, Hash)>] WebhookSettingCreatingResponse data, response status code and response headers
    def create_webhook_setting_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.create_webhook_setting ...'
      end
      # resource path
      local_var_path = '/v1/webhook_settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_setting_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSettingCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.create_webhook_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#create_webhook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Webhook設定 削除
    # IDで指定したWebhook設定を削除します。 
    # @param id [String] Webhook設定のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を削除します。 
    # @return [WebhookSettingDeletingResponse]
    def delete_webhook_setting(id, opts = {})
      data, _status_code, _headers = delete_webhook_setting_with_http_info(id, opts)
      data
    end

    # Webhook設定 削除
    # IDで指定したWebhook設定を削除します。 
    # @param id [String] Webhook設定のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を削除します。 
    # @return [Array<(WebhookSettingDeletingResponse, Integer, Hash)>] WebhookSettingDeletingResponse data, response status code and response headers
    def delete_webhook_setting_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.delete_webhook_setting ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookApi.delete_webhook_setting"
      end
      # resource path
      local_var_path = '/v1/webhook_settings/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSettingDeletingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.delete_webhook_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#delete_webhook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apple Pay
    # Apple Payによる決済に関するイベント（`payments.applepay.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentApplePay] :webhook_event_payment_apple_pay 
    # @return [WebhookResponse]
    def receive_webhook_of_apple_pay_payment(opts = {})
      data, _status_code, _headers = receive_webhook_of_apple_pay_payment_with_http_info(opts)
      data
    end

    # Apple Pay
    # Apple Payによる決済に関するイベント（&#x60;payments.applepay.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentApplePay] :webhook_event_payment_apple_pay 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_apple_pay_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_apple_pay_payment ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-applepay-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_apple_pay'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_apple_pay_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_apple_pay_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード
    # カードに関するイベント（`card.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventCard] :webhook_event_card 
    # @return [WebhookResponse]
    def receive_webhook_of_card(opts = {})
      data, _status_code, _headers = receive_webhook_of_card_with_http_info(opts)
      data
    end

    # カード
    # カードに関するイベント（&#x60;card.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventCard] :webhook_event_card 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_card_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_card ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-card'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_card'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード決済
    # カード決済に関するイベント（`payments.card.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentCard] :webhook_event_payment_card 
    # @return [WebhookResponse]
    def receive_webhook_of_card_payment(opts = {})
      data, _status_code, _headers = receive_webhook_of_card_payment_with_http_info(opts)
      data
    end

    # カード決済
    # カード決済に関するイベント（&#x60;payments.card.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentCard] :webhook_event_payment_card 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_card_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_card_payment ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-card-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_card'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_card_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_card_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 一括決済課金（カード決済）
    # カード決済による一括決済 課金イベント（`payments.bulk.card.batch`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentBulkBatchCard] :webhook_event_payment_bulk_batch_card 
    # @return [WebhookResponse]
    def receive_webhook_of_card_payment_bulk_batch(opts = {})
      data, _status_code, _headers = receive_webhook_of_card_payment_bulk_batch_with_http_info(opts)
      data
    end

    # 一括決済課金（カード決済）
    # カード決済による一括決済 課金イベント（&#x60;payments.bulk.card.batch&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentBulkBatchCard] :webhook_event_payment_bulk_batch_card 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_card_payment_bulk_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_card_payment_bulk_batch ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-card-payment-bulk-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_bulk_batch_card'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_card_payment_bulk_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_card_payment_bulk_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション課金（カード決済）
    # カード決済によるサブスクリプション課金のイベント（`recurring.card.batch`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventRecurringBatchCard] :webhook_event_recurring_batch_card 
    # @return [WebhookResponse]
    def receive_webhook_of_card_recurring_batch(opts = {})
      data, _status_code, _headers = receive_webhook_of_card_recurring_batch_with_http_info(opts)
      data
    end

    # サブスクリプション課金（カード決済）
    # カード決済によるサブスクリプション課金のイベント（&#x60;recurring.card.batch&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventRecurringBatchCard] :webhook_event_recurring_batch_card 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_card_recurring_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_card_recurring_batch ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-card-recurring-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_recurring_batch_card'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_card_recurring_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_card_recurring_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション（カード決済）
    # カード決済によるサブスクリプションに関するイベント（`subscription.card.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventSubscriptionCard] :webhook_event_subscription_card 
    # @return [WebhookResponse]
    def receive_webhook_of_card_subscription(opts = {})
      data, _status_code, _headers = receive_webhook_of_card_subscription_with_http_info(opts)
      data
    end

    # サブスクリプション（カード決済）
    # カード決済によるサブスクリプションに関するイベント（&#x60;subscription.card.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventSubscriptionCard] :webhook_event_subscription_card 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_card_subscription_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_card_subscription ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-card-subscription'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_subscription_card'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_card_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_card_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済手段 契約状況
    # 決済手段 契約状況 更新イベント（`contracts.status_code.updated`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventContract] :webhook_event_contract 
    # @return [WebhookResponse]
    def receive_webhook_of_contract(opts = {})
      data, _status_code, _headers = receive_webhook_of_contract_with_http_info(opts)
      data
    end

    # 決済手段 契約状況
    # 決済手段 契約状況 更新イベント（&#x60;contracts.status_code.updated&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventContract] :webhook_event_contract 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_contract_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_contract ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-contract'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_contract'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済手段
    # 顧客の決済手段に関するイベント（`customers.payment_methods.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventCustomerPaymentMethod] :webhook_event_customer_payment_method 
    # @return [WebhookResponse]
    def receive_webhook_of_customer_payment_method(opts = {})
      data, _status_code, _headers = receive_webhook_of_customer_payment_method_with_http_info(opts)
      data
    end

    # 決済手段
    # 顧客の決済手段に関するイベント（&#x60;customers.payment_methods.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventCustomerPaymentMethod] :webhook_event_customer_payment_method 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_customer_payment_method_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_customer_payment_method ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-customer-payment_method'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_customer_payment_method'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_customer_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_customer_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 口座振替
    # 口座振替に関するイベント（`payments.directdebit.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentDirectDebit] :webhook_event_payment_direct_debit 
    # @return [WebhookResponse]
    def receive_webhook_of_direct_debit_payment(opts = {})
      data, _status_code, _headers = receive_webhook_of_direct_debit_payment_with_http_info(opts)
      data
    end

    # 口座振替
    # 口座振替に関するイベント（&#x60;payments.directdebit.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentDirectDebit] :webhook_event_payment_direct_debit 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_direct_debit_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_direct_debit_payment ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-directdebit-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_direct_debit'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_direct_debit_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_direct_debit_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション課金（口座振替）
    # 口座振替によるサブスクリプション課金に関するイベント（`recurring.directdebit.batch`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventRecurringBatchDirectDebit] :webhook_event_recurring_batch_direct_debit 
    # @return [WebhookResponse]
    def receive_webhook_of_direct_debit_recurring_batch(opts = {})
      data, _status_code, _headers = receive_webhook_of_direct_debit_recurring_batch_with_http_info(opts)
      data
    end

    # サブスクリプション課金（口座振替）
    # 口座振替によるサブスクリプション課金に関するイベント（&#x60;recurring.directdebit.batch&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventRecurringBatchDirectDebit] :webhook_event_recurring_batch_direct_debit 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_direct_debit_recurring_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_direct_debit_recurring_batch ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-directdebit-recurring-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_recurring_batch_direct_debit'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_direct_debit_recurring_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_direct_debit_recurring_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション（口座振替）
    # 口座振替によるサブスクリプションに関するイベント（`subscription.directdebit.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventSubscriptionDirectDebit] :webhook_event_subscription_direct_debit 
    # @return [WebhookResponse]
    def receive_webhook_of_direct_debit_subscription(opts = {})
      data, _status_code, _headers = receive_webhook_of_direct_debit_subscription_with_http_info(opts)
      data
    end

    # サブスクリプション（口座振替）
    # 口座振替によるサブスクリプションに関するイベント（&#x60;subscription.directdebit.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventSubscriptionDirectDebit] :webhook_event_subscription_direct_debit 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_direct_debit_subscription_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_direct_debit_subscription ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-directdebit-subscription'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_subscription_direct_debit'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_direct_debit_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_direct_debit_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # コンビニ決済
    # コンビニ決済に関するイベント（`payments.konbini.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentKonbini] :webhook_event_payment_konbini 
    # @return [WebhookResponse]
    def receive_webhook_of_konbini_payment(opts = {})
      data, _status_code, _headers = receive_webhook_of_konbini_payment_with_http_info(opts)
      data
    end

    # コンビニ決済
    # コンビニ決済に関するイベント（&#x60;payments.konbini.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentKonbini] :webhook_event_payment_konbini 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_konbini_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_konbini_payment ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-konbini-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_konbini'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_konbini_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_konbini_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PayPay
    # PayPayによる決済に関するイベント（`payments.paypay.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentPayPay] :webhook_event_payment_pay_pay 
    # @return [WebhookResponse]
    def receive_webhook_of_pay_pay_payment(opts = {})
      data, _status_code, _headers = receive_webhook_of_pay_pay_payment_with_http_info(opts)
      data
    end

    # PayPay
    # PayPayによる決済に関するイベント（&#x60;payments.paypay.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentPayPay] :webhook_event_payment_pay_pay 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_pay_pay_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_pay_pay_payment ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-paypay-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_pay_pay'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_pay_pay_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_pay_pay_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 一括決済（カード決済）
    # カード決済による一括決済 登録イベント（`payments.bulk.card.regist`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentBulkRegistCard] :webhook_event_payment_bulk_regist_card 
    # @return [WebhookResponse]
    def receive_webhook_of_registering_card_payment_bulk(opts = {})
      data, _status_code, _headers = receive_webhook_of_registering_card_payment_bulk_with_http_info(opts)
      data
    end

    # 一括決済（カード決済）
    # カード決済による一括決済 登録イベント（&#x60;payments.bulk.card.regist&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentBulkRegistCard] :webhook_event_payment_bulk_regist_card 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_registering_card_payment_bulk_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_registering_card_payment_bulk ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-card-payment-bulk-regist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_bulk_regist_card'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_registering_card_payment_bulk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_registering_card_payment_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 銀行振込（バーチャル口座）
    # 銀行振込（バーチャル口座）による決済に関するイベント（`payments.virtualaccount.*`）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentVirtualAccount] :webhook_event_payment_virtual_account 
    # @return [WebhookResponse]
    def receive_webhook_of_virtual_account_payment(opts = {})
      data, _status_code, _headers = receive_webhook_of_virtual_account_payment_with_http_info(opts)
      data
    end

    # 銀行振込（バーチャル口座）
    # 銀行振込（バーチャル口座）による決済に関するイベント（&#x60;payments.virtualaccount.*&#x60;）で通知されるリクエストのボディの仕様です。 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookEventPaymentVirtualAccount] :webhook_event_payment_virtual_account 
    # @return [Array<(WebhookResponse, Integer, Hash)>] WebhookResponse data, response status code and response headers
    def receive_webhook_of_virtual_account_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.receive_webhook_of_virtual_account_payment ...'
      end
      # resource path
      local_var_path = '/your-endpoint-on-virtualaccount-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_event_payment_virtual_account'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.receive_webhook_of_virtual_account_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#receive_webhook_of_virtual_account_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Webhook設定 取得
    # IDで指定したWebhook設定を取得します。 
    # @param id [String] Webhook設定のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を取得します。 
    # @return [WebhookSettingRetrievingResponse]
    def retrieve_webhook_setting(id, opts = {})
      data, _status_code, _headers = retrieve_webhook_setting_with_http_info(id, opts)
      data
    end

    # Webhook設定 取得
    # IDで指定したWebhook設定を取得します。 
    # @param id [String] Webhook設定のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を取得します。 
    # @return [Array<(WebhookSettingRetrievingResponse, Integer, Hash)>] WebhookSettingRetrievingResponse data, response status code and response headers
    def retrieve_webhook_setting_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.retrieve_webhook_setting ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookApi.retrieve_webhook_setting"
      end
      # resource path
      local_var_path = '/v1/webhook_settings/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSettingRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.retrieve_webhook_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#retrieve_webhook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Webhook設定 一覧取得
    # Webhook設定を一覧で取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定から一覧で取得します。 
    # @return [WebhookSettingListRetrievingResponse]
    def retrieve_webhook_setting_list(opts = {})
      data, _status_code, _headers = retrieve_webhook_setting_list_with_http_info(opts)
      data
    end

    # Webhook設定 一覧取得
    # Webhook設定を一覧で取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定から一覧で取得します。 
    # @return [Array<(WebhookSettingListRetrievingResponse, Integer, Hash)>] WebhookSettingListRetrievingResponse data, response status code and response headers
    def retrieve_webhook_setting_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.retrieve_webhook_setting_list ...'
      end
      # resource path
      local_var_path = '/v1/webhook_settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSettingListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.retrieve_webhook_setting_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#retrieve_webhook_setting_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Webhook設定 更新
    # IDで指定したWebhook設定を更新します。 
    # @param id [String] Webhook設定のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を更新します。 
    # @option opts [WebhookSettingUpdatingRequest] :webhook_setting_updating_request 
    # @return [WebhookSettingUpdatingResponse]
    def update_webhook_setting(id, opts = {})
      data, _status_code, _headers = update_webhook_setting_with_http_info(id, opts)
      data
    end

    # Webhook設定 更新
    # IDで指定したWebhook設定を更新します。 
    # @param id [String] Webhook設定のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を更新します。 
    # @option opts [WebhookSettingUpdatingRequest] :webhook_setting_updating_request 
    # @return [Array<(WebhookSettingUpdatingResponse, Integer, Hash)>] WebhookSettingUpdatingResponse data, response status code and response headers
    def update_webhook_setting_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.update_webhook_setting ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookApi.update_webhook_setting"
      end
      # resource path
      local_var_path = '/v1/webhook_settings/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_setting_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookSettingUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"WebhookApi.update_webhook_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#update_webhook_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
