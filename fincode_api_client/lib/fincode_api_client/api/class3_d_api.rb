=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module FincodeApiClient
  class Class3DApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 3Dセキュア 認証結果確定
    # `access_id`で指定したカード決済取引の3Dセキュア認証の結果を確定します。\\ \\ `challenge_url`上で購入者がチャレンジ認証実施後、`tds2_ret_url`に対し`event`パラメータで`AuthResultReady`イベントが通知されたとき、このAPIを呼び出します。  - レスポンスの`tds2_trans_result`が`Y`または`A`のとき、認証後決済 実行APIを呼び出し3Dセキュア認証された決済を完了させます。 - レスポンスの`tds2_trans_result`が上記以外の場合、3Dセキュア認証で決済が拒否されたことを示します。 
    # @param access_id [String] 取引ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pay_type この決済で利用する決済手段です。未指定の場合、&#x60;Card&#x60;となります。  - &#x60;Card&#x60;: カード（デフォルト） - &#x60;Googlepay&#x60;: Google Pay 
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証の結果を確定します。 
    # @return [ThreeDSecureConfirmingResponse]
    def confirm_three_d_secureecure_authentication(access_id, opts = {})
      data, _status_code, _headers = confirm_three_d_secureecure_authentication_with_http_info(access_id, opts)
      data
    end

    # 3Dセキュア 認証結果確定
    # &#x60;access_id&#x60;で指定したカード決済取引の3Dセキュア認証の結果を確定します。\\ \\ &#x60;challenge_url&#x60;上で購入者がチャレンジ認証実施後、&#x60;tds2_ret_url&#x60;に対し&#x60;event&#x60;パラメータで&#x60;AuthResultReady&#x60;イベントが通知されたとき、このAPIを呼び出します。  - レスポンスの&#x60;tds2_trans_result&#x60;が&#x60;Y&#x60;または&#x60;A&#x60;のとき、認証後決済 実行APIを呼び出し3Dセキュア認証された決済を完了させます。 - レスポンスの&#x60;tds2_trans_result&#x60;が上記以外の場合、3Dセキュア認証で決済が拒否されたことを示します。 
    # @param access_id [String] 取引ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pay_type この決済で利用する決済手段です。未指定の場合、&#x60;Card&#x60;となります。  - &#x60;Card&#x60;: カード（デフォルト） - &#x60;Googlepay&#x60;: Google Pay 
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証の結果を確定します。 
    # @return [Array<(ThreeDSecureConfirmingResponse, Integer, Hash)>] ThreeDSecureConfirmingResponse data, response status code and response headers
    def confirm_three_d_secureecure_authentication_with_http_info(access_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3DApi.confirm_three_d_secureecure_authentication ...'
      end
      # verify the required parameter 'access_id' is set
      if @api_client.config.client_side_validation && access_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_id' when calling Class3DApi.confirm_three_d_secureecure_authentication"
      end
      # resource path
      local_var_path = '/v1/secure2/{access_id}'.sub('{' + 'access_id' + '}', CGI.escape(access_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pay_type'] = opts[:'pay_type'] if !opts[:'pay_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params['Tenant-Shop-Id'] = opts[:tenant_shop_id] if !opts[:tenant_shop_id].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ThreeDSecureConfirmingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"Class3DApi.confirm_three_d_secureecure_authentication",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3DApi#confirm_three_d_secureecure_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 3Dセキュア 認証実行
    # `access_id`で指定したカード決済取引の3Dセキュア2.0認証を開始します。\\ \\ 用意した`tds2_ret_url`に対し`event`パラメータで`ThreeDSecureMethodFinished`もしくは`ThreeDSecureMethodSkipped`イベントが通知されたとき、このAPIを呼び出します。  - レスポンスの`tds2_trans_result`が`Y`または`A`のとき、認証後決済 実行APIを呼び出し3Dセキュア認証された決済を完了させます。 - レスポンスの`tds2_trans_result`が`C`のとき、`challenge_url`にリダイレクトし購入者にチャレンジ認証を実施させ、結果を3Dセキュア認証 結果確定APIで確定します。 - レスポンスの`tds2_trans_result`が上記以外の場合、3Dセキュア認証で決済が拒否されたことを示します。 
    # @param access_id [String] 取引ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証を開始します。 
    # @option opts [ThreeDSecureAuthorizingRequest] :three_d_secure_authorizing_request 
    # @return [ThreeDSecureAuthorizingResponse]
    def execute_three_d_secureecure_authentication(access_id, opts = {})
      data, _status_code, _headers = execute_three_d_secureecure_authentication_with_http_info(access_id, opts)
      data
    end

    # 3Dセキュア 認証実行
    # &#x60;access_id&#x60;で指定したカード決済取引の3Dセキュア2.0認証を開始します。\\ \\ 用意した&#x60;tds2_ret_url&#x60;に対し&#x60;event&#x60;パラメータで&#x60;ThreeDSecureMethodFinished&#x60;もしくは&#x60;ThreeDSecureMethodSkipped&#x60;イベントが通知されたとき、このAPIを呼び出します。  - レスポンスの&#x60;tds2_trans_result&#x60;が&#x60;Y&#x60;または&#x60;A&#x60;のとき、認証後決済 実行APIを呼び出し3Dセキュア認証された決済を完了させます。 - レスポンスの&#x60;tds2_trans_result&#x60;が&#x60;C&#x60;のとき、&#x60;challenge_url&#x60;にリダイレクトし購入者にチャレンジ認証を実施させ、結果を3Dセキュア認証 結果確定APIで確定します。 - レスポンスの&#x60;tds2_trans_result&#x60;が上記以外の場合、3Dセキュア認証で決済が拒否されたことを示します。 
    # @param access_id [String] 取引ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証を開始します。 
    # @option opts [ThreeDSecureAuthorizingRequest] :three_d_secure_authorizing_request 
    # @return [Array<(ThreeDSecureAuthorizingResponse, Integer, Hash)>] ThreeDSecureAuthorizingResponse data, response status code and response headers
    def execute_three_d_secureecure_authentication_with_http_info(access_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3DApi.execute_three_d_secureecure_authentication ...'
      end
      # verify the required parameter 'access_id' is set
      if @api_client.config.client_side_validation && access_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_id' when calling Class3DApi.execute_three_d_secureecure_authentication"
      end
      # resource path
      local_var_path = '/v1/secure2/{access_id}'.sub('{' + 'access_id' + '}', CGI.escape(access_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params['Tenant-Shop-Id'] = opts[:tenant_shop_id] if !opts[:tenant_shop_id].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'three_d_secure_authorizing_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ThreeDSecureAuthorizingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"Class3DApi.execute_three_d_secureecure_authentication",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3DApi#execute_three_d_secureecure_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
