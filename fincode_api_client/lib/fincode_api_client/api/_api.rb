=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module FincodeApiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 決済 再オーソリ
    # 決済のオーソリを再度実行します。\\ \\ `pay_type`が`Card`かつ`status`が`CANCELED`の決済（キャンセル済みのカード決済）に対して実行ができ、初回決済時の情報を引き継いで再オーソリを行います。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済のオーソリを再度実行します。 
    # @option opts [PaymentCardReauthorizingRequest] :payment_card_reauthorizing_request 
    # @return [PaymentCardReauthorizingResponse]
    def authorize_payment(id, opts = {})
      data, _status_code, _headers = authorize_payment_with_http_info(id, opts)
      data
    end

    # 決済 再オーソリ
    # 決済のオーソリを再度実行します。\\ \\ &#x60;pay_type&#x60;が&#x60;Card&#x60;かつ&#x60;status&#x60;が&#x60;CANCELED&#x60;の決済（キャンセル済みのカード決済）に対して実行ができ、初回決済時の情報を引き継いで再オーソリを行います。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済のオーソリを再度実行します。 
    # @option opts [PaymentCardReauthorizingRequest] :payment_card_reauthorizing_request 
    # @return [Array<(PaymentCardReauthorizingResponse, Integer, Hash)>] PaymentCardReauthorizingResponse data, response status code and response headers
    def authorize_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authorize_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.authorize_payment"
      end
      # resource path
      local_var_path = '/v1/payments/{id}/auth'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'payment_card_reauthorizing_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentCardReauthorizingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.authorize_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authorize_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済 キャンセル
    # 決済をキャンセルします。キャンセルに成功すると`status`はキャンセル済み（`CANCELED`）に遷移します。\\ \\ ユーザーへの返金の行われ方などは決済手段によって異なります。\\ 詳細は[Docs > 決済](https://docs.fincode.jp/payment)から参照できます。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済をキャンセルします。 
    # @option opts [CancelPaymentRequest] :cancel_payment_request 
    # @return [CancelPayment200Response]
    def cancel_payment(id, opts = {})
      data, _status_code, _headers = cancel_payment_with_http_info(id, opts)
      data
    end

    # 決済 キャンセル
    # 決済をキャンセルします。キャンセルに成功すると&#x60;status&#x60;はキャンセル済み（&#x60;CANCELED&#x60;）に遷移します。\\ \\ ユーザーへの返金の行われ方などは決済手段によって異なります。\\ 詳細は[Docs &gt; 決済](https://docs.fincode.jp/payment)から参照できます。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済をキャンセルします。 
    # @option opts [CancelPaymentRequest] :cancel_payment_request 
    # @return [Array<(CancelPayment200Response, Integer, Hash)>] CancelPayment200Response data, response status code and response headers
    def cancel_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cancel_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.cancel_payment"
      end
      # resource path
      local_var_path = '/v1/payments/{id}/cancel'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'cancel_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CancelPayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.cancel_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cancel_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済 売上確定
    # `status`が仮売上（`AUTHORIZED`）またはキャンセル（`CANCELED`）である決済に対して売上確定を行います。\\ 成功すると、ステータスが`CAPTURED`に遷移し、その時点を集計対象とした売上入金に反映されます。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済の売上確定を実行します。 
    # @option opts [CapturePaymentRequest] :capture_payment_request 
    # @return [CapturePayment200Response]
    def capture_payment(id, opts = {})
      data, _status_code, _headers = capture_payment_with_http_info(id, opts)
      data
    end

    # 決済 売上確定
    # &#x60;status&#x60;が仮売上（&#x60;AUTHORIZED&#x60;）またはキャンセル（&#x60;CANCELED&#x60;）である決済に対して売上確定を行います。\\ 成功すると、ステータスが&#x60;CAPTURED&#x60;に遷移し、その時点を集計対象とした売上入金に反映されます。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済の売上確定を実行します。 
    # @option opts [CapturePaymentRequest] :capture_payment_request 
    # @return [Array<(CapturePayment200Response, Integer, Hash)>] CapturePayment200Response data, response status code and response headers
    def capture_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.capture_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.capture_payment"
      end
      # resource path
      local_var_path = '/v1/payments/{id}/capture'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'capture_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CapturePayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.capture_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#capture_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済 金額変更
    # 決済の利用金額を変更します。\\ 既に売上確定となっている決済は請求金額が変更され、仮売上となっている決済は確保している与信枠の金額が変更されます。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済の利用金額を変更します。 
    # @option opts [ChangeAmountOfPaymentRequest] :change_amount_of_payment_request 
    # @return [ChangeAmountOfPayment200Response]
    def change_amount_of_payment(id, opts = {})
      data, _status_code, _headers = change_amount_of_payment_with_http_info(id, opts)
      data
    end

    # 決済 金額変更
    # 決済の利用金額を変更します。\\ 既に売上確定となっている決済は請求金額が変更され、仮売上となっている決済は確保している与信枠の金額が変更されます。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済の利用金額を変更します。 
    # @option opts [ChangeAmountOfPaymentRequest] :change_amount_of_payment_request 
    # @return [Array<(ChangeAmountOfPayment200Response, Integer, Hash)>] ChangeAmountOfPayment200Response data, response status code and response headers
    def change_amount_of_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.change_amount_of_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.change_amount_of_payment"
      end
      # resource path
      local_var_path = '/v1/payments/{id}/change'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'change_amount_of_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ChangeAmountOfPayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.change_amount_of_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#change_amount_of_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード登録URL 作成
    # fincodeが提供するリダイレクト型カード登録ページを発行し、そのカード登録ページへのURLをレスポンスします。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップ上の顧客に対してカードを登録するためのカード登録URLを発行します。 
    # @option opts [CardRegistrationSessionCreatingRequest] :card_registration_session_creating_request 
    # @return [CardRegistrationSessionCreatingResponse]
    def create_card_registration_session(opts = {})
      data, _status_code, _headers = create_card_registration_session_with_http_info(opts)
      data
    end

    # カード登録URL 作成
    # fincodeが提供するリダイレクト型カード登録ページを発行し、そのカード登録ページへのURLをレスポンスします。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップ上の顧客に対してカードを登録するためのカード登録URLを発行します。 
    # @option opts [CardRegistrationSessionCreatingRequest] :card_registration_session_creating_request 
    # @return [Array<(CardRegistrationSessionCreatingResponse, Integer, Hash)>] CardRegistrationSessionCreatingResponse data, response status code and response headers
    def create_card_registration_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_card_registration_session ...'
      end
      # resource path
      local_var_path = '/v1/card_sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'card_registration_session_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardRegistrationSessionCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_card_registration_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_card_registration_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 顧客 登録
    # 顧客情報を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップに紐づく形で顧客情報を登録します。 
    # @option opts [CustomerCreatingRequest] :customer_creating_request 
    # @return [CustomerCreatingResponse]
    def create_customer(opts = {})
      data, _status_code, _headers = create_customer_with_http_info(opts)
      data
    end

    # 顧客 登録
    # 顧客情報を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップに紐づく形で顧客情報を登録します。 
    # @option opts [CustomerCreatingRequest] :customer_creating_request 
    # @return [Array<(CustomerCreatingResponse, Integer, Hash)>] CustomerCreatingResponse data, response status code and response headers
    def create_customer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_customer ...'
      end
      # resource path
      local_var_path = '/v1/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'customer_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード 登録
    # `customer_id`で指定した顧客に対しカードを登録します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対してカードを登録します。 
    # @option opts [CustomerCardCreatingRequest] :customer_card_creating_request 
    # @return [CustomerCardCreatingResponse]
    def create_customer_card(customer_id, opts = {})
      data, _status_code, _headers = create_customer_card_with_http_info(customer_id, opts)
      data
    end

    # カード 登録
    # &#x60;customer_id&#x60;で指定した顧客に対しカードを登録します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対してカードを登録します。 
    # @option opts [CustomerCardCreatingRequest] :customer_card_creating_request 
    # @return [Array<(CustomerCardCreatingResponse, Integer, Hash)>] CustomerCardCreatingResponse data, response status code and response headers
    def create_customer_card_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_customer_card ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.create_customer_card"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/cards'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'customer_card_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCardCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_customer_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_customer_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済手段 登録
    # `customer_id`で指定した顧客に対し、決済手段を登録します。 
    # @param customer_id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して決済手段を登録します。 
    # @option opts [CustomerPaymentMethodCreatingRequest] :customer_payment_method_creating_request 
    # @return [CustomerPaymentMethodCreatingResponse]
    def create_customer_payment_method(customer_id, opts = {})
      data, _status_code, _headers = create_customer_payment_method_with_http_info(customer_id, opts)
      data
    end

    # 決済手段 登録
    # &#x60;customer_id&#x60;で指定した顧客に対し、決済手段を登録します。 
    # @param customer_id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して決済手段を登録します。 
    # @option opts [CustomerPaymentMethodCreatingRequest] :customer_payment_method_creating_request 
    # @return [Array<(CustomerPaymentMethodCreatingResponse, Integer, Hash)>] CustomerPaymentMethodCreatingResponse data, response status code and response headers
    def create_customer_payment_method_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_customer_payment_method ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.create_customer_payment_method"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/payment_methods'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'customer_payment_method_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerPaymentMethodCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_customer_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_customer_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済 登録
    # 決済情報をfincodeに登録します。決済登録に成功した時点ではまだ顧客に対して請求はされていません。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主として決済を登録します。テナントが&#x60;pay_type&#x60;で指定する決済手段契約の審査を完了させている必要があります。 
    # @option opts [CreatePaymentRequest] :create_payment_request 
    # @return [CreatePayment200Response]
    def create_payment(opts = {})
      data, _status_code, _headers = create_payment_with_http_info(opts)
      data
    end

    # 決済 登録
    # 決済情報をfincodeに登録します。決済登録に成功した時点ではまだ顧客に対して請求はされていません。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主として決済を登録します。テナントが&#x60;pay_type&#x60;で指定する決済手段契約の審査を完了させている必要があります。 
    # @option opts [CreatePaymentRequest] :create_payment_request 
    # @return [Array<(CreatePayment200Response, Integer, Hash)>] CreatePayment200Response data, response status code and response headers
    def create_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_payment ...'
      end
      # resource path
      local_var_path = '/v1/payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 一括決済 登録
    # fincodeにJSON形式のファイルで一括決済情報を登録し、`process_plan_date`で指定した日時に一括決済処理を予約します。 
    # @param pay_type [PaymentBulkPayType] 
    # @param process_plan_date [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済情報を一括登録します。 
    # @option opts [String] :file 一括決済情報を記載したJSONファイル。\\\\ \\\\ 以下のようなファイルをアップロードします。 &#x60;&#x60;&#x60;json {     \\\&quot;data\\\&quot;: [         {             \\\&quot;id\\\&quot;: \\\&quot;order_001\\\&quot;,             \\\&quot;amount\\\&quot;: \\\&quot;1000\\\&quot;,             \\\&quot;tax\\\&quot;: \\\&quot;100\\\&quot;,             \\\&quot;customer_id\\\&quot;: \\\&quot;c_**********************\\\&quot;,             \\\&quot;card_id\\\&quot;: \\\&quot;cs_**********************\\\&quot;,             \\\&quot;client_field_1\\\&quot;: \\\&quot;自由項目1\\\&quot;,             \\\&quot;client_field_2\\\&quot;: \\\&quot;自由項目2\\\&quot;,             \\\&quot;client_field_3\\\&quot;: \\\&quot;自由項目3\\\&quot;         },         {             \\\&quot;id\\\&quot;: \\\&quot;order_002\\\&quot;,             \\\&quot;amount\\\&quot;: \\\&quot;1000\\\&quot;,             \\\&quot;customer_id\\\&quot;: \\\&quot;c_**********************\\\&quot;,             \\\&quot;card_id\\\&quot;: \\\&quot;cs_**********************\\\&quot;         },         ...     ] } &#x60;&#x60;&#x60; パラメータ仕様は以下の通りで、各パラメータの形式は決済登録・決済実行APIに準拠します。（*は必須項目）  - &#x60;data&#x60;: 決済情報のリストを格納する配列 - &#x60;data[].id&#x60;: オーダーID* - &#x60;data[].amount&#x60;: 利用金額* - &#x60;data[].tax&#x60;: 税送料 - &#x60;data[].customer_id&#x60;: 顧客ID* - &#x60;data[].card_id&#x60;: カードID - &#x60;data[].client_field_1&#x60;: 自由項目1 - &#x60;data[].client_field_2&#x60;: 自由項目2 - &#x60;data[].client_field_3&#x60;: 自由項目3 
    # @return [PaymentBulkCreatingResponse]
    def create_payment_bulk(pay_type, process_plan_date, opts = {})
      data, _status_code, _headers = create_payment_bulk_with_http_info(pay_type, process_plan_date, opts)
      data
    end

    # 一括決済 登録
    # fincodeにJSON形式のファイルで一括決済情報を登録し、&#x60;process_plan_date&#x60;で指定した日時に一括決済処理を予約します。 
    # @param pay_type [PaymentBulkPayType] 
    # @param process_plan_date [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済情報を一括登録します。 
    # @option opts [String] :file 一括決済情報を記載したJSONファイル。\\\\ \\\\ 以下のようなファイルをアップロードします。 &#x60;&#x60;&#x60;json {     \\\&quot;data\\\&quot;: [         {             \\\&quot;id\\\&quot;: \\\&quot;order_001\\\&quot;,             \\\&quot;amount\\\&quot;: \\\&quot;1000\\\&quot;,             \\\&quot;tax\\\&quot;: \\\&quot;100\\\&quot;,             \\\&quot;customer_id\\\&quot;: \\\&quot;c_**********************\\\&quot;,             \\\&quot;card_id\\\&quot;: \\\&quot;cs_**********************\\\&quot;,             \\\&quot;client_field_1\\\&quot;: \\\&quot;自由項目1\\\&quot;,             \\\&quot;client_field_2\\\&quot;: \\\&quot;自由項目2\\\&quot;,             \\\&quot;client_field_3\\\&quot;: \\\&quot;自由項目3\\\&quot;         },         {             \\\&quot;id\\\&quot;: \\\&quot;order_002\\\&quot;,             \\\&quot;amount\\\&quot;: \\\&quot;1000\\\&quot;,             \\\&quot;customer_id\\\&quot;: \\\&quot;c_**********************\\\&quot;,             \\\&quot;card_id\\\&quot;: \\\&quot;cs_**********************\\\&quot;         },         ...     ] } &#x60;&#x60;&#x60; パラメータ仕様は以下の通りで、各パラメータの形式は決済登録・決済実行APIに準拠します。（*は必須項目）  - &#x60;data&#x60;: 決済情報のリストを格納する配列 - &#x60;data[].id&#x60;: オーダーID* - &#x60;data[].amount&#x60;: 利用金額* - &#x60;data[].tax&#x60;: 税送料 - &#x60;data[].customer_id&#x60;: 顧客ID* - &#x60;data[].card_id&#x60;: カードID - &#x60;data[].client_field_1&#x60;: 自由項目1 - &#x60;data[].client_field_2&#x60;: 自由項目2 - &#x60;data[].client_field_3&#x60;: 自由項目3 
    # @return [Array<(PaymentBulkCreatingResponse, Integer, Hash)>] PaymentBulkCreatingResponse data, response status code and response headers
    def create_payment_bulk_with_http_info(pay_type, process_plan_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_payment_bulk ...'
      end
      # verify the required parameter 'pay_type' is set
      if @api_client.config.client_side_validation && pay_type.nil?
        fail ArgumentError, "Missing the required parameter 'pay_type' when calling DefaultApi.create_payment_bulk"
      end
      # verify the required parameter 'process_plan_date' is set
      if @api_client.config.client_side_validation && process_plan_date.nil?
        fail ArgumentError, "Missing the required parameter 'process_plan_date' when calling DefaultApi.create_payment_bulk"
      end
      # resource path
      local_var_path = '/v1/payments/bulk'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pay_type'] = pay_type
      query_params[:'process_plan_date'] = process_plan_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentBulkCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_payment_bulk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_payment_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済URL 作成
    # fincodeが提供するリダイレクト型決済ページを発行し、その決済ページへのURLをレスポンスします。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップで決済を行います。 
    # @option opts [PaymentSessionCreatingRequest] :payment_session_creating_request 
    # @return [PaymentSessionCreatingResponse]
    def create_payment_session(opts = {})
      data, _status_code, _headers = create_payment_session_with_http_info(opts)
      data
    end

    # 決済URL 作成
    # fincodeが提供するリダイレクト型決済ページを発行し、その決済ページへのURLをレスポンスします。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップで決済を行います。 
    # @option opts [PaymentSessionCreatingRequest] :payment_session_creating_request 
    # @return [Array<(PaymentSessionCreatingResponse, Integer, Hash)>] PaymentSessionCreatingResponse data, response status code and response headers
    def create_payment_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_payment_session ...'
      end
      # resource path
      local_var_path = '/v1/sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'payment_session_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentSessionCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_payment_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_payment_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラン 登録
    # プラン情報を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [PlanCreatingRequest] :plan_creating_request 
    # @return [PlanCreatingResponse]
    def create_plan(opts = {})
      data, _status_code, _headers = create_plan_with_http_info(opts)
      data
    end

    # プラン 登録
    # プラン情報を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [PlanCreatingRequest] :plan_creating_request 
    # @return [Array<(PlanCreatingResponse, Integer, Hash)>] PlanCreatingResponse data, response status code and response headers
    def create_plan_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_plan ...'
      end
      # resource path
      local_var_path = '/v1/plans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'plan_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PlanCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション 登録
    # `customer_id`で指定した顧客に対して`plan_id`で指定したプランを適用したサブスクリプション情報を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionCreatingRequest] :subscription_creating_request 
    # @return [SubscriptionCreatingResponse]
    def create_subscription(opts = {})
      data, _status_code, _headers = create_subscription_with_http_info(opts)
      data
    end

    # サブスクリプション 登録
    # &#x60;customer_id&#x60;で指定した顧客に対して&#x60;plan_id&#x60;で指定したプランを適用したサブスクリプション情報を登録します。 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionCreatingRequest] :subscription_creating_request 
    # @return [Array<(SubscriptionCreatingResponse, Integer, Hash)>] SubscriptionCreatingResponse data, response status code and response headers
    def create_subscription_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_subscription ...'
      end
      # resource path
      local_var_path = '/v1/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'subscription_creating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionCreatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 作成（既存ユーザー参加）
    # 指定したプラットフォームショップのユーザーを新規テナントショップのオーナーとして新規テナントショップを作成するAPIです。\\ \\ `password`パラメータに関して、ユーザーのパスワードがfincode管理画面アプリケーション上で更新されることを想定して実装・運用することが推奨されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [POSTJoinTenantsRequest] :post_join_tenants_request 
    # @return [POSTJoinTenantsResponse]
    def create_tenant_with_existing_user(opts = {})
      data, _status_code, _headers = create_tenant_with_existing_user_with_http_info(opts)
      data
    end

    # テナントショップ 作成（既存ユーザー参加）
    # 指定したプラットフォームショップのユーザーを新規テナントショップのオーナーとして新規テナントショップを作成するAPIです。\\ \\ &#x60;password&#x60;パラメータに関して、ユーザーのパスワードがfincode管理画面アプリケーション上で更新されることを想定して実装・運用することが推奨されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [POSTJoinTenantsRequest] :post_join_tenants_request 
    # @return [Array<(POSTJoinTenantsResponse, Integer, Hash)>] POSTJoinTenantsResponse data, response status code and response headers
    def create_tenant_with_existing_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_tenant_with_existing_user ...'
      end
      # resource path
      local_var_path = '/v1/join_tenants'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_join_tenants_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'POSTJoinTenantsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_tenant_with_existing_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_tenant_with_existing_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 作成（新規ユーザー登録）
    # 新規ユーザーを作成し、作成されたユーザーをオーナーとして新規テナントショップを作成するAPIです。\\ このAPIでのテナント作成に成功すると、登録されたメールアドレス宛にメールアドレス認証メールが送信されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [POSTTenantEntriesRequest] :post_tenant_entries_request 
    # @return [POSTTenantEntriesResponse]
    def create_tenant_with_new_user(opts = {})
      data, _status_code, _headers = create_tenant_with_new_user_with_http_info(opts)
      data
    end

    # テナントショップ 作成（新規ユーザー登録）
    # 新規ユーザーを作成し、作成されたユーザーをオーナーとして新規テナントショップを作成するAPIです。\\ このAPIでのテナント作成に成功すると、登録されたメールアドレス宛にメールアドレス認証メールが送信されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [POSTTenantEntriesRequest] :post_tenant_entries_request 
    # @return [Array<(POSTTenantEntriesResponse, Integer, Hash)>] POSTTenantEntriesResponse data, response status code and response headers
    def create_tenant_with_new_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_tenant_with_new_user ...'
      end
      # resource path
      local_var_path = '/v1/tenant_entries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_tenant_entries_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'POSTTenantEntriesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_tenant_with_new_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_tenant_with_new_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 顧客 削除
    # IDで指定した顧客情報を削除します。 
    # @param id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客情報を削除します。 
    # @return [CustomerDeletingResponse]
    def delete_customer(id, opts = {})
      data, _status_code, _headers = delete_customer_with_http_info(id, opts)
      data
    end

    # 顧客 削除
    # IDで指定した顧客情報を削除します。 
    # @param id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客情報を削除します。 
    # @return [Array<(CustomerDeletingResponse, Integer, Hash)>] CustomerDeletingResponse data, response status code and response headers
    def delete_customer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_customer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_customer"
      end
      # resource path
      local_var_path = '/v1/customers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDeletingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード 削除
    # `customer_id`で指定した顧客に対し紐づくカードのうち`id`で指定したものを削除します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param id [String] 削除するカードのID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードを削除します。 
    # @return [CustomerCardDeletingResponse]
    def delete_customer_card(customer_id, id, opts = {})
      data, _status_code, _headers = delete_customer_card_with_http_info(customer_id, id, opts)
      data
    end

    # カード 削除
    # &#x60;customer_id&#x60;で指定した顧客に対し紐づくカードのうち&#x60;id&#x60;で指定したものを削除します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param id [String] 削除するカードのID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードを削除します。 
    # @return [Array<(CustomerCardDeletingResponse, Integer, Hash)>] CustomerCardDeletingResponse data, response status code and response headers
    def delete_customer_card_with_http_info(customer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_customer_card ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.delete_customer_card"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_customer_card"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/cards/{id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCardDeletingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_customer_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_customer_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済手段 削除
    # `customer_id`で指定した顧客に対し紐づく決済手段のうち、`id`で指定したものを削除します。 
    # @param customer_id [String] 顧客ID
    # @param id [String] 決済手段ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段からIDで指定した決済手段を削除します。 
    # @return [CustomerPaymentMethodDeletingResponse]
    def delete_customer_payment_method(customer_id, id, opts = {})
      data, _status_code, _headers = delete_customer_payment_method_with_http_info(customer_id, id, opts)
      data
    end

    # 決済手段 削除
    # &#x60;customer_id&#x60;で指定した顧客に対し紐づく決済手段のうち、&#x60;id&#x60;で指定したものを削除します。 
    # @param customer_id [String] 顧客ID
    # @param id [String] 決済手段ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段からIDで指定した決済手段を削除します。 
    # @return [Array<(CustomerPaymentMethodDeletingResponse, Integer, Hash)>] CustomerPaymentMethodDeletingResponse data, response status code and response headers
    def delete_customer_payment_method_with_http_info(customer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_customer_payment_method ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.delete_customer_payment_method"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_customer_payment_method"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/payment_methods/{id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerPaymentMethodDeletingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_customer_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_customer_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 一括決済 削除
    # IDで指定した一括決済情報を削除します。\\ 一括決済処理がチェック済み（`status`が`CHECKED`）のものに限り削除できます。 
    # @param id [String] 一括決済ID。\\ 削除対象の一括決済情報のIDを指定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした一括決済情報を削除します。 
    # @return [PaymentBulkDeletingResponse]
    def delete_payment_bulk(id, opts = {})
      data, _status_code, _headers = delete_payment_bulk_with_http_info(id, opts)
      data
    end

    # 一括決済 削除
    # IDで指定した一括決済情報を削除します。\\ 一括決済処理がチェック済み（&#x60;status&#x60;が&#x60;CHECKED&#x60;）のものに限り削除できます。 
    # @param id [String] 一括決済ID。\\ 削除対象の一括決済情報のIDを指定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした一括決済情報を削除します。 
    # @return [Array<(PaymentBulkDeletingResponse, Integer, Hash)>] PaymentBulkDeletingResponse data, response status code and response headers
    def delete_payment_bulk_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_payment_bulk ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_payment_bulk"
      end
      # resource path
      local_var_path = '/v1/payments/bulk/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentBulkDeletingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_payment_bulk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_payment_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラン 削除
    # IDで指定したプラン情報を削除します。\\ プランが1つ以上のサブスクリプションで使用されているとき（`used_flag = 1`のとき）、プランは削除できません。 
    # @param id [String] プランID
    # @param [Hash] opts the optional parameters
    # @return [PlanDeletingResponse]
    def delete_plan(id, opts = {})
      data, _status_code, _headers = delete_plan_with_http_info(id, opts)
      data
    end

    # プラン 削除
    # IDで指定したプラン情報を削除します。\\ プランが1つ以上のサブスクリプションで使用されているとき（&#x60;used_flag &#x3D; 1&#x60;のとき）、プランは削除できません。 
    # @param id [String] プランID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlanDeletingResponse, Integer, Hash)>] PlanDeletingResponse data, response status code and response headers
    def delete_plan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_plan"
      end
      # resource path
      local_var_path = '/v1/plans/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlanDeletingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済 実行
    # fincodeに登録された決済情報を指定し、請求を実行します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済処理を実行します。 
    # @option opts [ExecutePaymentRequest] :execute_payment_request 
    # @return [ExecutePayment200Response]
    def execute_payment(id, opts = {})
      data, _status_code, _headers = execute_payment_with_http_info(id, opts)
      data
    end

    # 決済 実行
    # fincodeに登録された決済情報を指定し、請求を実行します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済処理を実行します。 
    # @option opts [ExecutePaymentRequest] :execute_payment_request 
    # @return [Array<(ExecutePayment200Response, Integer, Hash)>] ExecutePayment200Response data, response status code and response headers
    def execute_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.execute_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.execute_payment"
      end
      # resource path
      local_var_path = '/v1/payments/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'execute_payment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExecutePayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.execute_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#execute_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 認証後決済 実行
    # 3Dセキュア認証後の決済を実行します。\\ \\ 3Dセキュア認証APIもしくは認証結果確定APIのレスポンスの3Dセキュア認証結果（`tds2_trans_result`）が`Y`または`A`のとき、このAPIを実行して3Dセキュア認証後の決済を実行します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済の3Dセキュア認証後決済を実行します。 
    # @option opts [PaymentCardExecutingAfterThreeDSecureRequest] :payment_card_executing_after_three_d_secure_request 
    # @return [PaymentCardExecutingAfterThreeDSecureResponse]
    def execute_payment_after_three_d_secureecure(id, opts = {})
      data, _status_code, _headers = execute_payment_after_three_d_secureecure_with_http_info(id, opts)
      data
    end

    # 認証後決済 実行
    # 3Dセキュア認証後の決済を実行します。\\ \\ 3Dセキュア認証APIもしくは認証結果確定APIのレスポンスの3Dセキュア認証結果（&#x60;tds2_trans_result&#x60;）が&#x60;Y&#x60;または&#x60;A&#x60;のとき、このAPIを実行して3Dセキュア認証後の決済を実行します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済の3Dセキュア認証後決済を実行します。 
    # @option opts [PaymentCardExecutingAfterThreeDSecureRequest] :payment_card_executing_after_three_d_secure_request 
    # @return [Array<(PaymentCardExecutingAfterThreeDSecureResponse, Integer, Hash)>] PaymentCardExecutingAfterThreeDSecureResponse data, response status code and response headers
    def execute_payment_after_three_d_secureecure_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.execute_payment_after_three_d_secureecure ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.execute_payment_after_three_d_secureecure"
      end
      # resource path
      local_var_path = '/v1/payments/{id}/secure'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'payment_card_executing_after_three_d_secure_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentCardExecutingAfterThreeDSecureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.execute_payment_after_three_d_secureecure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#execute_payment_after_three_d_secureecure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # バーコード発行
    # リクエストしたデバイスの情報に合わせてコンビニ決済のバーコードを再度発行します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主としたコンビニ決済のうち、&#x60;id&#x60;で指定した決済のバーコードを再度発行します。 
    # @option opts [PaymentKonbiniGeneratingBarcodeRequest] :payment_konbini_generating_barcode_request 
    # @return [PaymentKonbiniGeneratingBarcodeResponse]
    def generate_barcode_of_payment(id, opts = {})
      data, _status_code, _headers = generate_barcode_of_payment_with_http_info(id, opts)
      data
    end

    # バーコード発行
    # リクエストしたデバイスの情報に合わせてコンビニ決済のバーコードを再度発行します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主としたコンビニ決済のうち、&#x60;id&#x60;で指定した決済のバーコードを再度発行します。 
    # @option opts [PaymentKonbiniGeneratingBarcodeRequest] :payment_konbini_generating_barcode_request 
    # @return [Array<(PaymentKonbiniGeneratingBarcodeResponse, Integer, Hash)>] PaymentKonbiniGeneratingBarcodeResponse data, response status code and response headers
    def generate_barcode_of_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.generate_barcode_of_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.generate_barcode_of_payment"
      end
      # resource path
      local_var_path = '/v1/payments/{id}/barcode'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'payment_konbini_generating_barcode_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentKonbiniGeneratingBarcodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.generate_barcode_of_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#generate_barcode_of_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 本番環境申請
    # `id`で指定したテナントショップの本番環境の利用申請を行います。このAPIを呼び出すまでにテナント本番環境申請情報 更新APIで申請情報を用意しておく必要があります。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップのものとしてファイルをアップロードします。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :shop_id ショップID 
    # @option opts [EnableImmediateUse] :enable_immediate_use VISA/Mastercard即時利用をリクエストするかどうか\\\\ \\\\ 即時利用は以下の条件すべてに合致しないとき利用をリクエストできます。  - &#x60;本番環境申請情報.contract_info.site_published&#x60;が&#x60;true&#x60;でない（審査時点でWebサイトが用意されていない） - &#x60;本番環境申請情報.shop_info.deals_long_apply_content&#x60;が&#x60;true&#x60;である（審査に時間がかかる商材を取り扱うと表明している） 
    # @return [POSTContractsExaminationsResponse]
    def request_production_environment(tenant_shop_id, opts = {})
      data, _status_code, _headers = request_production_environment_with_http_info(tenant_shop_id, opts)
      data
    end

    # テナントショップ 本番環境申請
    # &#x60;id&#x60;で指定したテナントショップの本番環境の利用申請を行います。このAPIを呼び出すまでにテナント本番環境申請情報 更新APIで申請情報を用意しておく必要があります。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップのものとしてファイルをアップロードします。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :shop_id ショップID 
    # @option opts [EnableImmediateUse] :enable_immediate_use VISA/Mastercard即時利用をリクエストするかどうか\\\\ \\\\ 即時利用は以下の条件すべてに合致しないとき利用をリクエストできます。  - &#x60;本番環境申請情報.contract_info.site_published&#x60;が&#x60;true&#x60;でない（審査時点でWebサイトが用意されていない） - &#x60;本番環境申請情報.shop_info.deals_long_apply_content&#x60;が&#x60;true&#x60;である（審査に時間がかかる商材を取り扱うと表明している） 
    # @return [Array<(POSTContractsExaminationsResponse, Integer, Hash)>] POSTContractsExaminationsResponse data, response status code and response headers
    def request_production_environment_with_http_info(tenant_shop_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_production_environment ...'
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.request_production_environment"
      end
      # resource path
      local_var_path = '/v1/contracts/examinations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['shop_id'] = opts[:'shop_id'] if !opts[:'shop_id'].nil?
      form_params['enable_immediate_use'] = opts[:'enable_immediate_use'] if !opts[:'enable_immediate_use'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'POSTContractsExaminationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.request_production_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_production_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 決済手段追加申請
    # `id`で指定したテナントショップの決済手段の追加申請を行います。   ※ 申請状況の管理画面への反映には最大24時間程度のタイムラグがあります 
    # @param id [String] 指定したテナントショップに対して決済手段を追加申請します。。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップに対して決済手段を追加申請します。 
    # @param provider [Array<PaymentProvider>] 追加対象決済手段\\\\ \\\\ 追加で申請する決済手段をリストで指定します。  - &#x60;PAYSLE&#x60;: コンビニ決済 - &#x60;PAYPAY&#x60;: PayPay - &#x60;APPLE_PAY_UC&#x60;: Apple Pay（VISA/Mastercard） - &#x60;APPLE_PAY_JCB&#x60;: Apple Pay（JCB/American Express/Diners Club） - &#x60;DIRECT_DEBIT&#x60;: 口座振替 - &#x60;VIRTUAL_ACCOUNT&#x60;: 銀行振込（バーチャル口座） 
    # @param [Hash] opts the optional parameters
    # @return [POSTProviderReserveResponse]
    def reserve_provider(id, tenant_shop_id, provider, opts = {})
      data, _status_code, _headers = reserve_provider_with_http_info(id, tenant_shop_id, provider, opts)
      data
    end

    # テナントショップ 決済手段追加申請
    # &#x60;id&#x60;で指定したテナントショップの決済手段の追加申請を行います。   ※ 申請状況の管理画面への反映には最大24時間程度のタイムラグがあります 
    # @param id [String] 指定したテナントショップに対して決済手段を追加申請します。。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップに対して決済手段を追加申請します。 
    # @param provider [Array<PaymentProvider>] 追加対象決済手段\\\\ \\\\ 追加で申請する決済手段をリストで指定します。  - &#x60;PAYSLE&#x60;: コンビニ決済 - &#x60;PAYPAY&#x60;: PayPay - &#x60;APPLE_PAY_UC&#x60;: Apple Pay（VISA/Mastercard） - &#x60;APPLE_PAY_JCB&#x60;: Apple Pay（JCB/American Express/Diners Club） - &#x60;DIRECT_DEBIT&#x60;: 口座振替 - &#x60;VIRTUAL_ACCOUNT&#x60;: 銀行振込（バーチャル口座） 
    # @param [Hash] opts the optional parameters
    # @return [Array<(POSTProviderReserveResponse, Integer, Hash)>] POSTProviderReserveResponse data, response status code and response headers
    def reserve_provider_with_http_info(id, tenant_shop_id, provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reserve_provider ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.reserve_provider"
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.reserve_provider"
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling DefaultApi.reserve_provider"
      end
      # resource path
      local_var_path = '/v1/contracts/examinations/tenants/{id}/providers/reserve'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['provider'] = provider

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'POSTProviderReserveResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.reserve_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reserve_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 売上入金 取得
    # IDで指定した売上入金を取得します。\\ `aggregate_term_start`から`aggregate_term_end`までの期間における売上の集計結果が含まれます。\\ \\ 集計された個々のレコードについては 売上入金明細 一覧取得API を利用することで取得できます。 
    # @param id [String] 売上入金情報のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの売上入金情報のうち、指定したIDの売上入金情報を取得します。 
    # @return [AccountRetrievingResponse]
    def retrieve_account(id, opts = {})
      data, _status_code, _headers = retrieve_account_with_http_info(id, opts)
      data
    end

    # 売上入金 取得
    # IDで指定した売上入金を取得します。\\ &#x60;aggregate_term_start&#x60;から&#x60;aggregate_term_end&#x60;までの期間における売上の集計結果が含まれます。\\ \\ 集計された個々のレコードについては 売上入金明細 一覧取得API を利用することで取得できます。 
    # @param id [String] 売上入金情報のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの売上入金情報のうち、指定したIDの売上入金情報を取得します。 
    # @return [Array<(AccountRetrievingResponse, Integer, Hash)>] AccountRetrievingResponse data, response status code and response headers
    def retrieve_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_account"
      end
      # resource path
      local_var_path = '/v1/accounts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 売上入金詳細 一覧取得
    # IDで指定した売上入金に紐づく売上入金詳細を一覧で取得します。\\ 1つの売上入金明細は、1件の決済／キャンセル／チャージバック／チャージバック取消調整のいずれかに対応します。 
    # @param id [String] 売上入金情報のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの売上入金情報のうち、指定したIDの売上入金情報の売上入金詳細を取得します。 
    # @option opts [PaginationQueryParams] :query 売上入金詳細の一覧取得において検索条件となるクエリパラメータ 
    # @return [AccountDetailListRetrievingResponse]
    def retrieve_account_detail_list(id, opts = {})
      data, _status_code, _headers = retrieve_account_detail_list_with_http_info(id, opts)
      data
    end

    # 売上入金詳細 一覧取得
    # IDで指定した売上入金に紐づく売上入金詳細を一覧で取得します。\\ 1つの売上入金明細は、1件の決済／キャンセル／チャージバック／チャージバック取消調整のいずれかに対応します。 
    # @param id [String] 売上入金情報のID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの売上入金情報のうち、指定したIDの売上入金情報の売上入金詳細を取得します。 
    # @option opts [PaginationQueryParams] :query 売上入金詳細の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(AccountDetailListRetrievingResponse, Integer, Hash)>] AccountDetailListRetrievingResponse data, response status code and response headers
    def retrieve_account_detail_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_account_detail_list ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_account_detail_list"
      end
      # resource path
      local_var_path = '/v1/accounts/{id}/detail'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountDetailListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_account_detail_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_account_detail_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 売上入金 一覧取得
    # 売上入金情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの売上入金情報から一覧で取得します。 
    # @option opts [RetrieveAccountListQueryParameter] :query 売上入金情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [AccountListRetrievingResponse]
    def retrieve_account_list(opts = {})
      data, _status_code, _headers = retrieve_account_list_with_http_info(opts)
      data
    end

    # 売上入金 一覧取得
    # 売上入金情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの売上入金情報から一覧で取得します。 
    # @option opts [RetrieveAccountListQueryParameter] :query 売上入金情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(AccountListRetrievingResponse, Integer, Hash)>] AccountListRetrievingResponse data, response status code and response headers
    def retrieve_account_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_account_list ...'
      end
      # resource path
      local_var_path = '/v1/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_account_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_account_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 顧客 取得
    # IDで指定した顧客情報を取得します。 
    # @param id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客情報を取得します。 
    # @return [CustomerRetrievingResponse]
    def retrieve_customer(id, opts = {})
      data, _status_code, _headers = retrieve_customer_with_http_info(id, opts)
      data
    end

    # 顧客 取得
    # IDで指定した顧客情報を取得します。 
    # @param id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客情報を取得します。 
    # @return [Array<(CustomerRetrievingResponse, Integer, Hash)>] CustomerRetrievingResponse data, response status code and response headers
    def retrieve_customer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_customer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_customer"
      end
      # resource path
      local_var_path = '/v1/customers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード 取得
    # `customer_id`で指定した顧客に対し紐づくカードのうち`id`で指定したものを取得します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param id [String] 取得するカードのID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードから取得します。 
    # @return [CustomerCardRetrievingResponse]
    def retrieve_customer_card(customer_id, id, opts = {})
      data, _status_code, _headers = retrieve_customer_card_with_http_info(customer_id, id, opts)
      data
    end

    # カード 取得
    # &#x60;customer_id&#x60;で指定した顧客に対し紐づくカードのうち&#x60;id&#x60;で指定したものを取得します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param id [String] 取得するカードのID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードから取得します。 
    # @return [Array<(CustomerCardRetrievingResponse, Integer, Hash)>] CustomerCardRetrievingResponse data, response status code and response headers
    def retrieve_customer_card_with_http_info(customer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_customer_card ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.retrieve_customer_card"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_customer_card"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/cards/{id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCardRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_customer_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_customer_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード 一覧取得
    # `customer_id`で指定した顧客に対し紐づくカードを一覧で取得します。 
    # @param customer_id [String] 顧客ID。 \\ この顧客に紐づくカードを一覧で取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードの一覧を取得します。 
    # @return [CustomerCardListRetrievingResponse]
    def retrieve_customer_card_list(customer_id, opts = {})
      data, _status_code, _headers = retrieve_customer_card_list_with_http_info(customer_id, opts)
      data
    end

    # カード 一覧取得
    # &#x60;customer_id&#x60;で指定した顧客に対し紐づくカードを一覧で取得します。 
    # @param customer_id [String] 顧客ID。 \\ この顧客に紐づくカードを一覧で取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードの一覧を取得します。 
    # @return [Array<(CustomerCardListRetrievingResponse, Integer, Hash)>] CustomerCardListRetrievingResponse data, response status code and response headers
    def retrieve_customer_card_list_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_customer_card_list ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.retrieve_customer_card_list"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/cards'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCardListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_customer_card_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_customer_card_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 顧客 一覧取得
    # 顧客情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrieveCustomerListQueryParameter] :query 顧客情報の一覧取得において検索条件となるクエリパラメータ 
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客から一覧で取得します。 
    # @return [CustomerListRetrievingResponse]
    def retrieve_customer_list(opts = {})
      data, _status_code, _headers = retrieve_customer_list_with_http_info(opts)
      data
    end

    # 顧客 一覧取得
    # 顧客情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrieveCustomerListQueryParameter] :query 顧客情報の一覧取得において検索条件となるクエリパラメータ 
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客から一覧で取得します。 
    # @return [Array<(CustomerListRetrievingResponse, Integer, Hash)>] CustomerListRetrievingResponse data, response status code and response headers
    def retrieve_customer_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_customer_list ...'
      end
      # resource path
      local_var_path = '/v1/customers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_customer_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_customer_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済手段 取得
    # `customer_id`で指定した顧客に対し紐づく決済手段のうち、`id`で指定したものを取得します。 
    # @param customer_id [String] 顧客ID
    # @param id [String] 決済手段ID
    # @param query [CustomerPaymentMethodRetrievingQueryParams] 決済手段の取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段からIDで指定した決済手段を取得します。 
    # @return [CustomerPaymentMethodRetrievingResponse]
    def retrieve_customer_payment_method(customer_id, id, query, opts = {})
      data, _status_code, _headers = retrieve_customer_payment_method_with_http_info(customer_id, id, query, opts)
      data
    end

    # 決済手段 取得
    # &#x60;customer_id&#x60;で指定した顧客に対し紐づく決済手段のうち、&#x60;id&#x60;で指定したものを取得します。 
    # @param customer_id [String] 顧客ID
    # @param id [String] 決済手段ID
    # @param query [CustomerPaymentMethodRetrievingQueryParams] 決済手段の取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段からIDで指定した決済手段を取得します。 
    # @return [Array<(CustomerPaymentMethodRetrievingResponse, Integer, Hash)>] CustomerPaymentMethodRetrievingResponse data, response status code and response headers
    def retrieve_customer_payment_method_with_http_info(customer_id, id, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_customer_payment_method ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.retrieve_customer_payment_method"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_customer_payment_method"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.retrieve_customer_payment_method"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/payment_methods/{id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerPaymentMethodRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_customer_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_customer_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済手段 一覧取得
    # `customer_id`で指定した顧客に対し紐づく決済手段を一覧で取得します。 
    # @param customer_id [String] 顧客ID
    # @param query [CustomerPaymentMethodListRetrievingQueryParams] 決済手段の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段から一覧で取得します。 
    # @return [CustomerPaymentMethodListRetrievingResponse]
    def retrieve_customer_payment_method_list(customer_id, query, opts = {})
      data, _status_code, _headers = retrieve_customer_payment_method_list_with_http_info(customer_id, query, opts)
      data
    end

    # 決済手段 一覧取得
    # &#x60;customer_id&#x60;で指定した顧客に対し紐づく決済手段を一覧で取得します。 
    # @param customer_id [String] 顧客ID
    # @param query [CustomerPaymentMethodListRetrievingQueryParams] 決済手段の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段から一覧で取得します。 
    # @return [Array<(CustomerPaymentMethodListRetrievingResponse, Integer, Hash)>] CustomerPaymentMethodListRetrievingResponse data, response status code and response headers
    def retrieve_customer_payment_method_list_with_http_info(customer_id, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_customer_payment_method_list ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.retrieve_customer_payment_method_list"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.retrieve_customer_payment_method_list"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/payment_methods'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerPaymentMethodListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Public-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_customer_payment_method_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_customer_payment_method_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済 取得
    # 指定した決済情報を取得します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param query [PaymentRetrievingQueryParams] 決済の取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済情報を取得します。 
    # @return [RetrievePayment200Response]
    def retrieve_payment(id, query, opts = {})
      data, _status_code, _headers = retrieve_payment_with_http_info(id, query, opts)
      data
    end

    # 決済 取得
    # 指定した決済情報を取得します。 
    # @param id [String] オーダーID（決済情報のID）
    # @param query [PaymentRetrievingQueryParams] 決済の取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした決済のうち、&#x60;id&#x60;で指定した決済情報を取得します。 
    # @return [Array<(RetrievePayment200Response, Integer, Hash)>] RetrievePayment200Response data, response status code and response headers
    def retrieve_payment_with_http_info(id, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_payment"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.retrieve_payment"
      end
      # resource path
      local_var_path = '/v1/payments/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RetrievePayment200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 一括決済詳細 一覧取得
    # IDで指定した一括決済情報の詳細（決済1件ごとの情報）と各決済で発生したエラーの情報を一覧で取得します。 
    # @param id [String] 一括決済ID。\\ 詳細を取得する一括決済情報のIDを指定します。 
    # @param query [RetrievePaymentBulkDetailListQueryParameter] 一括決済情報の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした一括決済の詳細を一覧で取得します。 
    # @return [PaymentBulkDetailListRetrievingResponse]
    def retrieve_payment_bulk_detail_list(id, query, opts = {})
      data, _status_code, _headers = retrieve_payment_bulk_detail_list_with_http_info(id, query, opts)
      data
    end

    # 一括決済詳細 一覧取得
    # IDで指定した一括決済情報の詳細（決済1件ごとの情報）と各決済で発生したエラーの情報を一覧で取得します。 
    # @param id [String] 一括決済ID。\\ 詳細を取得する一括決済情報のIDを指定します。 
    # @param query [RetrievePaymentBulkDetailListQueryParameter] 一括決済情報の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした一括決済の詳細を一覧で取得します。 
    # @return [Array<(PaymentBulkDetailListRetrievingResponse, Integer, Hash)>] PaymentBulkDetailListRetrievingResponse data, response status code and response headers
    def retrieve_payment_bulk_detail_list_with_http_info(id, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_payment_bulk_detail_list ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_payment_bulk_detail_list"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.retrieve_payment_bulk_detail_list"
      end
      # resource path
      local_var_path = '/v1/payments/bulk/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentBulkDetailListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_payment_bulk_detail_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_payment_bulk_detail_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 一括決済 一覧取得
    # fincodeに登録した一括決済の情報を一覧で取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした一括決済情報を一覧で取得します。 
    # @option opts [RetrievePaymentBulkListQueryParameter] :query 一括決済情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [PaymentBulkListRetrievingResponse]
    def retrieve_payment_bulk_list(opts = {})
      data, _status_code, _headers = retrieve_payment_bulk_list_with_http_info(opts)
      data
    end

    # 一括決済 一覧取得
    # fincodeに登録した一括決済の情報を一覧で取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップを販売主とした一括決済情報を一覧で取得します。 
    # @option opts [RetrievePaymentBulkListQueryParameter] :query 一括決済情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(PaymentBulkListRetrievingResponse, Integer, Hash)>] PaymentBulkListRetrievingResponse data, response status code and response headers
    def retrieve_payment_bulk_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_payment_bulk_list ...'
      end
      # resource path
      local_var_path = '/v1/payments/bulk'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentBulkListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_payment_bulk_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_payment_bulk_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 決済 一覧取得
    # 決済情報の一覧を取得します。 
    # @param query [RetrievePaymentListQueryParameter] 決済の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく決済から一覧で取得します。 
    # @return [RetrievePaymentList200Response]
    def retrieve_payment_list(query, opts = {})
      data, _status_code, _headers = retrieve_payment_list_with_http_info(query, opts)
      data
    end

    # 決済 一覧取得
    # 決済情報の一覧を取得します。 
    # @param query [RetrievePaymentListQueryParameter] 決済の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく決済から一覧で取得します。 
    # @return [Array<(RetrievePaymentList200Response, Integer, Hash)>] RetrievePaymentList200Response data, response status code and response headers
    def retrieve_payment_list_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_payment_list ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.retrieve_payment_list"
      end
      # resource path
      local_var_path = '/v1/payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RetrievePaymentList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_payment_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_payment_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラン 取得
    # IDで指定したプラン情報を取得します。 
    # @param id [String] プランID
    # @param [Hash] opts the optional parameters
    # @return [PlanRetrievingResponse]
    def retrieve_plan(id, opts = {})
      data, _status_code, _headers = retrieve_plan_with_http_info(id, opts)
      data
    end

    # プラン 取得
    # IDで指定したプラン情報を取得します。 
    # @param id [String] プランID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlanRetrievingResponse, Integer, Hash)>] PlanRetrievingResponse data, response status code and response headers
    def retrieve_plan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_plan"
      end
      # resource path
      local_var_path = '/v1/plans/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlanRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラン 一覧取得
    # プラン情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlanListQueryParameter] :query プラン情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [PlanListRetrievingResponse]
    def retrieve_plan_list(opts = {})
      data, _status_code, _headers = retrieve_plan_list_with_http_info(opts)
      data
    end

    # プラン 一覧取得
    # プラン情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlanListQueryParameter] :query プラン情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(PlanListRetrievingResponse, Integer, Hash)>] PlanListRetrievingResponse data, response status code and response headers
    def retrieve_plan_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_plan_list ...'
      end
      # resource path
      local_var_path = '/v1/plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlanListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_plan_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_plan_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラットフォーム利用料収入 取得
    # IDで指定したプラットフォーム利用料による売上入金情報を取得します。\\ `aggregate_term_start`から`aggregate_term_end`までの期間におけるプラットフォーム利用料による売上の集計結果が含まれます。\\ \\ テナントショップごとの利用料収入については プラットフォーム利用料収入サマリー 一覧取得API を利用することで取得できます。 
    # @param id [String] プラットフォーム利用料収入ID
    # @param [Hash] opts the optional parameters
    # @return [PlatformAccountRetrievingResponse]
    def retrieve_platform_account(id, opts = {})
      data, _status_code, _headers = retrieve_platform_account_with_http_info(id, opts)
      data
    end

    # プラットフォーム利用料収入 取得
    # IDで指定したプラットフォーム利用料による売上入金情報を取得します。\\ &#x60;aggregate_term_start&#x60;から&#x60;aggregate_term_end&#x60;までの期間におけるプラットフォーム利用料による売上の集計結果が含まれます。\\ \\ テナントショップごとの利用料収入については プラットフォーム利用料収入サマリー 一覧取得API を利用することで取得できます。 
    # @param id [String] プラットフォーム利用料収入ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlatformAccountRetrievingResponse, Integer, Hash)>] PlatformAccountRetrievingResponse data, response status code and response headers
    def retrieve_platform_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_platform_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_platform_account"
      end
      # resource path
      local_var_path = '/v1/platform_accounts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlatformAccountRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_platform_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_platform_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラットフォーム利用料収入 一覧取得
    # プラットフォーム利用料による売上入金情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlatformAccountListQueryParameter] :query プラットフォーム利用料による売上入金情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [PlatformAccountListRetrievingResponse]
    def retrieve_platform_account_list(opts = {})
      data, _status_code, _headers = retrieve_platform_account_list_with_http_info(opts)
      data
    end

    # プラットフォーム利用料収入 一覧取得
    # プラットフォーム利用料による売上入金情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlatformAccountListQueryParameter] :query プラットフォーム利用料による売上入金情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(PlatformAccountListRetrievingResponse, Integer, Hash)>] PlatformAccountListRetrievingResponse data, response status code and response headers
    def retrieve_platform_account_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_platform_account_list ...'
      end
      # resource path
      local_var_path = '/v1/platform_accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlatformAccountListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_platform_account_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_platform_account_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラットフォーム利用料収入サマリー 一覧取得
    # IDで指定したプラットフォーム利用料収入のサマリーを一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。\\ サマリー情報の中にはテナントショップごとの利用料収入についての情報が含まれます。 
    # @param id [String] プラットフォーム利用料収入ID
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlatformAccountSummaryListQueryParameter] :query プラットフォーム利用料による売上入金情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [PlatformAccountSummaryListRetrievingResponse]
    def retrieve_platform_account_summary_list(id, opts = {})
      data, _status_code, _headers = retrieve_platform_account_summary_list_with_http_info(id, opts)
      data
    end

    # プラットフォーム利用料収入サマリー 一覧取得
    # IDで指定したプラットフォーム利用料収入のサマリーを一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。\\ サマリー情報の中にはテナントショップごとの利用料収入についての情報が含まれます。 
    # @param id [String] プラットフォーム利用料収入ID
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlatformAccountSummaryListQueryParameter] :query プラットフォーム利用料による売上入金情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(PlatformAccountSummaryListRetrievingResponse, Integer, Hash)>] PlatformAccountSummaryListRetrievingResponse data, response status code and response headers
    def retrieve_platform_account_summary_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_platform_account_summary_list ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_platform_account_summary_list"
      end
      # resource path
      local_var_path = '/v1/platform_accounts/{id}/summary'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlatformAccountSummaryListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_platform_account_summary_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_platform_account_summary_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラットフォームショップ 取得
    # `id`で指定したプラットフォームショップ（メインショップ・サブショップ）を取得します。 
    # @param id [String] ショップID
    # @param [Hash] opts the optional parameters
    # @return [PlatformShopRetrievingResponse]
    def retrieve_platform_shop(id, opts = {})
      data, _status_code, _headers = retrieve_platform_shop_with_http_info(id, opts)
      data
    end

    # プラットフォームショップ 取得
    # &#x60;id&#x60;で指定したプラットフォームショップ（メインショップ・サブショップ）を取得します。 
    # @param id [String] ショップID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlatformShopRetrievingResponse, Integer, Hash)>] PlatformShopRetrievingResponse data, response status code and response headers
    def retrieve_platform_shop_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_platform_shop ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_platform_shop"
      end
      # resource path
      local_var_path = '/v1/platforms/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlatformShopRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_platform_shop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_platform_shop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラットフォームショップ 一覧取得
    # プラットフォームショップ（メインショップ・サブショップ）を一覧で取得します。\\ クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlatformShopListQueryParameter] :query プラットフォーム情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [PlatformShopListRetrievingResponse]
    def retrieve_platform_shop_list(opts = {})
      data, _status_code, _headers = retrieve_platform_shop_list_with_http_info(opts)
      data
    end

    # プラットフォームショップ 一覧取得
    # プラットフォームショップ（メインショップ・サブショップ）を一覧で取得します。\\ クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrievePlatformShopListQueryParameter] :query プラットフォーム情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(PlatformShopListRetrievingResponse, Integer, Hash)>] PlatformShopListRetrievingResponse data, response status code and response headers
    def retrieve_platform_shop_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_platform_shop_list ...'
      end
      # resource path
      local_var_path = '/v1/platforms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlatformShopListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_platform_shop_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_platform_shop_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション 取得
    # IDで指定したサブスクリプション情報を取得します。 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionRetrievingResponse]
    def retrieve_subscription(id, opts = {})
      data, _status_code, _headers = retrieve_subscription_with_http_info(id, opts)
      data
    end

    # サブスクリプション 取得
    # IDで指定したサブスクリプション情報を取得します。 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionRetrievingResponse, Integer, Hash)>] SubscriptionRetrievingResponse data, response status code and response headers
    def retrieve_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_subscription ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_subscription"
      end
      # resource path
      local_var_path = '/v1/subscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション 一覧取得
    # サブスクリプション情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param query [RetrieveSubscriptionListQueryParameter] サブスクリプション情報の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionListRetrievingResponse]
    def retrieve_subscription_list(query, opts = {})
      data, _status_code, _headers = retrieve_subscription_list_with_http_info(query, opts)
      data
    end

    # サブスクリプション 一覧取得
    # サブスクリプション情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param query [RetrieveSubscriptionListQueryParameter] サブスクリプション情報の一覧取得において検索条件となるクエリパラメータ 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionListRetrievingResponse, Integer, Hash)>] SubscriptionListRetrievingResponse data, response status code and response headers
    def retrieve_subscription_list_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_subscription_list ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.retrieve_subscription_list"
      end
      # resource path
      local_var_path = '/v1/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_subscription_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_subscription_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション結果 一覧取得
    # サブスクリプションにより発生した課金の結果を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param query [RetrieveSubscriptionResultListQueryParameter] サブスクリプション結果の一覧取得において検索条件となるクエリパラメータ 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionResultListRetrievingResponse]
    def retrieve_subscription_result_list(query, id, opts = {})
      data, _status_code, _headers = retrieve_subscription_result_list_with_http_info(query, id, opts)
      data
    end

    # サブスクリプション結果 一覧取得
    # サブスクリプションにより発生した課金の結果を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param query [RetrieveSubscriptionResultListQueryParameter] サブスクリプション結果の一覧取得において検索条件となるクエリパラメータ 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionResultListRetrievingResponse, Integer, Hash)>] SubscriptionResultListRetrievingResponse data, response status code and response headers
    def retrieve_subscription_result_list_with_http_info(query, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_subscription_result_list ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.retrieve_subscription_result_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_subscription_result_list"
      end
      # resource path
      local_var_path = '/v1/subscriptions/{id}/result'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionResultListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_subscription_result_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_subscription_result_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ契約情報 取得
    # `id`で指定したテナントショップの契約情報を取得します。 
    # @param id [String] 指定したテナントショップの契約情報を取得します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの契約情報を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [ContractsRetrievingResponse]
    def retrieve_tenant_contract(id, tenant_shop_id, opts = {})
      data, _status_code, _headers = retrieve_tenant_contract_with_http_info(id, tenant_shop_id, opts)
      data
    end

    # テナントショップ契約情報 取得
    # &#x60;id&#x60;で指定したテナントショップの契約情報を取得します。 
    # @param id [String] 指定したテナントショップの契約情報を取得します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの契約情報を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContractsRetrievingResponse, Integer, Hash)>] ContractsRetrievingResponse data, response status code and response headers
    def retrieve_tenant_contract_with_http_info(id, tenant_shop_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_tenant_contract ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_tenant_contract"
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.retrieve_tenant_contract"
      end
      # resource path
      local_var_path = '/v1/contracts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractsRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_tenant_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_tenant_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # （旧）テナントショップ本番環境申請情報 取得
    # ※ このAPIの使用は現在非推奨です。新しいテナントショップ本番環境申請情報 取得APIをご利用ください。\\ `id`で指定したテナントショップの本番環境申請情報を取得します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を取得します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [ExaminationInfoRetrievingResponse]
    def retrieve_tenant_examination_info(id, tenant_shop_id, opts = {})
      data, _status_code, _headers = retrieve_tenant_examination_info_with_http_info(id, tenant_shop_id, opts)
      data
    end

    # （旧）テナントショップ本番環境申請情報 取得
    # ※ このAPIの使用は現在非推奨です。新しいテナントショップ本番環境申請情報 取得APIをご利用ください。\\ &#x60;id&#x60;で指定したテナントショップの本番環境申請情報を取得します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を取得します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExaminationInfoRetrievingResponse, Integer, Hash)>] ExaminationInfoRetrievingResponse data, response status code and response headers
    def retrieve_tenant_examination_info_with_http_info(id, tenant_shop_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_tenant_examination_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_tenant_examination_info"
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.retrieve_tenant_examination_info"
      end
      # resource path
      local_var_path = '/v1/contracts/examinations/tenants/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExaminationInfoRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_tenant_examination_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_tenant_examination_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ本番環境申請情報 取得
    # `id`で指定したテナントショップの本番環境申請情報を取得します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を取得します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [ExaminationInfoV2RetrievingResponse]
    def retrieve_tenant_examination_info_v2(id, tenant_shop_id, opts = {})
      data, _status_code, _headers = retrieve_tenant_examination_info_v2_with_http_info(id, tenant_shop_id, opts)
      data
    end

    # テナントショップ本番環境申請情報 取得
    # &#x60;id&#x60;で指定したテナントショップの本番環境申請情報を取得します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を取得します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExaminationInfoV2RetrievingResponse, Integer, Hash)>] ExaminationInfoV2RetrievingResponse data, response status code and response headers
    def retrieve_tenant_examination_info_v2_with_http_info(id, tenant_shop_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_tenant_examination_info_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_tenant_examination_info_v2"
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.retrieve_tenant_examination_info_v2"
      end
      # resource path
      local_var_path = '/v1/contracts/examinations_v2/tenants/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExaminationInfoV2RetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_tenant_examination_info_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_tenant_examination_info_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 取得
    # `id`で指定したテナント情報を取得します。 
    # @param id [String] ショップID 
    # @param [Hash] opts the optional parameters
    # @return [TenantShopRetrievingResponse]
    def retrieve_tenant_shop(id, opts = {})
      data, _status_code, _headers = retrieve_tenant_shop_with_http_info(id, opts)
      data
    end

    # テナントショップ 取得
    # &#x60;id&#x60;で指定したテナント情報を取得します。 
    # @param id [String] ショップID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantShopRetrievingResponse, Integer, Hash)>] TenantShopRetrievingResponse data, response status code and response headers
    def retrieve_tenant_shop_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_tenant_shop ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.retrieve_tenant_shop"
      end
      # resource path
      local_var_path = '/v1/tenants/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TenantShopRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_tenant_shop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_tenant_shop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 一覧取得
    # テナントショップを一覧で取得します。\\ クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrieveTenantShopListQueryParameter] :query テナント情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [TenantShopListRetrievingResponse]
    def retrieve_tenant_shop_list(opts = {})
      data, _status_code, _headers = retrieve_tenant_shop_list_with_http_info(opts)
      data
    end

    # テナントショップ 一覧取得
    # テナントショップを一覧で取得します。\\ クエリパラメータを指定して取得する条件を絞り込めます。 
    # @param [Hash] opts the optional parameters
    # @option opts [RetrieveTenantShopListQueryParameter] :query テナント情報の一覧取得において検索条件となるクエリパラメータ 
    # @return [Array<(TenantShopListRetrievingResponse, Integer, Hash)>] TenantShopListRetrievingResponse data, response status code and response headers
    def retrieve_tenant_shop_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.retrieve_tenant_shop_list ...'
      end
      # resource path
      local_var_path = '/v1/tenants'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TenantShopListRetrievingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.retrieve_tenant_shop_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#retrieve_tenant_shop_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション 解約
    # IDで指定したサブスクリプションを解約し、請求を停止します。 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionUnsubscribingResponse]
    def unsubscripbe_subscription(id, opts = {})
      data, _status_code, _headers = unsubscripbe_subscription_with_http_info(id, opts)
      data
    end

    # サブスクリプション 解約
    # IDで指定したサブスクリプションを解約し、請求を停止します。 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionUnsubscribingResponse, Integer, Hash)>] SubscriptionUnsubscribingResponse data, response status code and response headers
    def unsubscripbe_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unsubscripbe_subscription ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.unsubscripbe_subscription"
      end
      # resource path
      local_var_path = '/v1/subscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionUnsubscribingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.unsubscripbe_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unsubscripbe_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 顧客 更新
    # IDで指定した顧客情報を更新します。 
    # @param id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客情報を更新します。 
    # @option opts [CustomerUpdatingRequest] :customer_updating_request 
    # @return [CustomerUpdatingResponse]
    def update_customer(id, opts = {})
      data, _status_code, _headers = update_customer_with_http_info(id, opts)
      data
    end

    # 顧客 更新
    # IDで指定した顧客情報を更新します。 
    # @param id [String] 顧客ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客情報を更新します。 
    # @option opts [CustomerUpdatingRequest] :customer_updating_request 
    # @return [Array<(CustomerUpdatingResponse, Integer, Hash)>] CustomerUpdatingResponse data, response status code and response headers
    def update_customer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_customer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_customer"
      end
      # resource path
      local_var_path = '/v1/customers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'customer_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード 更新
    # `customer_id`で指定した顧客に対し紐づくカードのうち`id`で指定したものを更新します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param id [String] 更新するカードのID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードの情報を更新します。 
    # @option opts [CustomerCardUpdatingRequest] :customer_card_updating_request 
    # @return [CustomerCardUpdatingResponse]
    def update_customer_card(customer_id, id, opts = {})
      data, _status_code, _headers = update_customer_card_with_http_info(customer_id, id, opts)
      data
    end

    # カード 更新
    # &#x60;customer_id&#x60;で指定した顧客に対し紐づくカードのうち&#x60;id&#x60;で指定したものを更新します。 
    # @param customer_id [String] このカードが紐づく顧客のID
    # @param id [String] 更新するカードのID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_shop_id &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードの情報を更新します。 
    # @option opts [CustomerCardUpdatingRequest] :customer_card_updating_request 
    # @return [Array<(CustomerCardUpdatingResponse, Integer, Hash)>] CustomerCardUpdatingResponse data, response status code and response headers
    def update_customer_card_with_http_info(customer_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_customer_card ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.update_customer_card"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_customer_card"
      end
      # resource path
      local_var_path = '/v1/customers/{customer_id}/cards/{id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = opts[:'tenant_shop_id'] if !opts[:'tenant_shop_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'customer_card_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCardUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_customer_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_customer_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラン 更新
    # IDで指定したプラン情報を更新します。\\ プランが1つ以上のサブスクリプションで使用されているとき（`used_flag = 1`のとき）、プランは更新できません。 
    # @param id [String] プランID
    # @param [Hash] opts the optional parameters
    # @option opts [PlanUpdatingRequest] :plan_updating_request 
    # @return [PlanUpdatingResponse]
    def update_plan(id, opts = {})
      data, _status_code, _headers = update_plan_with_http_info(id, opts)
      data
    end

    # プラン 更新
    # IDで指定したプラン情報を更新します。\\ プランが1つ以上のサブスクリプションで使用されているとき（&#x60;used_flag &#x3D; 1&#x60;のとき）、プランは更新できません。 
    # @param id [String] プランID
    # @param [Hash] opts the optional parameters
    # @option opts [PlanUpdatingRequest] :plan_updating_request 
    # @return [Array<(PlanUpdatingResponse, Integer, Hash)>] PlanUpdatingResponse data, response status code and response headers
    def update_plan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_plan"
      end
      # resource path
      local_var_path = '/v1/plans/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'plan_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PlanUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # プラットフォームショップ 更新
    # `examination_master_id`で指定した決済手段に関してプラットフォーム利用料を更新します。 
    # @param id [String] ショップID
    # @param [Hash] opts the optional parameters
    # @option opts [PlatformShopUpdatingRequest] :platform_shop_updating_request 
    # @return [PlatformShopUpdatingResponse]
    def update_platform_shop(id, opts = {})
      data, _status_code, _headers = update_platform_shop_with_http_info(id, opts)
      data
    end

    # プラットフォームショップ 更新
    # &#x60;examination_master_id&#x60;で指定した決済手段に関してプラットフォーム利用料を更新します。 
    # @param id [String] ショップID
    # @param [Hash] opts the optional parameters
    # @option opts [PlatformShopUpdatingRequest] :platform_shop_updating_request 
    # @return [Array<(PlatformShopUpdatingResponse, Integer, Hash)>] PlatformShopUpdatingResponse data, response status code and response headers
    def update_platform_shop_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_platform_shop ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_platform_shop"
      end
      # resource path
      local_var_path = '/v1/platforms/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'platform_shop_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PlatformShopUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_platform_shop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_platform_shop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # サブスクリプション 更新
    # IDで指定したサブスクリプション情報を更新します。\\ 指定されたパラメータのみ更新します。\\ サブスクリプションの初回課金がすでに行われているとき（`start_date ≤ {{現在時刻}}`のとき）、サブスクリプションは更新できません。 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUpdatingRequest] :subscription_updating_request 
    # @return [SubscriptionUpdatingResponse]
    def update_subscription(id, opts = {})
      data, _status_code, _headers = update_subscription_with_http_info(id, opts)
      data
    end

    # サブスクリプション 更新
    # IDで指定したサブスクリプション情報を更新します。\\ 指定されたパラメータのみ更新します。\\ サブスクリプションの初回課金がすでに行われているとき（&#x60;start_date ≤ {{現在時刻}}&#x60;のとき）、サブスクリプションは更新できません。 
    # @param id [String] サブスクリプションID
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUpdatingRequest] :subscription_updating_request 
    # @return [Array<(SubscriptionUpdatingResponse, Integer, Hash)>] SubscriptionUpdatingResponse data, response status code and response headers
    def update_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_subscription ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_subscription"
      end
      # resource path
      local_var_path = '/v1/subscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'subscription_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # （旧）テナントショップ本番環境申請情報 更新
    # ※ このAPIの使用は現在非推奨です。新しいテナントショップ本番環境申請情報 更新APIをご利用ください。\\ `id`で指定したテナントショップの本番環境申請情報を更新します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を更新します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を更新します。 
    # @param [Hash] opts the optional parameters
    # @option opts [ExaminationInfoUpdatingRequest] :examination_info_updating_request 
    # @return [ExaminationInfoUpdatingResponse]
    def update_tenant_examination_info(id, tenant_shop_id, opts = {})
      data, _status_code, _headers = update_tenant_examination_info_with_http_info(id, tenant_shop_id, opts)
      data
    end

    # （旧）テナントショップ本番環境申請情報 更新
    # ※ このAPIの使用は現在非推奨です。新しいテナントショップ本番環境申請情報 更新APIをご利用ください。\\ &#x60;id&#x60;で指定したテナントショップの本番環境申請情報を更新します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を更新します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を更新します。 
    # @param [Hash] opts the optional parameters
    # @option opts [ExaminationInfoUpdatingRequest] :examination_info_updating_request 
    # @return [Array<(ExaminationInfoUpdatingResponse, Integer, Hash)>] ExaminationInfoUpdatingResponse data, response status code and response headers
    def update_tenant_examination_info_with_http_info(id, tenant_shop_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_tenant_examination_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_tenant_examination_info"
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.update_tenant_examination_info"
      end
      # resource path
      local_var_path = '/v1/contracts/examinations/tenants/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'examination_info_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExaminationInfoUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_tenant_examination_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_tenant_examination_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ本番環境申請情報 更新
    # `id`で指定したテナントショップの本番環境申請情報を更新します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を更新します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を更新します。 
    # @param [Hash] opts the optional parameters
    # @option opts [ExaminationInfoV2UpdatingRequest] :examination_info_v2_updating_request 
    # @return [ExaminationInfoV2UpdatingResponse]
    def update_tenant_examination_info_v2(id, tenant_shop_id, opts = {})
      data, _status_code, _headers = update_tenant_examination_info_v2_with_http_info(id, tenant_shop_id, opts)
      data
    end

    # テナントショップ本番環境申請情報 更新
    # &#x60;id&#x60;で指定したテナントショップの本番環境申請情報を更新します。 
    # @param id [String] 指定したテナントショップの本番環境申請情報を更新します。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップの本番環境申請情報を更新します。 
    # @param [Hash] opts the optional parameters
    # @option opts [ExaminationInfoV2UpdatingRequest] :examination_info_v2_updating_request 
    # @return [Array<(ExaminationInfoV2UpdatingResponse, Integer, Hash)>] ExaminationInfoV2UpdatingResponse data, response status code and response headers
    def update_tenant_examination_info_v2_with_http_info(id, tenant_shop_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_tenant_examination_info_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_tenant_examination_info_v2"
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.update_tenant_examination_info_v2"
      end
      # resource path
      local_var_path = '/v1/contracts/examinations_v2/tenants/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'examination_info_v2_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExaminationInfoV2UpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_tenant_examination_info_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_tenant_examination_info_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 更新
    # `examination_master_id`で指定した決済手段におけるプラットフォーム利用料などの設定の変更を`id`で指定したテナントに対して実行します。 
    # @param id [String] ショップID 
    # @param [Hash] opts the optional parameters
    # @option opts [TenantShopUpdatingRequest] :tenant_shop_updating_request 
    # @return [TenantShopUpdatingResponse]
    def update_tenant_shop(id, opts = {})
      data, _status_code, _headers = update_tenant_shop_with_http_info(id, opts)
      data
    end

    # テナントショップ 更新
    # &#x60;examination_master_id&#x60;で指定した決済手段におけるプラットフォーム利用料などの設定の変更を&#x60;id&#x60;で指定したテナントに対して実行します。 
    # @param id [String] ショップID 
    # @param [Hash] opts the optional parameters
    # @option opts [TenantShopUpdatingRequest] :tenant_shop_updating_request 
    # @return [Array<(TenantShopUpdatingResponse, Integer, Hash)>] TenantShopUpdatingResponse data, response status code and response headers
    def update_tenant_shop_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_tenant_shop ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_tenant_shop"
      end
      # resource path
      local_var_path = '/v1/tenants/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'tenant_shop_updating_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TenantShopUpdatingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_tenant_shop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_tenant_shop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # テナントショップ 審査ファイルアップロード
    # `id`で指定したテナントショップの審査に必要なファイルのアップロードを行います。 
    # @param id [String] 指定したテナントショップのものとしてファイルをアップロードします。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップのものとしてファイルをアップロードします。 
    # @param [Hash] opts the optional parameters
    # @option opts [ExaminationFileType] :type 
    # @option opts [Object] :data 審査ファイルデータ\\\\ \\\\ 画像ファイルをマルチパートアップロードするときはこの&#x60;data&#x60;フィールドに画像データを設定します。 
    # @return [ExaminationFileUploadingResponse]
    def upload_examination_file(id, tenant_shop_id, opts = {})
      data, _status_code, _headers = upload_examination_file_with_http_info(id, tenant_shop_id, opts)
      data
    end

    # テナントショップ 審査ファイルアップロード
    # &#x60;id&#x60;で指定したテナントショップの審査に必要なファイルのアップロードを行います。 
    # @param id [String] 指定したテナントショップのものとしてファイルをアップロードします。&#x60;Tenant-Shop-Id&#x60;ヘッダーも併せて指定してください。 
    # @param tenant_shop_id [String] &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ 指定したテナントショップのものとしてファイルをアップロードします。 
    # @param [Hash] opts the optional parameters
    # @option opts [ExaminationFileType] :type 
    # @option opts [Object] :data 審査ファイルデータ\\\\ \\\\ 画像ファイルをマルチパートアップロードするときはこの&#x60;data&#x60;フィールドに画像データを設定します。 
    # @return [Array<(ExaminationFileUploadingResponse, Integer, Hash)>] ExaminationFileUploadingResponse data, response status code and response headers
    def upload_examination_file_with_http_info(id, tenant_shop_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_examination_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.upload_examination_file"
      end
      # verify the required parameter 'tenant_shop_id' is set
      if @api_client.config.client_side_validation && tenant_shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_shop_id' when calling DefaultApi.upload_examination_file"
      end
      # resource path
      local_var_path = '/v1/contracts/examinations/tenants/{id}/files'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Tenant-Shop-Id'] = tenant_shop_id

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = opts[:'type'] if !opts[:'type'].nil?
      form_params['data'] = opts[:'data'] if !opts[:'data'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExaminationFileUploadingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Secret-Bearer-Auth', 'Secret-Basic-Auth']

      new_options = opts.merge(
        :operation => :"DefaultApi.upload_examination_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_examination_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
