=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class AccountDetail
    # 売上入金詳細 ID 
    attr_accessor :detail_id

    # ショップID 
    attr_accessor :shop_id

    # 入金予定日   形式： `yyyy/MM/dd HH:MM` 
    attr_accessor :scheduled_deposit_date

    attr_accessor :trade_type

    attr_accessor :payment_method

    # 課金訂正内容 
    attr_accessor :amount_correction_type

    # 精算ID 
    attr_accessor :account_id

    # オーダー（決済）ID 
    attr_accessor :order_id

    # 取引ID 
    attr_accessor :access_id

    # この取引による入金額（参考値）\\ ※実際の入金額は全ての売上入金詳細の入金額の合算した後に計算される消費税金額によるため、この値は参考値となります。 
    attr_accessor :deposit_amount

    # 利用金額 
    attr_accessor :amount

    # 税送料 
    attr_accessor :tax

    # fincode 決済手数料（税抜） 
    attr_accessor :fee_total

    # fincode 決済手数料（税込） 
    attr_accessor :fee_total_taxin

    # fincode 決済手数料にかかる消費税 
    attr_accessor :fee_profit_tax

    # fincode 決済手数料のうち、課税対象金額 
    attr_accessor :fee_profit

    # fincode 決済手数料のうち、非課税対象金額 
    attr_accessor :fee_cost

    # fincode 決済手数料率 
    attr_accessor :fee_rate_total

    # fincode 決済手数料 最低手数料 
    attr_accessor :fixed_fee

    # fincode手数料率 適用区分  - `0`: 料率。<br /><span class=\"smallText\">この決済による売上に対し、fincode 決済手数料率が適用されたことを示します。</span> - `1`: 最低手数料。<br /><span class=\"smallText\">この決済による売上に対し、fincode 決済最低手数料が適用されたことを示します。</span> 
    attr_accessor :apply_type

    # fincode 振替口座 Web登録手数料（税抜）\\ ※ 口座振替のみ 
    attr_accessor :web_registration_fee

    # fincode 振替口座 Web登録手数料（税込）\\ ※ 口座振替のみ 
    attr_accessor :web_registration_fee_taxin

    # fincode手数料 Web登録手数料消費税\\ ※ 口座振替のみ 
    attr_accessor :web_registration_fee_tax

    # プラットフォーム利用料（税抜）\\ ※ テナントのみ 
    attr_accessor :platform_fee

    # プラットフォーム利用料（税込）\\ ※ テナントのみ 
    attr_accessor :platform_fee_taxin

    # プラットフォーム利用料率\\ ※ テナントのみ 
    attr_accessor :platform_fee_rate

    # プラットフォーム利用料率 最低手数料\\ ※ テナントのみ 
    attr_accessor :fixed_fee_for_platform_fee

    # プラットフォーム利用料率 適用区分  - `0`: 料率。<br /><span class=\"smallText\">この決済による売上に対し、プラットフォーム利用料率が適用されたことを示します。</span> - `1`: 最低手数料。<br /><span class=\"smallText\">この決済による売上に対し、プラットフォームが設定した最低利用料が適用されたことを示します。</span>  ※ テナントのみ 
    attr_accessor :apply_type_for_platform_fee

    # プラットフォームWeb登録利用料（税抜）\\ ※ 口座振替のみ\\ ※ テナントのみ 
    attr_accessor :platform_web_registration_fee

    # プラットフォームWeb登録利用料（税込）\\ ※ 口座振替のみ\\ ※ テナントのみ 
    attr_accessor :platform_web_registration_fee_taxin

    # プラットフォームWeb登録利用料消費税\\ ※ 口座振替のみ\\ ※ テナントのみ 
    attr_accessor :platform_web_registration_fee_tax

    # 取引の確定処理を行った日時 \\ 形式： `yyyy/MM/dd HH:MM` 
    attr_accessor :processed_date

    # 集計期間の開始日\\ 形式： `yyyy/MM/dd HH:MM` 
    attr_accessor :aggregate_term_start

    # 集計期間の終了日\\ 形式： `yyyy/MM/dd HH:MM` 
    attr_accessor :aggregate_term_end

    # 加盟店自由項目 1 
    attr_accessor :client_field_1

    # 加盟店自由項目 2 
    attr_accessor :client_field_2

    # 加盟店自由項目 3 
    attr_accessor :client_field_3

    # 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS` 
    attr_accessor :created

    # 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS` 
    attr_accessor :updated

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'detail_id' => :'detail_id',
        :'shop_id' => :'shop_id',
        :'scheduled_deposit_date' => :'scheduled_deposit_date',
        :'trade_type' => :'trade_type',
        :'payment_method' => :'payment_method',
        :'amount_correction_type' => :'amount_correction_type',
        :'account_id' => :'account_id',
        :'order_id' => :'order_id',
        :'access_id' => :'access_id',
        :'deposit_amount' => :'deposit_amount',
        :'amount' => :'amount',
        :'tax' => :'tax',
        :'fee_total' => :'fee_total',
        :'fee_total_taxin' => :'fee_total_taxin',
        :'fee_profit_tax' => :'fee_profit_tax',
        :'fee_profit' => :'fee_profit',
        :'fee_cost' => :'fee_cost',
        :'fee_rate_total' => :'fee_rate_total',
        :'fixed_fee' => :'fixed_fee',
        :'apply_type' => :'apply_type',
        :'web_registration_fee' => :'web_registration_fee',
        :'web_registration_fee_taxin' => :'web_registration_fee_taxin',
        :'web_registration_fee_tax' => :'web_registration_fee_tax',
        :'platform_fee' => :'platform_fee',
        :'platform_fee_taxin' => :'platform_fee_taxin',
        :'platform_fee_rate' => :'platform_fee_rate',
        :'fixed_fee_for_platform_fee' => :'fixed_fee_for_platform_fee',
        :'apply_type_for_platform_fee' => :'apply_type_for_platform_fee',
        :'platform_web_registration_fee' => :'platform_web_registration_fee',
        :'platform_web_registration_fee_taxin' => :'platform_web_registration_fee_taxin',
        :'platform_web_registration_fee_tax' => :'platform_web_registration_fee_tax',
        :'processed_date' => :'processed_date',
        :'aggregate_term_start' => :'aggregate_term_start',
        :'aggregate_term_end' => :'aggregate_term_end',
        :'client_field_1' => :'client_field_1',
        :'client_field_2' => :'client_field_2',
        :'client_field_3' => :'client_field_3',
        :'created' => :'created',
        :'updated' => :'updated'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'detail_id' => :'Integer',
        :'shop_id' => :'String',
        :'scheduled_deposit_date' => :'String',
        :'trade_type' => :'AccountDetailTradeType',
        :'payment_method' => :'AccountPaymentMethod',
        :'amount_correction_type' => :'String',
        :'account_id' => :'Integer',
        :'order_id' => :'String',
        :'access_id' => :'String',
        :'deposit_amount' => :'Integer',
        :'amount' => :'Integer',
        :'tax' => :'Integer',
        :'fee_total' => :'Integer',
        :'fee_total_taxin' => :'Integer',
        :'fee_profit_tax' => :'Integer',
        :'fee_profit' => :'Integer',
        :'fee_cost' => :'Integer',
        :'fee_rate_total' => :'Float',
        :'fixed_fee' => :'Integer',
        :'apply_type' => :'Integer',
        :'web_registration_fee' => :'Integer',
        :'web_registration_fee_taxin' => :'Integer',
        :'web_registration_fee_tax' => :'Integer',
        :'platform_fee' => :'Integer',
        :'platform_fee_taxin' => :'Integer',
        :'platform_fee_rate' => :'Float',
        :'fixed_fee_for_platform_fee' => :'Integer',
        :'apply_type_for_platform_fee' => :'Integer',
        :'platform_web_registration_fee' => :'Integer',
        :'platform_web_registration_fee_taxin' => :'Integer',
        :'platform_web_registration_fee_tax' => :'Integer',
        :'processed_date' => :'String',
        :'aggregate_term_start' => :'String',
        :'aggregate_term_end' => :'String',
        :'client_field_1' => :'String',
        :'client_field_2' => :'String',
        :'client_field_3' => :'String',
        :'created' => :'String',
        :'updated' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'fixed_fee',
        :'platform_fee',
        :'platform_fee_rate',
        :'fixed_fee_for_platform_fee',
        :'apply_type_for_platform_fee',
        :'updated'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::AccountDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::AccountDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'detail_id')
        self.detail_id = attributes[:'detail_id']
      end

      if attributes.key?(:'shop_id')
        self.shop_id = attributes[:'shop_id']
      end

      if attributes.key?(:'scheduled_deposit_date')
        self.scheduled_deposit_date = attributes[:'scheduled_deposit_date']
      end

      if attributes.key?(:'trade_type')
        self.trade_type = attributes[:'trade_type']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'amount_correction_type')
        self.amount_correction_type = attributes[:'amount_correction_type']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'access_id')
        self.access_id = attributes[:'access_id']
      end

      if attributes.key?(:'deposit_amount')
        self.deposit_amount = attributes[:'deposit_amount']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'fee_total')
        self.fee_total = attributes[:'fee_total']
      end

      if attributes.key?(:'fee_total_taxin')
        self.fee_total_taxin = attributes[:'fee_total_taxin']
      end

      if attributes.key?(:'fee_profit_tax')
        self.fee_profit_tax = attributes[:'fee_profit_tax']
      end

      if attributes.key?(:'fee_profit')
        self.fee_profit = attributes[:'fee_profit']
      end

      if attributes.key?(:'fee_cost')
        self.fee_cost = attributes[:'fee_cost']
      end

      if attributes.key?(:'fee_rate_total')
        self.fee_rate_total = attributes[:'fee_rate_total']
      end

      if attributes.key?(:'fixed_fee')
        self.fixed_fee = attributes[:'fixed_fee']
      end

      if attributes.key?(:'apply_type')
        self.apply_type = attributes[:'apply_type']
      end

      if attributes.key?(:'web_registration_fee')
        self.web_registration_fee = attributes[:'web_registration_fee']
      end

      if attributes.key?(:'web_registration_fee_taxin')
        self.web_registration_fee_taxin = attributes[:'web_registration_fee_taxin']
      end

      if attributes.key?(:'web_registration_fee_tax')
        self.web_registration_fee_tax = attributes[:'web_registration_fee_tax']
      end

      if attributes.key?(:'platform_fee')
        self.platform_fee = attributes[:'platform_fee']
      end

      if attributes.key?(:'platform_fee_taxin')
        self.platform_fee_taxin = attributes[:'platform_fee_taxin']
      end

      if attributes.key?(:'platform_fee_rate')
        self.platform_fee_rate = attributes[:'platform_fee_rate']
      end

      if attributes.key?(:'fixed_fee_for_platform_fee')
        self.fixed_fee_for_platform_fee = attributes[:'fixed_fee_for_platform_fee']
      end

      if attributes.key?(:'apply_type_for_platform_fee')
        self.apply_type_for_platform_fee = attributes[:'apply_type_for_platform_fee']
      end

      if attributes.key?(:'platform_web_registration_fee')
        self.platform_web_registration_fee = attributes[:'platform_web_registration_fee']
      end

      if attributes.key?(:'platform_web_registration_fee_taxin')
        self.platform_web_registration_fee_taxin = attributes[:'platform_web_registration_fee_taxin']
      end

      if attributes.key?(:'platform_web_registration_fee_tax')
        self.platform_web_registration_fee_tax = attributes[:'platform_web_registration_fee_tax']
      end

      if attributes.key?(:'processed_date')
        self.processed_date = attributes[:'processed_date']
      end

      if attributes.key?(:'aggregate_term_start')
        self.aggregate_term_start = attributes[:'aggregate_term_start']
      end

      if attributes.key?(:'aggregate_term_end')
        self.aggregate_term_end = attributes[:'aggregate_term_end']
      end

      if attributes.key?(:'client_field_1')
        self.client_field_1 = attributes[:'client_field_1']
      end

      if attributes.key?(:'client_field_2')
        self.client_field_2 = attributes[:'client_field_2']
      end

      if attributes.key?(:'client_field_3')
        self.client_field_3 = attributes[:'client_field_3']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      apply_type_validator = EnumAttributeValidator.new('Integer', [0, 1])
      return false unless apply_type_validator.valid?(@apply_type)
      apply_type_for_platform_fee_validator = EnumAttributeValidator.new('Integer', [0, 1])
      return false unless apply_type_for_platform_fee_validator.valid?(@apply_type_for_platform_fee)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] apply_type Object to be assigned
    def apply_type=(apply_type)
      validator = EnumAttributeValidator.new('Integer', [0, 1])
      unless validator.valid?(apply_type)
        fail ArgumentError, "invalid value for \"apply_type\", must be one of #{validator.allowable_values}."
      end
      @apply_type = apply_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] apply_type_for_platform_fee Object to be assigned
    def apply_type_for_platform_fee=(apply_type_for_platform_fee)
      validator = EnumAttributeValidator.new('Integer', [0, 1])
      unless validator.valid?(apply_type_for_platform_fee)
        fail ArgumentError, "invalid value for \"apply_type_for_platform_fee\", must be one of #{validator.allowable_values}."
      end
      @apply_type_for_platform_fee = apply_type_for_platform_fee
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          detail_id == o.detail_id &&
          shop_id == o.shop_id &&
          scheduled_deposit_date == o.scheduled_deposit_date &&
          trade_type == o.trade_type &&
          payment_method == o.payment_method &&
          amount_correction_type == o.amount_correction_type &&
          account_id == o.account_id &&
          order_id == o.order_id &&
          access_id == o.access_id &&
          deposit_amount == o.deposit_amount &&
          amount == o.amount &&
          tax == o.tax &&
          fee_total == o.fee_total &&
          fee_total_taxin == o.fee_total_taxin &&
          fee_profit_tax == o.fee_profit_tax &&
          fee_profit == o.fee_profit &&
          fee_cost == o.fee_cost &&
          fee_rate_total == o.fee_rate_total &&
          fixed_fee == o.fixed_fee &&
          apply_type == o.apply_type &&
          web_registration_fee == o.web_registration_fee &&
          web_registration_fee_taxin == o.web_registration_fee_taxin &&
          web_registration_fee_tax == o.web_registration_fee_tax &&
          platform_fee == o.platform_fee &&
          platform_fee_taxin == o.platform_fee_taxin &&
          platform_fee_rate == o.platform_fee_rate &&
          fixed_fee_for_platform_fee == o.fixed_fee_for_platform_fee &&
          apply_type_for_platform_fee == o.apply_type_for_platform_fee &&
          platform_web_registration_fee == o.platform_web_registration_fee &&
          platform_web_registration_fee_taxin == o.platform_web_registration_fee_taxin &&
          platform_web_registration_fee_tax == o.platform_web_registration_fee_tax &&
          processed_date == o.processed_date &&
          aggregate_term_start == o.aggregate_term_start &&
          aggregate_term_end == o.aggregate_term_end &&
          client_field_1 == o.client_field_1 &&
          client_field_2 == o.client_field_2 &&
          client_field_3 == o.client_field_3 &&
          created == o.created &&
          updated == o.updated
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [detail_id, shop_id, scheduled_deposit_date, trade_type, payment_method, amount_correction_type, account_id, order_id, access_id, deposit_amount, amount, tax, fee_total, fee_total_taxin, fee_profit_tax, fee_profit, fee_cost, fee_rate_total, fixed_fee, apply_type, web_registration_fee, web_registration_fee_taxin, web_registration_fee_tax, platform_fee, platform_fee_taxin, platform_fee_rate, fixed_fee_for_platform_fee, apply_type_for_platform_fee, platform_web_registration_fee, platform_web_registration_fee_taxin, platform_web_registration_fee_tax, processed_date, aggregate_term_start, aggregate_term_end, client_field_1, client_field_2, client_field_3, created, updated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
