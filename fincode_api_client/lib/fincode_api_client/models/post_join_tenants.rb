=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class POSTJoinTenants
    # ショップID 
    attr_accessor :id

    # ショップ名 
    attr_accessor :shop_name

    # ショップ名（カナ） 
    attr_accessor :shop_name_kana

    attr_accessor :shop_type

    # プラットフォームID 
    attr_accessor :platform_id

    # プラットフォーム名 
    attr_accessor :platform_name

    attr_accessor :shared_customer_flag

    # 顧客情報共有グループID\\ fincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。 
    attr_accessor :customer_group_id

    # 通知先メールアドレス 
    attr_accessor :send_mail_address

    # ショップメールアドレス 
    attr_accessor :shop_mail_address

    # ログ保存日数 
    attr_accessor :log_keep_days

    # APIバージョン 
    attr_accessor :api_version

    attr_accessor :api_key_display_flag

    # 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS` 
    attr_accessor :created

    # 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS` 
    attr_accessor :updated

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'shop_name' => :'shop_name',
        :'shop_name_kana' => :'shop_name_kana',
        :'shop_type' => :'shop_type',
        :'platform_id' => :'platform_id',
        :'platform_name' => :'platform_name',
        :'shared_customer_flag' => :'shared_customer_flag',
        :'customer_group_id' => :'customer_group_id',
        :'send_mail_address' => :'send_mail_address',
        :'shop_mail_address' => :'shop_mail_address',
        :'log_keep_days' => :'log_keep_days',
        :'api_version' => :'api_version',
        :'api_key_display_flag' => :'api_key_display_flag',
        :'created' => :'created',
        :'updated' => :'updated'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'shop_name' => :'String',
        :'shop_name_kana' => :'String',
        :'shop_type' => :'ShopType',
        :'platform_id' => :'String',
        :'platform_name' => :'String',
        :'shared_customer_flag' => :'SharedCustomerFlag',
        :'customer_group_id' => :'String',
        :'send_mail_address' => :'String',
        :'shop_mail_address' => :'String',
        :'log_keep_days' => :'String',
        :'api_version' => :'String',
        :'api_key_display_flag' => :'ApiKeyDisplayFlag',
        :'created' => :'String',
        :'updated' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'shop_name',
        :'shop_name_kana',
        :'platform_name',
        :'shared_customer_flag',
        :'customer_group_id',
        :'send_mail_address',
        :'shop_mail_address',
        :'log_keep_days',
        :'api_version',
        :'api_key_display_flag',
        :'updated'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::POSTJoinTenants` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::POSTJoinTenants`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'shop_name')
        self.shop_name = attributes[:'shop_name']
      end

      if attributes.key?(:'shop_name_kana')
        self.shop_name_kana = attributes[:'shop_name_kana']
      end

      if attributes.key?(:'shop_type')
        self.shop_type = attributes[:'shop_type']
      end

      if attributes.key?(:'platform_id')
        self.platform_id = attributes[:'platform_id']
      end

      if attributes.key?(:'platform_name')
        self.platform_name = attributes[:'platform_name']
      end

      if attributes.key?(:'shared_customer_flag')
        self.shared_customer_flag = attributes[:'shared_customer_flag']
      end

      if attributes.key?(:'customer_group_id')
        self.customer_group_id = attributes[:'customer_group_id']
      end

      if attributes.key?(:'send_mail_address')
        self.send_mail_address = attributes[:'send_mail_address']
      end

      if attributes.key?(:'shop_mail_address')
        self.shop_mail_address = attributes[:'shop_mail_address']
      end

      if attributes.key?(:'log_keep_days')
        self.log_keep_days = attributes[:'log_keep_days']
      end

      if attributes.key?(:'api_version')
        self.api_version = attributes[:'api_version']
      end

      if attributes.key?(:'api_key_display_flag')
        self.api_key_display_flag = attributes[:'api_key_display_flag']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@id.nil? && @id.to_s.length > 13
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 13.')
      end

      if !@id.nil? && @id.to_s.length < 13
        invalid_properties.push('invalid value for "id", the character length must be great than or equal to 13.')
      end

      if !@shop_name.nil? && @shop_name.to_s.length > 20
        invalid_properties.push('invalid value for "shop_name", the character length must be smaller than or equal to 20.')
      end

      if !@shop_name.nil? && @shop_name.to_s.length < 1
        invalid_properties.push('invalid value for "shop_name", the character length must be great than or equal to 1.')
      end

      if !@shop_name_kana.nil? && @shop_name_kana.to_s.length > 40
        invalid_properties.push('invalid value for "shop_name_kana", the character length must be smaller than or equal to 40.')
      end

      if !@shop_name_kana.nil? && @shop_name_kana.to_s.length < 1
        invalid_properties.push('invalid value for "shop_name_kana", the character length must be great than or equal to 1.')
      end

      if !@platform_id.nil? && @platform_id.to_s.length > 13
        invalid_properties.push('invalid value for "platform_id", the character length must be smaller than or equal to 13.')
      end

      if !@platform_id.nil? && @platform_id.to_s.length < 13
        invalid_properties.push('invalid value for "platform_id", the character length must be great than or equal to 13.')
      end

      if !@platform_name.nil? && @platform_name.to_s.length > 50
        invalid_properties.push('invalid value for "platform_name", the character length must be smaller than or equal to 50.')
      end

      if !@platform_name.nil? && @platform_name.to_s.length < 1
        invalid_properties.push('invalid value for "platform_name", the character length must be great than or equal to 1.')
      end

      if !@customer_group_id.nil? && @customer_group_id.to_s.length > 13
        invalid_properties.push('invalid value for "customer_group_id", the character length must be smaller than or equal to 13.')
      end

      if !@customer_group_id.nil? && @customer_group_id.to_s.length < 13
        invalid_properties.push('invalid value for "customer_group_id", the character length must be great than or equal to 13.')
      end

      if !@send_mail_address.nil? && @send_mail_address.to_s.length > 255
        invalid_properties.push('invalid value for "send_mail_address", the character length must be smaller than or equal to 255.')
      end

      if !@send_mail_address.nil? && @send_mail_address.to_s.length < 1
        invalid_properties.push('invalid value for "send_mail_address", the character length must be great than or equal to 1.')
      end

      if !@shop_mail_address.nil? && @shop_mail_address.to_s.length > 255
        invalid_properties.push('invalid value for "shop_mail_address", the character length must be smaller than or equal to 255.')
      end

      if !@shop_mail_address.nil? && @shop_mail_address.to_s.length < 1
        invalid_properties.push('invalid value for "shop_mail_address", the character length must be great than or equal to 1.')
      end

      if !@log_keep_days.nil? && @log_keep_days.to_s.length > 4
        invalid_properties.push('invalid value for "log_keep_days", the character length must be smaller than or equal to 4.')
      end

      if !@log_keep_days.nil? && @log_keep_days.to_s.length < 1
        invalid_properties.push('invalid value for "log_keep_days", the character length must be great than or equal to 1.')
      end

      if !@api_version.nil? && @api_version.to_s.length > 8
        invalid_properties.push('invalid value for "api_version", the character length must be smaller than or equal to 8.')
      end

      if !@api_version.nil? && @api_version.to_s.length < 1
        invalid_properties.push('invalid value for "api_version", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@id.nil? && @id.to_s.length > 13
      return false if !@id.nil? && @id.to_s.length < 13
      return false if !@shop_name.nil? && @shop_name.to_s.length > 20
      return false if !@shop_name.nil? && @shop_name.to_s.length < 1
      return false if !@shop_name_kana.nil? && @shop_name_kana.to_s.length > 40
      return false if !@shop_name_kana.nil? && @shop_name_kana.to_s.length < 1
      return false if !@platform_id.nil? && @platform_id.to_s.length > 13
      return false if !@platform_id.nil? && @platform_id.to_s.length < 13
      return false if !@platform_name.nil? && @platform_name.to_s.length > 50
      return false if !@platform_name.nil? && @platform_name.to_s.length < 1
      return false if !@customer_group_id.nil? && @customer_group_id.to_s.length > 13
      return false if !@customer_group_id.nil? && @customer_group_id.to_s.length < 13
      return false if !@send_mail_address.nil? && @send_mail_address.to_s.length > 255
      return false if !@send_mail_address.nil? && @send_mail_address.to_s.length < 1
      return false if !@shop_mail_address.nil? && @shop_mail_address.to_s.length > 255
      return false if !@shop_mail_address.nil? && @shop_mail_address.to_s.length < 1
      return false if !@log_keep_days.nil? && @log_keep_days.to_s.length > 4
      return false if !@log_keep_days.nil? && @log_keep_days.to_s.length < 1
      return false if !@api_version.nil? && @api_version.to_s.length > 8
      return false if !@api_version.nil? && @api_version.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id.to_s.length > 13
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 13.'
      end

      if id.to_s.length < 13
        fail ArgumentError, 'invalid value for "id", the character length must be great than or equal to 13.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_name Value to be assigned
    def shop_name=(shop_name)
      if !shop_name.nil? && shop_name.to_s.length > 20
        fail ArgumentError, 'invalid value for "shop_name", the character length must be smaller than or equal to 20.'
      end

      if !shop_name.nil? && shop_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_name", the character length must be great than or equal to 1.'
      end

      @shop_name = shop_name
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_name_kana Value to be assigned
    def shop_name_kana=(shop_name_kana)
      if !shop_name_kana.nil? && shop_name_kana.to_s.length > 40
        fail ArgumentError, 'invalid value for "shop_name_kana", the character length must be smaller than or equal to 40.'
      end

      if !shop_name_kana.nil? && shop_name_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_name_kana", the character length must be great than or equal to 1.'
      end

      @shop_name_kana = shop_name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] platform_id Value to be assigned
    def platform_id=(platform_id)
      if platform_id.nil?
        fail ArgumentError, 'platform_id cannot be nil'
      end

      if platform_id.to_s.length > 13
        fail ArgumentError, 'invalid value for "platform_id", the character length must be smaller than or equal to 13.'
      end

      if platform_id.to_s.length < 13
        fail ArgumentError, 'invalid value for "platform_id", the character length must be great than or equal to 13.'
      end

      @platform_id = platform_id
    end

    # Custom attribute writer method with validation
    # @param [Object] platform_name Value to be assigned
    def platform_name=(platform_name)
      if !platform_name.nil? && platform_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "platform_name", the character length must be smaller than or equal to 50.'
      end

      if !platform_name.nil? && platform_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "platform_name", the character length must be great than or equal to 1.'
      end

      @platform_name = platform_name
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_group_id Value to be assigned
    def customer_group_id=(customer_group_id)
      if !customer_group_id.nil? && customer_group_id.to_s.length > 13
        fail ArgumentError, 'invalid value for "customer_group_id", the character length must be smaller than or equal to 13.'
      end

      if !customer_group_id.nil? && customer_group_id.to_s.length < 13
        fail ArgumentError, 'invalid value for "customer_group_id", the character length must be great than or equal to 13.'
      end

      @customer_group_id = customer_group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] send_mail_address Value to be assigned
    def send_mail_address=(send_mail_address)
      if !send_mail_address.nil? && send_mail_address.to_s.length > 255
        fail ArgumentError, 'invalid value for "send_mail_address", the character length must be smaller than or equal to 255.'
      end

      if !send_mail_address.nil? && send_mail_address.to_s.length < 1
        fail ArgumentError, 'invalid value for "send_mail_address", the character length must be great than or equal to 1.'
      end

      @send_mail_address = send_mail_address
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_mail_address Value to be assigned
    def shop_mail_address=(shop_mail_address)
      if !shop_mail_address.nil? && shop_mail_address.to_s.length > 255
        fail ArgumentError, 'invalid value for "shop_mail_address", the character length must be smaller than or equal to 255.'
      end

      if !shop_mail_address.nil? && shop_mail_address.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_mail_address", the character length must be great than or equal to 1.'
      end

      @shop_mail_address = shop_mail_address
    end

    # Custom attribute writer method with validation
    # @param [Object] log_keep_days Value to be assigned
    def log_keep_days=(log_keep_days)
      if !log_keep_days.nil? && log_keep_days.to_s.length > 4
        fail ArgumentError, 'invalid value for "log_keep_days", the character length must be smaller than or equal to 4.'
      end

      if !log_keep_days.nil? && log_keep_days.to_s.length < 1
        fail ArgumentError, 'invalid value for "log_keep_days", the character length must be great than or equal to 1.'
      end

      @log_keep_days = log_keep_days
    end

    # Custom attribute writer method with validation
    # @param [Object] api_version Value to be assigned
    def api_version=(api_version)
      if !api_version.nil? && api_version.to_s.length > 8
        fail ArgumentError, 'invalid value for "api_version", the character length must be smaller than or equal to 8.'
      end

      if !api_version.nil? && api_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "api_version", the character length must be great than or equal to 1.'
      end

      @api_version = api_version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          shop_name == o.shop_name &&
          shop_name_kana == o.shop_name_kana &&
          shop_type == o.shop_type &&
          platform_id == o.platform_id &&
          platform_name == o.platform_name &&
          shared_customer_flag == o.shared_customer_flag &&
          customer_group_id == o.customer_group_id &&
          send_mail_address == o.send_mail_address &&
          shop_mail_address == o.shop_mail_address &&
          log_keep_days == o.log_keep_days &&
          api_version == o.api_version &&
          api_key_display_flag == o.api_key_display_flag &&
          created == o.created &&
          updated == o.updated
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, shop_name, shop_name_kana, shop_type, platform_id, platform_name, shared_customer_flag, customer_group_id, send_mail_address, shop_mail_address, log_keep_days, api_version, api_key_display_flag, created, updated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
