=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class PaymentKonbiniGeneratingBarcodeRequest
    # 決済種別\\ この決済で利用する決済手段です。  - `Konbini`: コンビニ決済 
    attr_accessor :pay_type

    # 取引ID 
    attr_accessor :access_id

    # デバイス名\\ バーコード表示を行うデバイスの名前を指定します。  - Androidの場合： [ユーザーエージェントクライアントヒントAPI](https://developer.mozilla.org/ja/docs/Web/API/User-Agent_Client_Hints_API)またはNavigator: userAgentプロパティ（非推奨）で取得できる文字列から取得したデバイス名を指定します。 - iPhoneの場合： 固定文字列`iPhone`を指定します。 
    attr_accessor :device_name

    # デバイス画面幅\\ バーコード表示を行うデバイスの画面幅を指定します。  - Androidの場合： `window.screen.width`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.width`で取得した値を指定します。 
    attr_accessor :win_width

    # デバイス画面の高さ\\ バーコード表示を行うデバイス画面の高さを指定します。  - Androidの場合： `window.screen.height`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.height`で取得した値を指定します。 
    attr_accessor :win_height

    # デバイスピクセル比\\ `window.devicePixelRatio`から取得した値を小数点以下2桁まで指定します。 
    attr_accessor :pixel_ratio

    attr_accessor :win_size_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pay_type' => :'pay_type',
        :'access_id' => :'access_id',
        :'device_name' => :'device_name',
        :'win_width' => :'win_width',
        :'win_height' => :'win_height',
        :'pixel_ratio' => :'pixel_ratio',
        :'win_size_type' => :'win_size_type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pay_type' => :'PayType',
        :'access_id' => :'String',
        :'device_name' => :'String',
        :'win_width' => :'String',
        :'win_height' => :'String',
        :'pixel_ratio' => :'String',
        :'win_size_type' => :'WinSizeType'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::PaymentKonbiniGeneratingBarcodeRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::PaymentKonbiniGeneratingBarcodeRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pay_type')
        self.pay_type = attributes[:'pay_type']
      else
        self.pay_type = nil
      end

      if attributes.key?(:'access_id')
        self.access_id = attributes[:'access_id']
      else
        self.access_id = nil
      end

      if attributes.key?(:'device_name')
        self.device_name = attributes[:'device_name']
      else
        self.device_name = nil
      end

      if attributes.key?(:'win_width')
        self.win_width = attributes[:'win_width']
      else
        self.win_width = nil
      end

      if attributes.key?(:'win_height')
        self.win_height = attributes[:'win_height']
      else
        self.win_height = nil
      end

      if attributes.key?(:'pixel_ratio')
        self.pixel_ratio = attributes[:'pixel_ratio']
      else
        self.pixel_ratio = nil
      end

      if attributes.key?(:'win_size_type')
        self.win_size_type = attributes[:'win_size_type']
      else
        self.win_size_type = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @pay_type.nil?
        invalid_properties.push('invalid value for "pay_type", pay_type cannot be nil.')
      end

      if @access_id.nil?
        invalid_properties.push('invalid value for "access_id", access_id cannot be nil.')
      end

      if @access_id.to_s.length > 24
        invalid_properties.push('invalid value for "access_id", the character length must be smaller than or equal to 24.')
      end

      if @access_id.to_s.length < 24
        invalid_properties.push('invalid value for "access_id", the character length must be great than or equal to 24.')
      end

      if @device_name.nil?
        invalid_properties.push('invalid value for "device_name", device_name cannot be nil.')
      end

      if @device_name.to_s.length > 20
        invalid_properties.push('invalid value for "device_name", the character length must be smaller than or equal to 20.')
      end

      if @device_name.to_s.length < 1
        invalid_properties.push('invalid value for "device_name", the character length must be great than or equal to 1.')
      end

      if @win_width.nil?
        invalid_properties.push('invalid value for "win_width", win_width cannot be nil.')
      end

      if @win_width.to_s.length > 5
        invalid_properties.push('invalid value for "win_width", the character length must be smaller than or equal to 5.')
      end

      if @win_width.to_s.length < 1
        invalid_properties.push('invalid value for "win_width", the character length must be great than or equal to 1.')
      end

      if @win_height.nil?
        invalid_properties.push('invalid value for "win_height", win_height cannot be nil.')
      end

      if @win_height.to_s.length > 5
        invalid_properties.push('invalid value for "win_height", the character length must be smaller than or equal to 5.')
      end

      if @win_height.to_s.length < 1
        invalid_properties.push('invalid value for "win_height", the character length must be great than or equal to 1.')
      end

      if @pixel_ratio.nil?
        invalid_properties.push('invalid value for "pixel_ratio", pixel_ratio cannot be nil.')
      end

      if @pixel_ratio.to_s.length > 5
        invalid_properties.push('invalid value for "pixel_ratio", the character length must be smaller than or equal to 5.')
      end

      if @pixel_ratio.to_s.length < 1
        invalid_properties.push('invalid value for "pixel_ratio", the character length must be great than or equal to 1.')
      end

      if @win_size_type.nil?
        invalid_properties.push('invalid value for "win_size_type", win_size_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @pay_type.nil?
      return false if @access_id.nil?
      return false if @access_id.to_s.length > 24
      return false if @access_id.to_s.length < 24
      return false if @device_name.nil?
      return false if @device_name.to_s.length > 20
      return false if @device_name.to_s.length < 1
      return false if @win_width.nil?
      return false if @win_width.to_s.length > 5
      return false if @win_width.to_s.length < 1
      return false if @win_height.nil?
      return false if @win_height.to_s.length > 5
      return false if @win_height.to_s.length < 1
      return false if @pixel_ratio.nil?
      return false if @pixel_ratio.to_s.length > 5
      return false if @pixel_ratio.to_s.length < 1
      return false if @win_size_type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] access_id Value to be assigned
    def access_id=(access_id)
      if access_id.nil?
        fail ArgumentError, 'access_id cannot be nil'
      end

      if access_id.to_s.length > 24
        fail ArgumentError, 'invalid value for "access_id", the character length must be smaller than or equal to 24.'
      end

      if access_id.to_s.length < 24
        fail ArgumentError, 'invalid value for "access_id", the character length must be great than or equal to 24.'
      end

      @access_id = access_id
    end

    # Custom attribute writer method with validation
    # @param [Object] device_name Value to be assigned
    def device_name=(device_name)
      if device_name.nil?
        fail ArgumentError, 'device_name cannot be nil'
      end

      if device_name.to_s.length > 20
        fail ArgumentError, 'invalid value for "device_name", the character length must be smaller than or equal to 20.'
      end

      if device_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "device_name", the character length must be great than or equal to 1.'
      end

      @device_name = device_name
    end

    # Custom attribute writer method with validation
    # @param [Object] win_width Value to be assigned
    def win_width=(win_width)
      if win_width.nil?
        fail ArgumentError, 'win_width cannot be nil'
      end

      if win_width.to_s.length > 5
        fail ArgumentError, 'invalid value for "win_width", the character length must be smaller than or equal to 5.'
      end

      if win_width.to_s.length < 1
        fail ArgumentError, 'invalid value for "win_width", the character length must be great than or equal to 1.'
      end

      @win_width = win_width
    end

    # Custom attribute writer method with validation
    # @param [Object] win_height Value to be assigned
    def win_height=(win_height)
      if win_height.nil?
        fail ArgumentError, 'win_height cannot be nil'
      end

      if win_height.to_s.length > 5
        fail ArgumentError, 'invalid value for "win_height", the character length must be smaller than or equal to 5.'
      end

      if win_height.to_s.length < 1
        fail ArgumentError, 'invalid value for "win_height", the character length must be great than or equal to 1.'
      end

      @win_height = win_height
    end

    # Custom attribute writer method with validation
    # @param [Object] pixel_ratio Value to be assigned
    def pixel_ratio=(pixel_ratio)
      if pixel_ratio.nil?
        fail ArgumentError, 'pixel_ratio cannot be nil'
      end

      if pixel_ratio.to_s.length > 5
        fail ArgumentError, 'invalid value for "pixel_ratio", the character length must be smaller than or equal to 5.'
      end

      if pixel_ratio.to_s.length < 1
        fail ArgumentError, 'invalid value for "pixel_ratio", the character length must be great than or equal to 1.'
      end

      @pixel_ratio = pixel_ratio
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pay_type == o.pay_type &&
          access_id == o.access_id &&
          device_name == o.device_name &&
          win_width == o.win_width &&
          win_height == o.win_height &&
          pixel_ratio == o.pixel_ratio &&
          win_size_type == o.win_size_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pay_type, access_id, device_name, win_width, win_height, pixel_ratio, win_size_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
