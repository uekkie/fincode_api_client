=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module FincodeApiClient
  # <span class=\"smallText\">この決済手段がカードを表す（`pay_type = Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span> 
  class PaymentMethodCard
    # マスク済みカード番号。\\ <span class=\"smallText\"> 下4桁以外をマスクしたカード番号です。\\ カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\\ </span> 形式：`************1234` 
    attr_accessor :card_no

    # カード有効期限。\\ 形式：`YYMM` 
    attr_accessor :expire

    # カード名義人名。 
    attr_accessor :holder_name

    attr_accessor :type

    attr_accessor :brand

    # カード番号をもとに生成されたハッシュ値。\\ <span class=\"smallText\"> おなじカード番号に対しては常に同じ値が返されます。\\ カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。 </span> 
    attr_accessor :card_no_hash

    # カード登録時3Dセキュア認証を利用するか。  - `0`: 3Dセキュア認証を利用しない（デフォルト） - `2`: 3Dセキュア2.0認証を利用する 
    attr_accessor :tds_type

    # 3Dセキュア2.0非対応時の挙動設定\\ 購入者がこの決済に利用したカードが3Dセキュア2.0に非対応である場合の後続処理を設定します。  - `2`: エラーをレスポンスし、処理を終了する。（デフォルト） - `3`: 3Dセキュア認証なしで登録を行う。 
    attr_accessor :tds2_type

    attr_accessor :tds2_status

    # <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 加盟店名。\\ 3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\ 使用可能な文字は以下の通りです。 - 半角英数 - 半角記号： !\"#$%&'()*+,-./:;<=>?@[\\]`^_{|}~ - 半角スペース  未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\ \\ 形式：`{{ショップID}}-{{英数字からなる固定値}}` 
    attr_accessor :merchant_name

    # 取引ID 
    attr_accessor :access_id

    # ACS呼出判定。 
    attr_accessor :acs

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'card_no' => :'card_no',
        :'expire' => :'expire',
        :'holder_name' => :'holder_name',
        :'type' => :'type',
        :'brand' => :'brand',
        :'card_no_hash' => :'card_no_hash',
        :'tds_type' => :'tds_type',
        :'tds2_type' => :'tds2_type',
        :'tds2_status' => :'tds2_status',
        :'merchant_name' => :'merchant_name',
        :'access_id' => :'access_id',
        :'acs' => :'acs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'card_no' => :'String',
        :'expire' => :'String',
        :'holder_name' => :'String',
        :'type' => :'CardType',
        :'brand' => :'CardBrand',
        :'card_no_hash' => :'String',
        :'tds_type' => :'TdsType',
        :'tds2_type' => :'Tds2Type',
        :'tds2_status' => :'ThreeDSecure2Status',
        :'merchant_name' => :'String',
        :'access_id' => :'String',
        :'acs' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'expire',
        :'holder_name',
        :'tds_type',
        :'tds2_type',
        :'acs'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::PaymentMethodCard` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::PaymentMethodCard`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'card_no')
        self.card_no = attributes[:'card_no']
      end

      if attributes.key?(:'expire')
        self.expire = attributes[:'expire']
      end

      if attributes.key?(:'holder_name')
        self.holder_name = attributes[:'holder_name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'brand')
        self.brand = attributes[:'brand']
      end

      if attributes.key?(:'card_no_hash')
        self.card_no_hash = attributes[:'card_no_hash']
      end

      if attributes.key?(:'tds_type')
        self.tds_type = attributes[:'tds_type']
      end

      if attributes.key?(:'tds2_type')
        self.tds2_type = attributes[:'tds2_type']
      end

      if attributes.key?(:'tds2_status')
        self.tds2_status = attributes[:'tds2_status']
      end

      if attributes.key?(:'merchant_name')
        self.merchant_name = attributes[:'merchant_name']
      end

      if attributes.key?(:'access_id')
        self.access_id = attributes[:'access_id']
      end

      if attributes.key?(:'acs')
        self.acs = attributes[:'acs']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@card_no.nil? && @card_no.to_s.length > 16
        invalid_properties.push('invalid value for "card_no", the character length must be smaller than or equal to 16.')
      end

      if !@expire.nil? && @expire.to_s.length > 4
        invalid_properties.push('invalid value for "expire", the character length must be smaller than or equal to 4.')
      end

      if !@expire.nil? && @expire.to_s.length < 4
        invalid_properties.push('invalid value for "expire", the character length must be great than or equal to 4.')
      end

      pattern = Regexp.new(/^\d{2}\d{2}$/)
      if !@expire.nil? && @expire !~ pattern
        invalid_properties.push("invalid value for \"expire\", must conform to the pattern #{pattern}.")
      end

      if !@holder_name.nil? && @holder_name.to_s.length > 50
        invalid_properties.push('invalid value for "holder_name", the character length must be smaller than or equal to 50.')
      end

      if !@holder_name.nil? && @holder_name.to_s.length < 1
        invalid_properties.push('invalid value for "holder_name", the character length must be great than or equal to 1.')
      end

      if !@card_no_hash.nil? && @card_no_hash.to_s.length > 64
        invalid_properties.push('invalid value for "card_no_hash", the character length must be smaller than or equal to 64.')
      end

      if !@card_no_hash.nil? && @card_no_hash.to_s.length < 1
        invalid_properties.push('invalid value for "card_no_hash", the character length must be great than or equal to 1.')
      end

      if !@merchant_name.nil? && @merchant_name.to_s.length > 25
        invalid_properties.push('invalid value for "merchant_name", the character length must be smaller than or equal to 25.')
      end

      if !@access_id.nil? && @access_id.to_s.length > 24
        invalid_properties.push('invalid value for "access_id", the character length must be smaller than or equal to 24.')
      end

      if !@access_id.nil? && @access_id.to_s.length < 24
        invalid_properties.push('invalid value for "access_id", the character length must be great than or equal to 24.')
      end

      if !@acs.nil? && @acs.to_s.length > 1
        invalid_properties.push('invalid value for "acs", the character length must be smaller than or equal to 1.')
      end

      if !@acs.nil? && @acs.to_s.length < 1
        invalid_properties.push('invalid value for "acs", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@card_no.nil? && @card_no.to_s.length > 16
      return false if !@expire.nil? && @expire.to_s.length > 4
      return false if !@expire.nil? && @expire.to_s.length < 4
      return false if !@expire.nil? && @expire !~ Regexp.new(/^\d{2}\d{2}$/)
      return false if !@holder_name.nil? && @holder_name.to_s.length > 50
      return false if !@holder_name.nil? && @holder_name.to_s.length < 1
      return false if !@card_no_hash.nil? && @card_no_hash.to_s.length > 64
      return false if !@card_no_hash.nil? && @card_no_hash.to_s.length < 1
      return false if !@merchant_name.nil? && @merchant_name.to_s.length > 25
      return false if !@access_id.nil? && @access_id.to_s.length > 24
      return false if !@access_id.nil? && @access_id.to_s.length < 24
      return false if !@acs.nil? && @acs.to_s.length > 1
      return false if !@acs.nil? && @acs.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] card_no Value to be assigned
    def card_no=(card_no)
      if card_no.nil?
        fail ArgumentError, 'card_no cannot be nil'
      end

      if card_no.to_s.length > 16
        fail ArgumentError, 'invalid value for "card_no", the character length must be smaller than or equal to 16.'
      end

      @card_no = card_no
    end

    # Custom attribute writer method with validation
    # @param [Object] expire Value to be assigned
    def expire=(expire)
      if !expire.nil? && expire.to_s.length > 4
        fail ArgumentError, 'invalid value for "expire", the character length must be smaller than or equal to 4.'
      end

      if !expire.nil? && expire.to_s.length < 4
        fail ArgumentError, 'invalid value for "expire", the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/^\d{2}\d{2}$/)
      if !expire.nil? && expire !~ pattern
        fail ArgumentError, "invalid value for \"expire\", must conform to the pattern #{pattern}."
      end

      @expire = expire
    end

    # Custom attribute writer method with validation
    # @param [Object] holder_name Value to be assigned
    def holder_name=(holder_name)
      if !holder_name.nil? && holder_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "holder_name", the character length must be smaller than or equal to 50.'
      end

      if !holder_name.nil? && holder_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "holder_name", the character length must be great than or equal to 1.'
      end

      @holder_name = holder_name
    end

    # Custom attribute writer method with validation
    # @param [Object] card_no_hash Value to be assigned
    def card_no_hash=(card_no_hash)
      if card_no_hash.nil?
        fail ArgumentError, 'card_no_hash cannot be nil'
      end

      if card_no_hash.to_s.length > 64
        fail ArgumentError, 'invalid value for "card_no_hash", the character length must be smaller than or equal to 64.'
      end

      if card_no_hash.to_s.length < 1
        fail ArgumentError, 'invalid value for "card_no_hash", the character length must be great than or equal to 1.'
      end

      @card_no_hash = card_no_hash
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_name Value to be assigned
    def merchant_name=(merchant_name)
      if merchant_name.nil?
        fail ArgumentError, 'merchant_name cannot be nil'
      end

      if merchant_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "merchant_name", the character length must be smaller than or equal to 25.'
      end

      @merchant_name = merchant_name
    end

    # Custom attribute writer method with validation
    # @param [Object] access_id Value to be assigned
    def access_id=(access_id)
      if access_id.nil?
        fail ArgumentError, 'access_id cannot be nil'
      end

      if access_id.to_s.length > 24
        fail ArgumentError, 'invalid value for "access_id", the character length must be smaller than or equal to 24.'
      end

      if access_id.to_s.length < 24
        fail ArgumentError, 'invalid value for "access_id", the character length must be great than or equal to 24.'
      end

      @access_id = access_id
    end

    # Custom attribute writer method with validation
    # @param [Object] acs Value to be assigned
    def acs=(acs)
      if !acs.nil? && acs.to_s.length > 1
        fail ArgumentError, 'invalid value for "acs", the character length must be smaller than or equal to 1.'
      end

      if !acs.nil? && acs.to_s.length < 1
        fail ArgumentError, 'invalid value for "acs", the character length must be great than or equal to 1.'
      end

      @acs = acs
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          card_no == o.card_no &&
          expire == o.expire &&
          holder_name == o.holder_name &&
          type == o.type &&
          brand == o.brand &&
          card_no_hash == o.card_no_hash &&
          tds_type == o.tds_type &&
          tds2_type == o.tds2_type &&
          tds2_status == o.tds2_status &&
          merchant_name == o.merchant_name &&
          access_id == o.access_id &&
          acs == o.acs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [card_no, expire, holder_name, type, brand, card_no_hash, tds_type, tds2_type, tds2_status, merchant_name, access_id, acs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
