=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class ShopInfoV2
    # fincodeにおけるショップ名 
    attr_accessor :shop_name

    # fincodeにおけるショップ名（カナ） 
    attr_accessor :shop_name_kana

    # fincodeにおけるショップ名（英語） 
    attr_accessor :shop_name_en

    # 購入者向けサポート窓口 メールアドレス\\ 形式： RFC 5322 
    attr_accessor :support_mail

    # 購入者向けサポート窓口 電話番号\\ 形式： 電話番号（ハイフンなし） 
    attr_accessor :support_tel

    # 1回の決済における金額（単価）\\ \\ 例： `1000`（1000円） 
    attr_accessor :unit_price

    # fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明  - `true`: fincode審査に時間がかかるコンテンツを取り扱う - `false`: fincode審査に時間がかかるコンテンツを取り扱わない  以下の商材を取り扱う場合は`true`を指定する必要があります。  - 呉服 - コンサルディングサービス - エステ、美容サロン、美容医療 - スポーツ施設・フィットネスクラブ - カルチャースクール・通信講座 - データ販売 - 情報詳細（情報の内容自体が商品となるもの） - 占い - サプリメント・健康食品 - 美容品・化粧品 - カツラ - 旅行業に該当するサービス - タバコ・CBD - 寄付金 
    attr_accessor :deals_long_apply_content

    # fincodeで取扱不可の商材を取り扱わないことの表明  - `true`: 取扱不可の商材を取り扱う予定はない - `false`: 取扱不可の商材を取り扱う予定がある  fincodeの禁止商材は以下の通りです。  - 金融行為（クレジットカードショッピング枠の現金化等） - 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券 - 賭博、ギャンブル - RMT（リアルマネートレーディング） - ペット等の生き物全般（※標本・剥製も含む） - お布施 - 危険ドラッグ、デザイナーズドラッグ - 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等） - 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの - 公序良俗に反するもの（アダルト、出会い系サイトを含む） - 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法） 
    attr_accessor :deals_insecure_content

    # 改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明  - `true`: 改正割賦販売法に基づく訴訟敗訴歴がある - `false`: 改正割賦販売法に基づく訴訟敗訴歴はない 
    attr_accessor :lost_trial

    attr_accessor :use_of_fincode

    # Webサイトの公開状況\\ \\ fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。\\ `usage_of_fincode.used_on_web`が`true`の場合、指定必須です。  - `true`: fincode審査チームがサイトを閲覧可能 - `false`: fincode審査チームがサイトを閲覧不可能 
    attr_accessor :site_published

    attr_accessor :site_info

    # プリペイドポイントの有無\\ \\ ショップがプリペイドポイントを導入しているかどうか 
    attr_accessor :prepaid_point

    attr_accessor :prepaid_point_info

    attr_accessor :provides

    # 取扱商材の説明\\ \\ ショップの提供する商材についての説明 
    attr_accessor :content_description

    # 物販商材情報<br>webサイトが公開されていない場合、取扱商材の詳細情報が必要になります。<br><a style=\"color: rgb(212, 31, 28);\">※ use_of_fincode.used_on_web または site_publishedが</a> `false` <a style=\"color: rgb(212, 31, 28);\"><br>かつ provides.productが</a> `true` <a style=\"color: rgb(212, 31, 28);\">のとき必須</a>
    attr_accessor :product_content_info

    # サービス商材情報<br>webサイトが公開されていない場合、取扱商材の詳細情報が必要になります。<br><a style=\"color: rgb(212, 31, 28);\">※ use_of_fincode.used_on_web または site_publishedが</a> `false` <a style=\"color: rgb(212, 31, 28);\"><br>かつ provides.serviceが</a> `true` <a style=\"color: rgb(212, 31, 28);\">のとき必須</a>
    attr_accessor :service_content_info

    # デジタルコンテンツ商材情報<br>webサイトが公開されていない場合、取扱商材の詳細情報が必要になります。<br><a style=\"color: rgb(212, 31, 28);\">※ use_of_fincode.used_on_web または site_publishedが</a> `false` <a style=\"color: rgb(212, 31, 28);\"><br>かつ provides.digital_contentsが</a> `true` <a style=\"color: rgb(212, 31, 28);\">のとき必須</a>
    attr_accessor :digital_content_info

    attr_accessor :additional_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shop_name' => :'shop_name',
        :'shop_name_kana' => :'shop_name_kana',
        :'shop_name_en' => :'shop_name_en',
        :'support_mail' => :'support_mail',
        :'support_tel' => :'support_tel',
        :'unit_price' => :'unit_price',
        :'deals_long_apply_content' => :'deals_long_apply_content',
        :'deals_insecure_content' => :'deals_insecure_content',
        :'lost_trial' => :'lost_trial',
        :'use_of_fincode' => :'use_of_fincode',
        :'site_published' => :'site_published',
        :'site_info' => :'site_info',
        :'prepaid_point' => :'prepaid_point',
        :'prepaid_point_info' => :'prepaid_point_info',
        :'provides' => :'provides',
        :'content_description' => :'content_description',
        :'product_content_info' => :'product_content_info',
        :'service_content_info' => :'service_content_info',
        :'digital_content_info' => :'digital_content_info',
        :'additional_info' => :'additional_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shop_name' => :'String',
        :'shop_name_kana' => :'String',
        :'shop_name_en' => :'String',
        :'support_mail' => :'String',
        :'support_tel' => :'String',
        :'unit_price' => :'Float',
        :'deals_long_apply_content' => :'Boolean',
        :'deals_insecure_content' => :'Boolean',
        :'lost_trial' => :'Boolean',
        :'use_of_fincode' => :'ShopInfoV2UseOfFincode',
        :'site_published' => :'Boolean',
        :'site_info' => :'ShopInfoV2SiteInfo',
        :'prepaid_point' => :'Boolean',
        :'prepaid_point_info' => :'ShopInfoV2PrepaidPointInfo',
        :'provides' => :'ShopInfoV2Provides',
        :'content_description' => :'String',
        :'product_content_info' => :'ContentInfoV2',
        :'service_content_info' => :'ContentInfoV2',
        :'digital_content_info' => :'ContentInfoV2',
        :'additional_info' => :'ShopInfoV2AdditionalInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'support_mail',
        :'support_tel',
        :'unit_price',
        :'deals_long_apply_content',
        :'deals_insecure_content',
        :'lost_trial',
        :'site_published',
        :'prepaid_point',
        :'content_description',
        :'additional_info'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::ShopInfoV2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::ShopInfoV2`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shop_name')
        self.shop_name = attributes[:'shop_name']
      else
        self.shop_name = nil
      end

      if attributes.key?(:'shop_name_kana')
        self.shop_name_kana = attributes[:'shop_name_kana']
      else
        self.shop_name_kana = nil
      end

      if attributes.key?(:'shop_name_en')
        self.shop_name_en = attributes[:'shop_name_en']
      else
        self.shop_name_en = nil
      end

      if attributes.key?(:'support_mail')
        self.support_mail = attributes[:'support_mail']
      else
        self.support_mail = nil
      end

      if attributes.key?(:'support_tel')
        self.support_tel = attributes[:'support_tel']
      else
        self.support_tel = nil
      end

      if attributes.key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      end

      if attributes.key?(:'deals_long_apply_content')
        self.deals_long_apply_content = attributes[:'deals_long_apply_content']
      else
        self.deals_long_apply_content = nil
      end

      if attributes.key?(:'deals_insecure_content')
        self.deals_insecure_content = attributes[:'deals_insecure_content']
      else
        self.deals_insecure_content = nil
      end

      if attributes.key?(:'lost_trial')
        self.lost_trial = attributes[:'lost_trial']
      else
        self.lost_trial = nil
      end

      if attributes.key?(:'use_of_fincode')
        self.use_of_fincode = attributes[:'use_of_fincode']
      else
        self.use_of_fincode = nil
      end

      if attributes.key?(:'site_published')
        self.site_published = attributes[:'site_published']
      end

      if attributes.key?(:'site_info')
        self.site_info = attributes[:'site_info']
      end

      if attributes.key?(:'prepaid_point')
        self.prepaid_point = attributes[:'prepaid_point']
      end

      if attributes.key?(:'prepaid_point_info')
        self.prepaid_point_info = attributes[:'prepaid_point_info']
      end

      if attributes.key?(:'provides')
        self.provides = attributes[:'provides']
      else
        self.provides = nil
      end

      if attributes.key?(:'content_description')
        self.content_description = attributes[:'content_description']
      else
        self.content_description = nil
      end

      if attributes.key?(:'product_content_info')
        self.product_content_info = attributes[:'product_content_info']
      end

      if attributes.key?(:'service_content_info')
        self.service_content_info = attributes[:'service_content_info']
      end

      if attributes.key?(:'digital_content_info')
        self.digital_content_info = attributes[:'digital_content_info']
      end

      if attributes.key?(:'additional_info')
        self.additional_info = attributes[:'additional_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @shop_name.nil?
        invalid_properties.push('invalid value for "shop_name", shop_name cannot be nil.')
      end

      if @shop_name.to_s.length > 100
        invalid_properties.push('invalid value for "shop_name", the character length must be smaller than or equal to 100.')
      end

      if @shop_name.to_s.length < 1
        invalid_properties.push('invalid value for "shop_name", the character length must be great than or equal to 1.')
      end

      if @shop_name_kana.nil?
        invalid_properties.push('invalid value for "shop_name_kana", shop_name_kana cannot be nil.')
      end

      if @shop_name_kana.to_s.length > 100
        invalid_properties.push('invalid value for "shop_name_kana", the character length must be smaller than or equal to 100.')
      end

      if @shop_name_kana.to_s.length < 1
        invalid_properties.push('invalid value for "shop_name_kana", the character length must be great than or equal to 1.')
      end

      if @shop_name_en.nil?
        invalid_properties.push('invalid value for "shop_name_en", shop_name_en cannot be nil.')
      end

      if @shop_name_en.to_s.length > 100
        invalid_properties.push('invalid value for "shop_name_en", the character length must be smaller than or equal to 100.')
      end

      if @shop_name_en.to_s.length < 1
        invalid_properties.push('invalid value for "shop_name_en", the character length must be great than or equal to 1.')
      end

      if @support_mail.to_s.length > 254
        invalid_properties.push('invalid value for "support_mail", the character length must be smaller than or equal to 254.')
      end

      if @support_mail.to_s.length < 1
        invalid_properties.push('invalid value for "support_mail", the character length must be great than or equal to 1.')
      end

      if @support_tel.to_s.length > 15
        invalid_properties.push('invalid value for "support_tel", the character length must be smaller than or equal to 15.')
      end

      if @support_tel.to_s.length < 1
        invalid_properties.push('invalid value for "support_tel", the character length must be great than or equal to 1.')
      end

      if @use_of_fincode.nil?
        invalid_properties.push('invalid value for "use_of_fincode", use_of_fincode cannot be nil.')
      end

      if @provides.nil?
        invalid_properties.push('invalid value for "provides", provides cannot be nil.')
      end

      if @content_description.to_s.length > 5000
        invalid_properties.push('invalid value for "content_description", the character length must be smaller than or equal to 5000.')
      end

      if @content_description.to_s.length < 1
        invalid_properties.push('invalid value for "content_description", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @shop_name.nil?
      return false if @shop_name.to_s.length > 100
      return false if @shop_name.to_s.length < 1
      return false if @shop_name_kana.nil?
      return false if @shop_name_kana.to_s.length > 100
      return false if @shop_name_kana.to_s.length < 1
      return false if @shop_name_en.nil?
      return false if @shop_name_en.to_s.length > 100
      return false if @shop_name_en.to_s.length < 1
      return false if @support_mail.to_s.length > 254
      return false if @support_mail.to_s.length < 1
      return false if @support_tel.to_s.length > 15
      return false if @support_tel.to_s.length < 1
      return false if @use_of_fincode.nil?
      return false if @provides.nil?
      return false if @content_description.to_s.length > 5000
      return false if @content_description.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_name Value to be assigned
    def shop_name=(shop_name)
      if shop_name.nil?
        fail ArgumentError, 'shop_name cannot be nil'
      end

      if shop_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "shop_name", the character length must be smaller than or equal to 100.'
      end

      if shop_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_name", the character length must be great than or equal to 1.'
      end

      @shop_name = shop_name
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_name_kana Value to be assigned
    def shop_name_kana=(shop_name_kana)
      if shop_name_kana.nil?
        fail ArgumentError, 'shop_name_kana cannot be nil'
      end

      if shop_name_kana.to_s.length > 100
        fail ArgumentError, 'invalid value for "shop_name_kana", the character length must be smaller than or equal to 100.'
      end

      if shop_name_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_name_kana", the character length must be great than or equal to 1.'
      end

      @shop_name_kana = shop_name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_name_en Value to be assigned
    def shop_name_en=(shop_name_en)
      if shop_name_en.nil?
        fail ArgumentError, 'shop_name_en cannot be nil'
      end

      if shop_name_en.to_s.length > 100
        fail ArgumentError, 'invalid value for "shop_name_en", the character length must be smaller than or equal to 100.'
      end

      if shop_name_en.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_name_en", the character length must be great than or equal to 1.'
      end

      @shop_name_en = shop_name_en
    end

    # Custom attribute writer method with validation
    # @param [Object] support_mail Value to be assigned
    def support_mail=(support_mail)
      if !support_mail.nil? && support_mail.to_s.length > 254
        fail ArgumentError, 'invalid value for "support_mail", the character length must be smaller than or equal to 254.'
      end

      if !support_mail.nil? && support_mail.to_s.length < 1
        fail ArgumentError, 'invalid value for "support_mail", the character length must be great than or equal to 1.'
      end

      @support_mail = support_mail
    end

    # Custom attribute writer method with validation
    # @param [Object] support_tel Value to be assigned
    def support_tel=(support_tel)
      if !support_tel.nil? && support_tel.to_s.length > 15
        fail ArgumentError, 'invalid value for "support_tel", the character length must be smaller than or equal to 15.'
      end

      if !support_tel.nil? && support_tel.to_s.length < 1
        fail ArgumentError, 'invalid value for "support_tel", the character length must be great than or equal to 1.'
      end

      @support_tel = support_tel
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_price Value to be assigned
    def unit_price=(unit_price)
      @unit_price = unit_price
    end

    # Custom attribute writer method with validation
    # @param [Object] content_description Value to be assigned
    def content_description=(content_description)
      if !content_description.nil? && content_description.to_s.length > 5000
        fail ArgumentError, 'invalid value for "content_description", the character length must be smaller than or equal to 5000.'
      end

      if !content_description.nil? && content_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "content_description", the character length must be great than or equal to 1.'
      end

      @content_description = content_description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shop_name == o.shop_name &&
          shop_name_kana == o.shop_name_kana &&
          shop_name_en == o.shop_name_en &&
          support_mail == o.support_mail &&
          support_tel == o.support_tel &&
          unit_price == o.unit_price &&
          deals_long_apply_content == o.deals_long_apply_content &&
          deals_insecure_content == o.deals_insecure_content &&
          lost_trial == o.lost_trial &&
          use_of_fincode == o.use_of_fincode &&
          site_published == o.site_published &&
          site_info == o.site_info &&
          prepaid_point == o.prepaid_point &&
          prepaid_point_info == o.prepaid_point_info &&
          provides == o.provides &&
          content_description == o.content_description &&
          product_content_info == o.product_content_info &&
          service_content_info == o.service_content_info &&
          digital_content_info == o.digital_content_info &&
          additional_info == o.additional_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shop_name, shop_name_kana, shop_name_en, support_mail, support_tel, unit_price, deals_long_apply_content, deals_insecure_content, lost_trial, use_of_fincode, site_published, site_info, prepaid_point, prepaid_point_info, provides, content_description, product_content_info, service_content_info, digital_content_info, additional_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
