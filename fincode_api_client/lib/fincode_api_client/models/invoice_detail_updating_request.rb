=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class InvoiceDetailUpdatingRequest
    # 回収困難フラグ
    attr_accessor :is_uncollectible

    # 請求書メール送信フラグ      - `0`: メールを送信しない（デフォルト）   - `1`: メールを送信する   
    attr_accessor :bill_mail_send_flag

    # 領収書メール送信フラグ      - `0`: メールを送信しない（デフォルト）   - `1`: メールを送信する   
    attr_accessor :receipt_mail_send_flag

    # 差額請求メール送信フラグ      - `0`: メールを送信しない（デフォルト）   - `1`: メールを送信する   
    attr_accessor :underpayment_mail_send_flag

    # 請求番号   指定しないまま請求書を開始した場合、自動採番されます。 
    attr_accessor :invoice_number

    # 顧客（請求先）ID
    attr_accessor :customer_id

    # 顧客（請求先）敬称
    attr_accessor :customer_honorific

    attr_accessor :customer_overwrite

    attr_accessor :issuer_overwrite

    # 発行年月日   yyyy/MM/dd形式 
    attr_accessor :issue_date

    # 取引内容
    attr_accessor :lines

    # ショップで利用可能な決済種別のリスト   利用可能にする決済種別全てを指定してください。      - `Virtualaccount`: バーチャル口座振込 - `Card`: カード決済 
    attr_accessor :pay_types

    attr_accessor :card

    attr_accessor :virtual_account

    # 加盟店自由項目1
    attr_accessor :client_field_1

    # 加盟店自由項目2
    attr_accessor :client_field_2

    # 加盟店自由項目3
    attr_accessor :client_field_3

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_uncollectible' => :'is_uncollectible',
        :'bill_mail_send_flag' => :'bill_mail_send_flag',
        :'receipt_mail_send_flag' => :'receipt_mail_send_flag',
        :'underpayment_mail_send_flag' => :'underpayment_mail_send_flag',
        :'invoice_number' => :'invoice_number',
        :'customer_id' => :'customer_id',
        :'customer_honorific' => :'customer_honorific',
        :'customer_overwrite' => :'customer_overwrite',
        :'issuer_overwrite' => :'issuer_overwrite',
        :'issue_date' => :'issue_date',
        :'lines' => :'lines',
        :'pay_types' => :'pay_types',
        :'card' => :'card',
        :'virtual_account' => :'virtual_account',
        :'client_field_1' => :'client_field_1',
        :'client_field_2' => :'client_field_2',
        :'client_field_3' => :'client_field_3'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'is_uncollectible' => :'Boolean',
        :'bill_mail_send_flag' => :'String',
        :'receipt_mail_send_flag' => :'String',
        :'underpayment_mail_send_flag' => :'String',
        :'invoice_number' => :'String',
        :'customer_id' => :'String',
        :'customer_honorific' => :'String',
        :'customer_overwrite' => :'InvoiceCreatingRequestCustomerOverwrite',
        :'issuer_overwrite' => :'InvoiceCreatingRequestIssuerOverwrite',
        :'issue_date' => :'String',
        :'lines' => :'Array<InvoiceCreatingRequestLinesInner>',
        :'pay_types' => :'Array<String>',
        :'card' => :'InvoiceCreatingRequestCard',
        :'virtual_account' => :'InvoiceDetailUpdatingRequestVirtualAccount',
        :'client_field_1' => :'String',
        :'client_field_2' => :'String',
        :'client_field_3' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::InvoiceDetailUpdatingRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::InvoiceDetailUpdatingRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'is_uncollectible')
        self.is_uncollectible = attributes[:'is_uncollectible']
      end

      if attributes.key?(:'bill_mail_send_flag')
        self.bill_mail_send_flag = attributes[:'bill_mail_send_flag']
      end

      if attributes.key?(:'receipt_mail_send_flag')
        self.receipt_mail_send_flag = attributes[:'receipt_mail_send_flag']
      end

      if attributes.key?(:'underpayment_mail_send_flag')
        self.underpayment_mail_send_flag = attributes[:'underpayment_mail_send_flag']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'customer_honorific')
        self.customer_honorific = attributes[:'customer_honorific']
      end

      if attributes.key?(:'customer_overwrite')
        self.customer_overwrite = attributes[:'customer_overwrite']
      end

      if attributes.key?(:'issuer_overwrite')
        self.issuer_overwrite = attributes[:'issuer_overwrite']
      end

      if attributes.key?(:'issue_date')
        self.issue_date = attributes[:'issue_date']
      end

      if attributes.key?(:'lines')
        if (value = attributes[:'lines']).is_a?(Array)
          self.lines = value
        end
      end

      if attributes.key?(:'pay_types')
        if (value = attributes[:'pay_types']).is_a?(Array)
          self.pay_types = value
        end
      end

      if attributes.key?(:'card')
        self.card = attributes[:'card']
      end

      if attributes.key?(:'virtual_account')
        self.virtual_account = attributes[:'virtual_account']
      end

      if attributes.key?(:'client_field_1')
        self.client_field_1 = attributes[:'client_field_1']
      end

      if attributes.key?(:'client_field_2')
        self.client_field_2 = attributes[:'client_field_2']
      end

      if attributes.key?(:'client_field_3')
        self.client_field_3 = attributes[:'client_field_3']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@invoice_number.nil? && @invoice_number.to_s.length > 30
        invalid_properties.push('invalid value for "invoice_number", the character length must be smaller than or equal to 30.')
      end

      if !@invoice_number.nil? && @invoice_number.to_s.length < 1
        invalid_properties.push('invalid value for "invoice_number", the character length must be great than or equal to 1.')
      end

      if !@customer_id.nil? && @customer_id.to_s.length > 60
        invalid_properties.push('invalid value for "customer_id", the character length must be smaller than or equal to 60.')
      end

      if !@customer_honorific.nil? && @customer_honorific.to_s.length > 20
        invalid_properties.push('invalid value for "customer_honorific", the character length must be smaller than or equal to 20.')
      end

      if !@issue_date.nil? && @issue_date.to_s.length > 10
        invalid_properties.push('invalid value for "issue_date", the character length must be smaller than or equal to 10.')
      end

      if !@issue_date.nil? && @issue_date.to_s.length < 10
        invalid_properties.push('invalid value for "issue_date", the character length must be great than or equal to 10.')
      end

      if !@client_field_1.nil? && @client_field_1.to_s.length > 100
        invalid_properties.push('invalid value for "client_field_1", the character length must be smaller than or equal to 100.')
      end

      if !@client_field_1.nil? && @client_field_1.to_s.length < 1
        invalid_properties.push('invalid value for "client_field_1", the character length must be great than or equal to 1.')
      end

      if !@client_field_2.nil? && @client_field_2.to_s.length > 100
        invalid_properties.push('invalid value for "client_field_2", the character length must be smaller than or equal to 100.')
      end

      if !@client_field_2.nil? && @client_field_2.to_s.length < 1
        invalid_properties.push('invalid value for "client_field_2", the character length must be great than or equal to 1.')
      end

      if !@client_field_3.nil? && @client_field_3.to_s.length > 100
        invalid_properties.push('invalid value for "client_field_3", the character length must be smaller than or equal to 100.')
      end

      if !@client_field_3.nil? && @client_field_3.to_s.length < 1
        invalid_properties.push('invalid value for "client_field_3", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@invoice_number.nil? && @invoice_number.to_s.length > 30
      return false if !@invoice_number.nil? && @invoice_number.to_s.length < 1
      return false if !@customer_id.nil? && @customer_id.to_s.length > 60
      return false if !@customer_honorific.nil? && @customer_honorific.to_s.length > 20
      return false if !@issue_date.nil? && @issue_date.to_s.length > 10
      return false if !@issue_date.nil? && @issue_date.to_s.length < 10
      return false if !@client_field_1.nil? && @client_field_1.to_s.length > 100
      return false if !@client_field_1.nil? && @client_field_1.to_s.length < 1
      return false if !@client_field_2.nil? && @client_field_2.to_s.length > 100
      return false if !@client_field_2.nil? && @client_field_2.to_s.length < 1
      return false if !@client_field_3.nil? && @client_field_3.to_s.length > 100
      return false if !@client_field_3.nil? && @client_field_3.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_number Value to be assigned
    def invoice_number=(invoice_number)
      if invoice_number.nil?
        fail ArgumentError, 'invoice_number cannot be nil'
      end

      if invoice_number.to_s.length > 30
        fail ArgumentError, 'invalid value for "invoice_number", the character length must be smaller than or equal to 30.'
      end

      if invoice_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "invoice_number", the character length must be great than or equal to 1.'
      end

      @invoice_number = invoice_number
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_id Value to be assigned
    def customer_id=(customer_id)
      if customer_id.nil?
        fail ArgumentError, 'customer_id cannot be nil'
      end

      if customer_id.to_s.length > 60
        fail ArgumentError, 'invalid value for "customer_id", the character length must be smaller than or equal to 60.'
      end

      @customer_id = customer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_honorific Value to be assigned
    def customer_honorific=(customer_honorific)
      if customer_honorific.nil?
        fail ArgumentError, 'customer_honorific cannot be nil'
      end

      if customer_honorific.to_s.length > 20
        fail ArgumentError, 'invalid value for "customer_honorific", the character length must be smaller than or equal to 20.'
      end

      @customer_honorific = customer_honorific
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_date Value to be assigned
    def issue_date=(issue_date)
      if issue_date.nil?
        fail ArgumentError, 'issue_date cannot be nil'
      end

      if issue_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "issue_date", the character length must be smaller than or equal to 10.'
      end

      if issue_date.to_s.length < 10
        fail ArgumentError, 'invalid value for "issue_date", the character length must be great than or equal to 10.'
      end

      @issue_date = issue_date
    end

    # Custom attribute writer method with validation
    # @param [Object] client_field_1 Value to be assigned
    def client_field_1=(client_field_1)
      if client_field_1.nil?
        fail ArgumentError, 'client_field_1 cannot be nil'
      end

      if client_field_1.to_s.length > 100
        fail ArgumentError, 'invalid value for "client_field_1", the character length must be smaller than or equal to 100.'
      end

      if client_field_1.to_s.length < 1
        fail ArgumentError, 'invalid value for "client_field_1", the character length must be great than or equal to 1.'
      end

      @client_field_1 = client_field_1
    end

    # Custom attribute writer method with validation
    # @param [Object] client_field_2 Value to be assigned
    def client_field_2=(client_field_2)
      if client_field_2.nil?
        fail ArgumentError, 'client_field_2 cannot be nil'
      end

      if client_field_2.to_s.length > 100
        fail ArgumentError, 'invalid value for "client_field_2", the character length must be smaller than or equal to 100.'
      end

      if client_field_2.to_s.length < 1
        fail ArgumentError, 'invalid value for "client_field_2", the character length must be great than or equal to 1.'
      end

      @client_field_2 = client_field_2
    end

    # Custom attribute writer method with validation
    # @param [Object] client_field_3 Value to be assigned
    def client_field_3=(client_field_3)
      if client_field_3.nil?
        fail ArgumentError, 'client_field_3 cannot be nil'
      end

      if client_field_3.to_s.length > 100
        fail ArgumentError, 'invalid value for "client_field_3", the character length must be smaller than or equal to 100.'
      end

      if client_field_3.to_s.length < 1
        fail ArgumentError, 'invalid value for "client_field_3", the character length must be great than or equal to 1.'
      end

      @client_field_3 = client_field_3
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_uncollectible == o.is_uncollectible &&
          bill_mail_send_flag == o.bill_mail_send_flag &&
          receipt_mail_send_flag == o.receipt_mail_send_flag &&
          underpayment_mail_send_flag == o.underpayment_mail_send_flag &&
          invoice_number == o.invoice_number &&
          customer_id == o.customer_id &&
          customer_honorific == o.customer_honorific &&
          customer_overwrite == o.customer_overwrite &&
          issuer_overwrite == o.issuer_overwrite &&
          issue_date == o.issue_date &&
          lines == o.lines &&
          pay_types == o.pay_types &&
          card == o.card &&
          virtual_account == o.virtual_account &&
          client_field_1 == o.client_field_1 &&
          client_field_2 == o.client_field_2 &&
          client_field_3 == o.client_field_3
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [is_uncollectible, bill_mail_send_flag, receipt_mail_send_flag, underpayment_mail_send_flag, invoice_number, customer_id, customer_honorific, customer_overwrite, issuer_overwrite, issue_date, lines, pay_types, card, virtual_account, client_field_1, client_field_2, client_field_3].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
