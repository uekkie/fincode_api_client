=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class CardRegistrationSession
    # リダイレクト型カード登録URL ID 
    attr_accessor :id

    # リダイレクト型カード登録URL\\ カード登録を行うユーザーがこのURLにアクセスし、カード情報を登録することで登録手続きが完了します。 
    attr_accessor :link_url

    # 成功時リダイレクトURL\\ `link_url`上でカード登録に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。 
    attr_accessor :success_url

    # キャンセル時リダイレクトURL\\ `link_url`上でカード登録がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。 
    attr_accessor :cancel_url

    attr_accessor :status

    # リダイレクト型カード登録URL 有効期限\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS` 
    attr_accessor :expire

    # ショップ／サービス名\\ カード登録URL上で表示されるショップおよびサービスの名称です。\\ \\ デフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。 
    attr_accessor :shop_service_name

    # カード登録メール 送信フラグ\\ リダイレクト型カード登録URLをfincodeからのメール送信機能で送信したかどうかを示します。  - `0`：送信しなかった（デフォルト） - `1`：送信した 
    attr_accessor :guide_mail_send_flag

    # カード登録メール 送信先メールアドレス\\ リダイレクト型カード登録URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。 
    attr_accessor :receiver_mail

    # カード登録メール カード登録をするユーザーの名前\\ リダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられるユーザーの名前です。\\ \\ fincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。 
    attr_accessor :mail_customer_name

    # 完了メール 送信フラグ\\ 決済が完了した際にカード登録をしたユーザーに完了メールを送信するかどうかを示します。  - `0`：送信しない（デフォルト） - `1`：送信する 
    attr_accessor :completion_mail_send_flag

    # メールテンプレートID\\ メールテンプレートIDが設定されている場合、リダイレクト型カード登録URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\\ \\ fincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。 
    attr_accessor :shop_mail_template_id

    # 顧客ID\\ カード登録URLによりカードが登録される顧客のIDです。 
    attr_accessor :customer_id

    # 顧客名 
    attr_accessor :customer_name

    attr_accessor :tds_type

    # <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 加盟店名。\\ 3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\ 未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\ \\ 形式：`{{ショップID}}-{{英数字からなる固定値}}` 
    attr_accessor :td_tenant_name

    attr_accessor :tds2_type

    # 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS` 
    attr_accessor :created

    # 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS` 
    attr_accessor :updated

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'link_url' => :'link_url',
        :'success_url' => :'success_url',
        :'cancel_url' => :'cancel_url',
        :'status' => :'status',
        :'expire' => :'expire',
        :'shop_service_name' => :'shop_service_name',
        :'guide_mail_send_flag' => :'guide_mail_send_flag',
        :'receiver_mail' => :'receiver_mail',
        :'mail_customer_name' => :'mail_customer_name',
        :'completion_mail_send_flag' => :'completion_mail_send_flag',
        :'shop_mail_template_id' => :'shop_mail_template_id',
        :'customer_id' => :'customer_id',
        :'customer_name' => :'customer_name',
        :'tds_type' => :'tds_type',
        :'td_tenant_name' => :'td_tenant_name',
        :'tds2_type' => :'tds2_type',
        :'created' => :'created',
        :'updated' => :'updated'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'link_url' => :'String',
        :'success_url' => :'String',
        :'cancel_url' => :'String',
        :'status' => :'CardRegistrationSessionStatus',
        :'expire' => :'String',
        :'shop_service_name' => :'String',
        :'guide_mail_send_flag' => :'String',
        :'receiver_mail' => :'String',
        :'mail_customer_name' => :'String',
        :'completion_mail_send_flag' => :'String',
        :'shop_mail_template_id' => :'String',
        :'customer_id' => :'String',
        :'customer_name' => :'String',
        :'tds_type' => :'TdsType',
        :'td_tenant_name' => :'String',
        :'tds2_type' => :'Tds2Type',
        :'created' => :'String',
        :'updated' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'success_url',
        :'cancel_url',
        :'shop_service_name',
        :'receiver_mail',
        :'mail_customer_name',
        :'shop_mail_template_id',
        :'customer_name',
        :'tds_type',
        :'tds2_type',
        :'updated'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::CardRegistrationSession` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::CardRegistrationSession`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'link_url')
        self.link_url = attributes[:'link_url']
      end

      if attributes.key?(:'success_url')
        self.success_url = attributes[:'success_url']
      end

      if attributes.key?(:'cancel_url')
        self.cancel_url = attributes[:'cancel_url']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'expire')
        self.expire = attributes[:'expire']
      end

      if attributes.key?(:'shop_service_name')
        self.shop_service_name = attributes[:'shop_service_name']
      end

      if attributes.key?(:'guide_mail_send_flag')
        self.guide_mail_send_flag = attributes[:'guide_mail_send_flag']
      end

      if attributes.key?(:'receiver_mail')
        self.receiver_mail = attributes[:'receiver_mail']
      end

      if attributes.key?(:'mail_customer_name')
        self.mail_customer_name = attributes[:'mail_customer_name']
      end

      if attributes.key?(:'completion_mail_send_flag')
        self.completion_mail_send_flag = attributes[:'completion_mail_send_flag']
      end

      if attributes.key?(:'shop_mail_template_id')
        self.shop_mail_template_id = attributes[:'shop_mail_template_id']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'customer_name')
        self.customer_name = attributes[:'customer_name']
      end

      if attributes.key?(:'tds_type')
        self.tds_type = attributes[:'tds_type']
      end

      if attributes.key?(:'td_tenant_name')
        self.td_tenant_name = attributes[:'td_tenant_name']
      end

      if attributes.key?(:'tds2_type')
        self.tds2_type = attributes[:'tds2_type']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@id.nil? && @id.to_s.length > 25
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 25.')
      end

      if !@id.nil? && @id.to_s.length < 1
        invalid_properties.push('invalid value for "id", the character length must be great than or equal to 1.')
      end

      if !@link_url.nil? && @link_url.to_s.length > 100
        invalid_properties.push('invalid value for "link_url", the character length must be smaller than or equal to 100.')
      end

      if !@link_url.nil? && @link_url.to_s.length < 1
        invalid_properties.push('invalid value for "link_url", the character length must be great than or equal to 1.')
      end

      if !@success_url.nil? && @success_url.to_s.length > 256
        invalid_properties.push('invalid value for "success_url", the character length must be smaller than or equal to 256.')
      end

      if !@cancel_url.nil? && @cancel_url.to_s.length > 256
        invalid_properties.push('invalid value for "cancel_url", the character length must be smaller than or equal to 256.')
      end

      if !@shop_service_name.nil? && @shop_service_name.to_s.length > 100
        invalid_properties.push('invalid value for "shop_service_name", the character length must be smaller than or equal to 100.')
      end

      if !@receiver_mail.nil? && @receiver_mail.to_s.length > 254
        invalid_properties.push('invalid value for "receiver_mail", the character length must be smaller than or equal to 254.')
      end

      if !@mail_customer_name.nil? && @mail_customer_name.to_s.length > 384
        invalid_properties.push('invalid value for "mail_customer_name", the character length must be smaller than or equal to 384.')
      end

      if !@shop_mail_template_id.nil? && @shop_mail_template_id.to_s.length > 25
        invalid_properties.push('invalid value for "shop_mail_template_id", the character length must be smaller than or equal to 25.')
      end

      if !@customer_id.nil? && @customer_id.to_s.length > 60
        invalid_properties.push('invalid value for "customer_id", the character length must be smaller than or equal to 60.')
      end

      if !@customer_id.nil? && @customer_id.to_s.length < 1
        invalid_properties.push('invalid value for "customer_id", the character length must be great than or equal to 1.')
      end

      if !@customer_name.nil? && @customer_name.to_s.length > 384
        invalid_properties.push('invalid value for "customer_name", the character length must be smaller than or equal to 384.')
      end

      if !@customer_name.nil? && @customer_name.to_s.length < 1
        invalid_properties.push('invalid value for "customer_name", the character length must be great than or equal to 1.')
      end

      if !@td_tenant_name.nil? && @td_tenant_name.to_s.length > 25
        invalid_properties.push('invalid value for "td_tenant_name", the character length must be smaller than or equal to 25.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@id.nil? && @id.to_s.length > 25
      return false if !@id.nil? && @id.to_s.length < 1
      return false if !@link_url.nil? && @link_url.to_s.length > 100
      return false if !@link_url.nil? && @link_url.to_s.length < 1
      return false if !@success_url.nil? && @success_url.to_s.length > 256
      return false if !@cancel_url.nil? && @cancel_url.to_s.length > 256
      return false if !@shop_service_name.nil? && @shop_service_name.to_s.length > 100
      guide_mail_send_flag_validator = EnumAttributeValidator.new('String', ["0", "1"])
      return false unless guide_mail_send_flag_validator.valid?(@guide_mail_send_flag)
      return false if !@receiver_mail.nil? && @receiver_mail.to_s.length > 254
      return false if !@mail_customer_name.nil? && @mail_customer_name.to_s.length > 384
      completion_mail_send_flag_validator = EnumAttributeValidator.new('String', ["0", "1"])
      return false unless completion_mail_send_flag_validator.valid?(@completion_mail_send_flag)
      return false if !@shop_mail_template_id.nil? && @shop_mail_template_id.to_s.length > 25
      return false if !@customer_id.nil? && @customer_id.to_s.length > 60
      return false if !@customer_id.nil? && @customer_id.to_s.length < 1
      return false if !@customer_name.nil? && @customer_name.to_s.length > 384
      return false if !@customer_name.nil? && @customer_name.to_s.length < 1
      return false if !@td_tenant_name.nil? && @td_tenant_name.to_s.length > 25
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id.to_s.length > 25
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 25.'
      end

      if id.to_s.length < 1
        fail ArgumentError, 'invalid value for "id", the character length must be great than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] link_url Value to be assigned
    def link_url=(link_url)
      if link_url.nil?
        fail ArgumentError, 'link_url cannot be nil'
      end

      if link_url.to_s.length > 100
        fail ArgumentError, 'invalid value for "link_url", the character length must be smaller than or equal to 100.'
      end

      if link_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "link_url", the character length must be great than or equal to 1.'
      end

      @link_url = link_url
    end

    # Custom attribute writer method with validation
    # @param [Object] success_url Value to be assigned
    def success_url=(success_url)
      if !success_url.nil? && success_url.to_s.length > 256
        fail ArgumentError, 'invalid value for "success_url", the character length must be smaller than or equal to 256.'
      end

      @success_url = success_url
    end

    # Custom attribute writer method with validation
    # @param [Object] cancel_url Value to be assigned
    def cancel_url=(cancel_url)
      if !cancel_url.nil? && cancel_url.to_s.length > 256
        fail ArgumentError, 'invalid value for "cancel_url", the character length must be smaller than or equal to 256.'
      end

      @cancel_url = cancel_url
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_service_name Value to be assigned
    def shop_service_name=(shop_service_name)
      if !shop_service_name.nil? && shop_service_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "shop_service_name", the character length must be smaller than or equal to 100.'
      end

      @shop_service_name = shop_service_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] guide_mail_send_flag Object to be assigned
    def guide_mail_send_flag=(guide_mail_send_flag)
      validator = EnumAttributeValidator.new('String', ["0", "1"])
      unless validator.valid?(guide_mail_send_flag)
        fail ArgumentError, "invalid value for \"guide_mail_send_flag\", must be one of #{validator.allowable_values}."
      end
      @guide_mail_send_flag = guide_mail_send_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] receiver_mail Value to be assigned
    def receiver_mail=(receiver_mail)
      if !receiver_mail.nil? && receiver_mail.to_s.length > 254
        fail ArgumentError, 'invalid value for "receiver_mail", the character length must be smaller than or equal to 254.'
      end

      @receiver_mail = receiver_mail
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_customer_name Value to be assigned
    def mail_customer_name=(mail_customer_name)
      if !mail_customer_name.nil? && mail_customer_name.to_s.length > 384
        fail ArgumentError, 'invalid value for "mail_customer_name", the character length must be smaller than or equal to 384.'
      end

      @mail_customer_name = mail_customer_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] completion_mail_send_flag Object to be assigned
    def completion_mail_send_flag=(completion_mail_send_flag)
      validator = EnumAttributeValidator.new('String', ["0", "1"])
      unless validator.valid?(completion_mail_send_flag)
        fail ArgumentError, "invalid value for \"completion_mail_send_flag\", must be one of #{validator.allowable_values}."
      end
      @completion_mail_send_flag = completion_mail_send_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_mail_template_id Value to be assigned
    def shop_mail_template_id=(shop_mail_template_id)
      if !shop_mail_template_id.nil? && shop_mail_template_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "shop_mail_template_id", the character length must be smaller than or equal to 25.'
      end

      @shop_mail_template_id = shop_mail_template_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_id Value to be assigned
    def customer_id=(customer_id)
      if customer_id.nil?
        fail ArgumentError, 'customer_id cannot be nil'
      end

      if customer_id.to_s.length > 60
        fail ArgumentError, 'invalid value for "customer_id", the character length must be smaller than or equal to 60.'
      end

      if customer_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_id", the character length must be great than or equal to 1.'
      end

      @customer_id = customer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_name Value to be assigned
    def customer_name=(customer_name)
      if !customer_name.nil? && customer_name.to_s.length > 384
        fail ArgumentError, 'invalid value for "customer_name", the character length must be smaller than or equal to 384.'
      end

      if !customer_name.nil? && customer_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_name", the character length must be great than or equal to 1.'
      end

      @customer_name = customer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] td_tenant_name Value to be assigned
    def td_tenant_name=(td_tenant_name)
      if td_tenant_name.nil?
        fail ArgumentError, 'td_tenant_name cannot be nil'
      end

      if td_tenant_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "td_tenant_name", the character length must be smaller than or equal to 25.'
      end

      @td_tenant_name = td_tenant_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          link_url == o.link_url &&
          success_url == o.success_url &&
          cancel_url == o.cancel_url &&
          status == o.status &&
          expire == o.expire &&
          shop_service_name == o.shop_service_name &&
          guide_mail_send_flag == o.guide_mail_send_flag &&
          receiver_mail == o.receiver_mail &&
          mail_customer_name == o.mail_customer_name &&
          completion_mail_send_flag == o.completion_mail_send_flag &&
          shop_mail_template_id == o.shop_mail_template_id &&
          customer_id == o.customer_id &&
          customer_name == o.customer_name &&
          tds_type == o.tds_type &&
          td_tenant_name == o.td_tenant_name &&
          tds2_type == o.tds2_type &&
          created == o.created &&
          updated == o.updated
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, link_url, success_url, cancel_url, status, expire, shop_service_name, guide_mail_send_flag, receiver_mail, mail_customer_name, completion_mail_send_flag, shop_mail_template_id, customer_id, customer_name, tds_type, td_tenant_name, tds2_type, created, updated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
