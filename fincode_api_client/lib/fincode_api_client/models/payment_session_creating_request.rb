=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class PaymentSessionCreatingRequest
    attr_accessor :transaction

    attr_accessor :card

    attr_accessor :konbini

    attr_accessor :paypay

    attr_accessor :virtualaccount

    # 成功時リダイレクトURL\\ `link_url`上で決済に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。 
    attr_accessor :success_url

    # キャンセル時リダイレクトURL\\ `link_url`上で決済がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。 
    attr_accessor :cancel_url

    # リダイレクト型決済URL 有効期限\\ 形式： `yyyy/MM/dd HH:mm:ss`  - デフォルト： URL発行時点から24時間 - 最長： 30日 - 最短： 5分 
    attr_accessor :expire

    # ショップ／サービス名\\ 決済URL上で表示されるショップおよびサービスの名称です。\\ \\ デフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。 
    attr_accessor :shop_service_name

    # 決済メール 送信フラグ\\ リダイレクト型決済URLを添付したメールをfincodeから送信するかどうかを指定します。  - `0`：送信しない（デフォルト） - `1`：送信する 
    attr_accessor :guide_mail_send_flag

    # 決済メール 送信先メールアドレス\\ リダイレクト型決済URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。 
    attr_accessor :receiver_mail

    # 購入メール 購入者の名前\\ リダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられる購入者の名前です。\\ \\ fincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。 
    attr_accessor :mail_customer_name

    attr_accessor :thanks_mail_send_flag

    # メールテンプレートID\\ メールテンプレートIDが設定されている場合、リダイレクト型決済URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\\ \\ fincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。 
    attr_accessor :shop_mail_template_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction' => :'transaction',
        :'card' => :'card',
        :'konbini' => :'konbini',
        :'paypay' => :'paypay',
        :'virtualaccount' => :'virtualaccount',
        :'success_url' => :'success_url',
        :'cancel_url' => :'cancel_url',
        :'expire' => :'expire',
        :'shop_service_name' => :'shop_service_name',
        :'guide_mail_send_flag' => :'guide_mail_send_flag',
        :'receiver_mail' => :'receiver_mail',
        :'mail_customer_name' => :'mail_customer_name',
        :'thanks_mail_send_flag' => :'thanks_mail_send_flag',
        :'shop_mail_template_id' => :'shop_mail_template_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction' => :'PaymentSessionCreatingRequestTransaction',
        :'card' => :'PaymentSessionCreatingRequestCard',
        :'konbini' => :'PaymentSessionCreatingRequestKonbini',
        :'paypay' => :'PaymentSessionCreatingRequestPaypay',
        :'virtualaccount' => :'PaymentSessionCreatingRequestVirtualaccount',
        :'success_url' => :'String',
        :'cancel_url' => :'String',
        :'expire' => :'String',
        :'shop_service_name' => :'String',
        :'guide_mail_send_flag' => :'GuideMailSendFlag',
        :'receiver_mail' => :'String',
        :'mail_customer_name' => :'String',
        :'thanks_mail_send_flag' => :'ThanksMailSendFlag',
        :'shop_mail_template_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'card',
        :'konbini',
        :'paypay',
        :'virtualaccount',
        :'success_url',
        :'cancel_url',
        :'expire',
        :'shop_service_name',
        :'guide_mail_send_flag',
        :'receiver_mail',
        :'mail_customer_name',
        :'thanks_mail_send_flag',
        :'shop_mail_template_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::PaymentSessionCreatingRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::PaymentSessionCreatingRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transaction')
        self.transaction = attributes[:'transaction']
      else
        self.transaction = nil
      end

      if attributes.key?(:'card')
        self.card = attributes[:'card']
      end

      if attributes.key?(:'konbini')
        self.konbini = attributes[:'konbini']
      end

      if attributes.key?(:'paypay')
        self.paypay = attributes[:'paypay']
      end

      if attributes.key?(:'virtualaccount')
        self.virtualaccount = attributes[:'virtualaccount']
      end

      if attributes.key?(:'success_url')
        self.success_url = attributes[:'success_url']
      end

      if attributes.key?(:'cancel_url')
        self.cancel_url = attributes[:'cancel_url']
      end

      if attributes.key?(:'expire')
        self.expire = attributes[:'expire']
      end

      if attributes.key?(:'shop_service_name')
        self.shop_service_name = attributes[:'shop_service_name']
      end

      if attributes.key?(:'guide_mail_send_flag')
        self.guide_mail_send_flag = attributes[:'guide_mail_send_flag']
      end

      if attributes.key?(:'receiver_mail')
        self.receiver_mail = attributes[:'receiver_mail']
      end

      if attributes.key?(:'mail_customer_name')
        self.mail_customer_name = attributes[:'mail_customer_name']
      end

      if attributes.key?(:'thanks_mail_send_flag')
        self.thanks_mail_send_flag = attributes[:'thanks_mail_send_flag']
      end

      if attributes.key?(:'shop_mail_template_id')
        self.shop_mail_template_id = attributes[:'shop_mail_template_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @transaction.nil?
        invalid_properties.push('invalid value for "transaction", transaction cannot be nil.')
      end

      if !@success_url.nil? && @success_url.to_s.length > 256
        invalid_properties.push('invalid value for "success_url", the character length must be smaller than or equal to 256.')
      end

      if !@cancel_url.nil? && @cancel_url.to_s.length > 256
        invalid_properties.push('invalid value for "cancel_url", the character length must be smaller than or equal to 256.')
      end

      if !@shop_service_name.nil? && @shop_service_name.to_s.length > 100
        invalid_properties.push('invalid value for "shop_service_name", the character length must be smaller than or equal to 100.')
      end

      if !@receiver_mail.nil? && @receiver_mail.to_s.length > 254
        invalid_properties.push('invalid value for "receiver_mail", the character length must be smaller than or equal to 254.')
      end

      if !@mail_customer_name.nil? && @mail_customer_name.to_s.length > 384
        invalid_properties.push('invalid value for "mail_customer_name", the character length must be smaller than or equal to 384.')
      end

      if !@shop_mail_template_id.nil? && @shop_mail_template_id.to_s.length > 25
        invalid_properties.push('invalid value for "shop_mail_template_id", the character length must be smaller than or equal to 25.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @transaction.nil?
      return false if !@success_url.nil? && @success_url.to_s.length > 256
      return false if !@cancel_url.nil? && @cancel_url.to_s.length > 256
      return false if !@shop_service_name.nil? && @shop_service_name.to_s.length > 100
      return false if !@receiver_mail.nil? && @receiver_mail.to_s.length > 254
      return false if !@mail_customer_name.nil? && @mail_customer_name.to_s.length > 384
      return false if !@shop_mail_template_id.nil? && @shop_mail_template_id.to_s.length > 25
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] success_url Value to be assigned
    def success_url=(success_url)
      if !success_url.nil? && success_url.to_s.length > 256
        fail ArgumentError, 'invalid value for "success_url", the character length must be smaller than or equal to 256.'
      end

      @success_url = success_url
    end

    # Custom attribute writer method with validation
    # @param [Object] cancel_url Value to be assigned
    def cancel_url=(cancel_url)
      if !cancel_url.nil? && cancel_url.to_s.length > 256
        fail ArgumentError, 'invalid value for "cancel_url", the character length must be smaller than or equal to 256.'
      end

      @cancel_url = cancel_url
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_service_name Value to be assigned
    def shop_service_name=(shop_service_name)
      if !shop_service_name.nil? && shop_service_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "shop_service_name", the character length must be smaller than or equal to 100.'
      end

      @shop_service_name = shop_service_name
    end

    # Custom attribute writer method with validation
    # @param [Object] receiver_mail Value to be assigned
    def receiver_mail=(receiver_mail)
      if !receiver_mail.nil? && receiver_mail.to_s.length > 254
        fail ArgumentError, 'invalid value for "receiver_mail", the character length must be smaller than or equal to 254.'
      end

      @receiver_mail = receiver_mail
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_customer_name Value to be assigned
    def mail_customer_name=(mail_customer_name)
      if !mail_customer_name.nil? && mail_customer_name.to_s.length > 384
        fail ArgumentError, 'invalid value for "mail_customer_name", the character length must be smaller than or equal to 384.'
      end

      @mail_customer_name = mail_customer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_mail_template_id Value to be assigned
    def shop_mail_template_id=(shop_mail_template_id)
      if !shop_mail_template_id.nil? && shop_mail_template_id.to_s.length > 25
        fail ArgumentError, 'invalid value for "shop_mail_template_id", the character length must be smaller than or equal to 25.'
      end

      @shop_mail_template_id = shop_mail_template_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction == o.transaction &&
          card == o.card &&
          konbini == o.konbini &&
          paypay == o.paypay &&
          virtualaccount == o.virtualaccount &&
          success_url == o.success_url &&
          cancel_url == o.cancel_url &&
          expire == o.expire &&
          shop_service_name == o.shop_service_name &&
          guide_mail_send_flag == o.guide_mail_send_flag &&
          receiver_mail == o.receiver_mail &&
          mail_customer_name == o.mail_customer_name &&
          thanks_mail_send_flag == o.thanks_mail_send_flag &&
          shop_mail_template_id == o.shop_mail_template_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction, card, konbini, paypay, virtualaccount, success_url, cancel_url, expire, shop_service_name, guide_mail_send_flag, receiver_mail, mail_customer_name, thanks_mail_send_flag, shop_mail_template_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
