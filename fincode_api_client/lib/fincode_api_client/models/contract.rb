=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class Contract
    # ショップID（テナント） 
    attr_accessor :shop_id

    # プラットフォームID 
    attr_accessor :platform_id

    attr_accessor :shop_type

    attr_accessor :status_code

    # 審査情報\\ \\ 決済事業者ごとの審査状況を配列に格納しています。\\ ある決済手段について審査が開始されていない場合、その決済手段に対応する`examination_master_id`をもつオブジェクトは配列中に存在しません。 
    attr_accessor :examination

    # 利用可能モード  - 201: テスト環境のみ利用可能 - 202: 本番環境利用可能 
    attr_accessor :available_status_code

    # ショップを作成したユーザーの登録日  形式：`yyyy/MM/dd` 
    attr_accessor :create_date

    # 本番環境申請日  形式：`yyyy/MM/dd` 
    attr_accessor :contracted_at

    # 初回登録完了日  形式：`yyyy/MM/dd` 
    attr_accessor :start_charging_at

    # 解約日  形式：`yyyy/MM/dd` 
    attr_accessor :expired_at

    # 売上入金 可否ステータス  - `501`: 入金に必要な手続きが未完了 - `502`: 入金可能 - `503`: 入金保留 
    attr_accessor :sales_deposit_status_code

    # 売上入金 可否ステータス 更新日  形式：`yyyy/MM/dd` 
    attr_accessor :sales_deposit_status_updated_date

    # 契約不成立日  形式：`yyyy/MM/dd` 
    attr_accessor :denied_at

    # 請求停止フラグ 
    attr_accessor :suspended_billing

    # 請求停止フラグ 更新日  形式：`yyyy/MM/dd` 
    attr_accessor :suspended_billing_date

    # 入金停止フラグ 
    attr_accessor :suspended_payment

    # 入金停止フラグ 更新日  形式：`yyyy/MM/dd` 
    attr_accessor :suspended_payment_date

    # サービス停止フラグ 
    attr_accessor :suspended_service

    # サービス停止フラグ 更新日  形式：`yyyy/MM/dd` 
    attr_accessor :suspended_service_date

    # 即時利用停止フラグ 
    attr_accessor :suspeded_immediate_use

    # 即時利用停止フラグ 更新日  形式：`yyyy/MM/dd` 
    attr_accessor :suspended_immediate_use_date

    # 停止・解約 備考 
    attr_accessor :stop_cancelaltion_memo

    # 特記事項（債権債務） 
    attr_accessor :obligations_notice

    # ショップ名（ユーザー用） 
    attr_accessor :user_shop_name

    # 登録メールアドレス 
    attr_accessor :register_mail

    # プラットフォームの代表ショップか  - true: 代表ショップ - false: 代表ショップではない 
    attr_accessor :platform_reprentative_shop

    attr_accessor :shared_customer_flag

    attr_accessor :contract_detail

    # 入金先口座 
    attr_accessor :contract_bank_account

    # バーチャル口座情報\\ \\ このショップに関してfincodeへの支払いが売上入金額を上回った場合、この口座に所定の期日までに入金を行う必要があります。 
    attr_accessor :contract_virtual_bank

    # カード決済 仕向け先のリスト 
    attr_accessor :contract_card_destination

    # カード決済 設定\\ \\ 3Dセキュアが有効かどうか・審査の結果、3Dセキュアの利用が必須となったかどうか・分割払い／リボ払い利用ができるかどうかなどの情報が含まれます。 
    attr_accessor :credit_card_setting

    # 登記簿上の法人情報 
    attr_accessor :official_registered_corporate_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shop_id' => :'shop_id',
        :'platform_id' => :'platform_id',
        :'shop_type' => :'shop_type',
        :'status_code' => :'status_code',
        :'examination' => :'examination',
        :'available_status_code' => :'available_status_code',
        :'create_date' => :'create_date',
        :'contracted_at' => :'contracted_at',
        :'start_charging_at' => :'start_charging_at',
        :'expired_at' => :'expired_at',
        :'sales_deposit_status_code' => :'sales_deposit_status_code',
        :'sales_deposit_status_updated_date' => :'sales_deposit_status_updated_date',
        :'denied_at' => :'denied_at',
        :'suspended_billing' => :'suspended_billing',
        :'suspended_billing_date' => :'suspended_billing_date',
        :'suspended_payment' => :'suspended_payment',
        :'suspended_payment_date' => :'suspended_payment_date',
        :'suspended_service' => :'suspended_service',
        :'suspended_service_date' => :'suspended_service_date',
        :'suspeded_immediate_use' => :'suspeded_immediate_use',
        :'suspended_immediate_use_date' => :'suspended_immediate_use_date',
        :'stop_cancelaltion_memo' => :'stop_cancelaltion_memo',
        :'obligations_notice' => :'obligations_notice',
        :'user_shop_name' => :'user_shop_name',
        :'register_mail' => :'register_mail',
        :'platform_reprentative_shop' => :'platform_reprentative_shop',
        :'shared_customer_flag' => :'shared_customer_flag',
        :'contract_detail' => :'contract_detail',
        :'contract_bank_account' => :'contract_bank_account',
        :'contract_virtual_bank' => :'contract_virtual_bank',
        :'contract_card_destination' => :'contract_card_destination',
        :'credit_card_setting' => :'credit_card_setting',
        :'official_registered_corporate_info' => :'official_registered_corporate_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shop_id' => :'String',
        :'platform_id' => :'String',
        :'shop_type' => :'ShopType',
        :'status_code' => :'ContractStatus',
        :'examination' => :'Array<Examination>',
        :'available_status_code' => :'Integer',
        :'create_date' => :'String',
        :'contracted_at' => :'String',
        :'start_charging_at' => :'String',
        :'expired_at' => :'String',
        :'sales_deposit_status_code' => :'Integer',
        :'sales_deposit_status_updated_date' => :'String',
        :'denied_at' => :'String',
        :'suspended_billing' => :'Boolean',
        :'suspended_billing_date' => :'String',
        :'suspended_payment' => :'Boolean',
        :'suspended_payment_date' => :'String',
        :'suspended_service' => :'Boolean',
        :'suspended_service_date' => :'String',
        :'suspeded_immediate_use' => :'Boolean',
        :'suspended_immediate_use_date' => :'String',
        :'stop_cancelaltion_memo' => :'String',
        :'obligations_notice' => :'String',
        :'user_shop_name' => :'String',
        :'register_mail' => :'String',
        :'platform_reprentative_shop' => :'Boolean',
        :'shared_customer_flag' => :'SharedCustomerFlag',
        :'contract_detail' => :'ContractContractDetail',
        :'contract_bank_account' => :'ContractBankAccountInfo',
        :'contract_virtual_bank' => :'ContractBankAccountInfo',
        :'contract_card_destination' => :'Array<CardDestination>',
        :'credit_card_setting' => :'CardPaymentSetting',
        :'official_registered_corporate_info' => :'RegistryCorporateInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'shop_type',
        :'contracted_at',
        :'start_charging_at',
        :'expired_at',
        :'sales_deposit_status_code',
        :'sales_deposit_status_updated_date',
        :'denied_at',
        :'suspended_billing',
        :'suspended_billing_date',
        :'suspended_payment',
        :'suspended_payment_date',
        :'suspended_service',
        :'suspended_service_date',
        :'suspeded_immediate_use',
        :'suspended_immediate_use_date',
        :'stop_cancelaltion_memo',
        :'obligations_notice',
        :'user_shop_name',
        :'register_mail',
        :'platform_reprentative_shop',
        :'shared_customer_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::Contract` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::Contract`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shop_id')
        self.shop_id = attributes[:'shop_id']
      end

      if attributes.key?(:'platform_id')
        self.platform_id = attributes[:'platform_id']
      end

      if attributes.key?(:'shop_type')
        self.shop_type = attributes[:'shop_type']
      end

      if attributes.key?(:'status_code')
        self.status_code = attributes[:'status_code']
      end

      if attributes.key?(:'examination')
        if (value = attributes[:'examination']).is_a?(Array)
          self.examination = value
        end
      end

      if attributes.key?(:'available_status_code')
        self.available_status_code = attributes[:'available_status_code']
      end

      if attributes.key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.key?(:'contracted_at')
        self.contracted_at = attributes[:'contracted_at']
      end

      if attributes.key?(:'start_charging_at')
        self.start_charging_at = attributes[:'start_charging_at']
      end

      if attributes.key?(:'expired_at')
        self.expired_at = attributes[:'expired_at']
      end

      if attributes.key?(:'sales_deposit_status_code')
        self.sales_deposit_status_code = attributes[:'sales_deposit_status_code']
      end

      if attributes.key?(:'sales_deposit_status_updated_date')
        self.sales_deposit_status_updated_date = attributes[:'sales_deposit_status_updated_date']
      end

      if attributes.key?(:'denied_at')
        self.denied_at = attributes[:'denied_at']
      end

      if attributes.key?(:'suspended_billing')
        self.suspended_billing = attributes[:'suspended_billing']
      end

      if attributes.key?(:'suspended_billing_date')
        self.suspended_billing_date = attributes[:'suspended_billing_date']
      end

      if attributes.key?(:'suspended_payment')
        self.suspended_payment = attributes[:'suspended_payment']
      end

      if attributes.key?(:'suspended_payment_date')
        self.suspended_payment_date = attributes[:'suspended_payment_date']
      end

      if attributes.key?(:'suspended_service')
        self.suspended_service = attributes[:'suspended_service']
      end

      if attributes.key?(:'suspended_service_date')
        self.suspended_service_date = attributes[:'suspended_service_date']
      end

      if attributes.key?(:'suspeded_immediate_use')
        self.suspeded_immediate_use = attributes[:'suspeded_immediate_use']
      end

      if attributes.key?(:'suspended_immediate_use_date')
        self.suspended_immediate_use_date = attributes[:'suspended_immediate_use_date']
      end

      if attributes.key?(:'stop_cancelaltion_memo')
        self.stop_cancelaltion_memo = attributes[:'stop_cancelaltion_memo']
      end

      if attributes.key?(:'obligations_notice')
        self.obligations_notice = attributes[:'obligations_notice']
      end

      if attributes.key?(:'user_shop_name')
        self.user_shop_name = attributes[:'user_shop_name']
      end

      if attributes.key?(:'register_mail')
        self.register_mail = attributes[:'register_mail']
      end

      if attributes.key?(:'platform_reprentative_shop')
        self.platform_reprentative_shop = attributes[:'platform_reprentative_shop']
      end

      if attributes.key?(:'shared_customer_flag')
        self.shared_customer_flag = attributes[:'shared_customer_flag']
      end

      if attributes.key?(:'contract_detail')
        self.contract_detail = attributes[:'contract_detail']
      end

      if attributes.key?(:'contract_bank_account')
        self.contract_bank_account = attributes[:'contract_bank_account']
      end

      if attributes.key?(:'contract_virtual_bank')
        self.contract_virtual_bank = attributes[:'contract_virtual_bank']
      end

      if attributes.key?(:'contract_card_destination')
        if (value = attributes[:'contract_card_destination']).is_a?(Array)
          self.contract_card_destination = value
        end
      end

      if attributes.key?(:'credit_card_setting')
        self.credit_card_setting = attributes[:'credit_card_setting']
      end

      if attributes.key?(:'official_registered_corporate_info')
        self.official_registered_corporate_info = attributes[:'official_registered_corporate_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@shop_id.nil? && @shop_id.to_s.length > 13
        invalid_properties.push('invalid value for "shop_id", the character length must be smaller than or equal to 13.')
      end

      if !@shop_id.nil? && @shop_id.to_s.length < 13
        invalid_properties.push('invalid value for "shop_id", the character length must be great than or equal to 13.')
      end

      if !@platform_id.nil? && @platform_id.to_s.length > 13
        invalid_properties.push('invalid value for "platform_id", the character length must be smaller than or equal to 13.')
      end

      if !@platform_id.nil? && @platform_id.to_s.length < 13
        invalid_properties.push('invalid value for "platform_id", the character length must be great than or equal to 13.')
      end

      if !@stop_cancelaltion_memo.nil? && @stop_cancelaltion_memo.to_s.length > 5000
        invalid_properties.push('invalid value for "stop_cancelaltion_memo", the character length must be smaller than or equal to 5000.')
      end

      if !@stop_cancelaltion_memo.nil? && @stop_cancelaltion_memo.to_s.length < 1
        invalid_properties.push('invalid value for "stop_cancelaltion_memo", the character length must be great than or equal to 1.')
      end

      if !@obligations_notice.nil? && @obligations_notice.to_s.length > 5000
        invalid_properties.push('invalid value for "obligations_notice", the character length must be smaller than or equal to 5000.')
      end

      if !@obligations_notice.nil? && @obligations_notice.to_s.length < 1
        invalid_properties.push('invalid value for "obligations_notice", the character length must be great than or equal to 1.')
      end

      if !@user_shop_name.nil? && @user_shop_name.to_s.length > 50
        invalid_properties.push('invalid value for "user_shop_name", the character length must be smaller than or equal to 50.')
      end

      if !@user_shop_name.nil? && @user_shop_name.to_s.length < 1
        invalid_properties.push('invalid value for "user_shop_name", the character length must be great than or equal to 1.')
      end

      if !@register_mail.nil? && @register_mail.to_s.length > 384
        invalid_properties.push('invalid value for "register_mail", the character length must be smaller than or equal to 384.')
      end

      if !@register_mail.nil? && @register_mail.to_s.length < 1
        invalid_properties.push('invalid value for "register_mail", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@shop_id.nil? && @shop_id.to_s.length > 13
      return false if !@shop_id.nil? && @shop_id.to_s.length < 13
      return false if !@platform_id.nil? && @platform_id.to_s.length > 13
      return false if !@platform_id.nil? && @platform_id.to_s.length < 13
      available_status_code_validator = EnumAttributeValidator.new('Integer', [201, 202])
      return false unless available_status_code_validator.valid?(@available_status_code)
      sales_deposit_status_code_validator = EnumAttributeValidator.new('Integer', [501, 502, 503])
      return false unless sales_deposit_status_code_validator.valid?(@sales_deposit_status_code)
      return false if !@stop_cancelaltion_memo.nil? && @stop_cancelaltion_memo.to_s.length > 5000
      return false if !@stop_cancelaltion_memo.nil? && @stop_cancelaltion_memo.to_s.length < 1
      return false if !@obligations_notice.nil? && @obligations_notice.to_s.length > 5000
      return false if !@obligations_notice.nil? && @obligations_notice.to_s.length < 1
      return false if !@user_shop_name.nil? && @user_shop_name.to_s.length > 50
      return false if !@user_shop_name.nil? && @user_shop_name.to_s.length < 1
      return false if !@register_mail.nil? && @register_mail.to_s.length > 384
      return false if !@register_mail.nil? && @register_mail.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_id Value to be assigned
    def shop_id=(shop_id)
      if shop_id.nil?
        fail ArgumentError, 'shop_id cannot be nil'
      end

      if shop_id.to_s.length > 13
        fail ArgumentError, 'invalid value for "shop_id", the character length must be smaller than or equal to 13.'
      end

      if shop_id.to_s.length < 13
        fail ArgumentError, 'invalid value for "shop_id", the character length must be great than or equal to 13.'
      end

      @shop_id = shop_id
    end

    # Custom attribute writer method with validation
    # @param [Object] platform_id Value to be assigned
    def platform_id=(platform_id)
      if platform_id.nil?
        fail ArgumentError, 'platform_id cannot be nil'
      end

      if platform_id.to_s.length > 13
        fail ArgumentError, 'invalid value for "platform_id", the character length must be smaller than or equal to 13.'
      end

      if platform_id.to_s.length < 13
        fail ArgumentError, 'invalid value for "platform_id", the character length must be great than or equal to 13.'
      end

      @platform_id = platform_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available_status_code Object to be assigned
    def available_status_code=(available_status_code)
      validator = EnumAttributeValidator.new('Integer', [201, 202])
      unless validator.valid?(available_status_code)
        fail ArgumentError, "invalid value for \"available_status_code\", must be one of #{validator.allowable_values}."
      end
      @available_status_code = available_status_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sales_deposit_status_code Object to be assigned
    def sales_deposit_status_code=(sales_deposit_status_code)
      validator = EnumAttributeValidator.new('Integer', [501, 502, 503])
      unless validator.valid?(sales_deposit_status_code)
        fail ArgumentError, "invalid value for \"sales_deposit_status_code\", must be one of #{validator.allowable_values}."
      end
      @sales_deposit_status_code = sales_deposit_status_code
    end

    # Custom attribute writer method with validation
    # @param [Object] stop_cancelaltion_memo Value to be assigned
    def stop_cancelaltion_memo=(stop_cancelaltion_memo)
      if !stop_cancelaltion_memo.nil? && stop_cancelaltion_memo.to_s.length > 5000
        fail ArgumentError, 'invalid value for "stop_cancelaltion_memo", the character length must be smaller than or equal to 5000.'
      end

      if !stop_cancelaltion_memo.nil? && stop_cancelaltion_memo.to_s.length < 1
        fail ArgumentError, 'invalid value for "stop_cancelaltion_memo", the character length must be great than or equal to 1.'
      end

      @stop_cancelaltion_memo = stop_cancelaltion_memo
    end

    # Custom attribute writer method with validation
    # @param [Object] obligations_notice Value to be assigned
    def obligations_notice=(obligations_notice)
      if !obligations_notice.nil? && obligations_notice.to_s.length > 5000
        fail ArgumentError, 'invalid value for "obligations_notice", the character length must be smaller than or equal to 5000.'
      end

      if !obligations_notice.nil? && obligations_notice.to_s.length < 1
        fail ArgumentError, 'invalid value for "obligations_notice", the character length must be great than or equal to 1.'
      end

      @obligations_notice = obligations_notice
    end

    # Custom attribute writer method with validation
    # @param [Object] user_shop_name Value to be assigned
    def user_shop_name=(user_shop_name)
      if !user_shop_name.nil? && user_shop_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "user_shop_name", the character length must be smaller than or equal to 50.'
      end

      if !user_shop_name.nil? && user_shop_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_shop_name", the character length must be great than or equal to 1.'
      end

      @user_shop_name = user_shop_name
    end

    # Custom attribute writer method with validation
    # @param [Object] register_mail Value to be assigned
    def register_mail=(register_mail)
      if !register_mail.nil? && register_mail.to_s.length > 384
        fail ArgumentError, 'invalid value for "register_mail", the character length must be smaller than or equal to 384.'
      end

      if !register_mail.nil? && register_mail.to_s.length < 1
        fail ArgumentError, 'invalid value for "register_mail", the character length must be great than or equal to 1.'
      end

      @register_mail = register_mail
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shop_id == o.shop_id &&
          platform_id == o.platform_id &&
          shop_type == o.shop_type &&
          status_code == o.status_code &&
          examination == o.examination &&
          available_status_code == o.available_status_code &&
          create_date == o.create_date &&
          contracted_at == o.contracted_at &&
          start_charging_at == o.start_charging_at &&
          expired_at == o.expired_at &&
          sales_deposit_status_code == o.sales_deposit_status_code &&
          sales_deposit_status_updated_date == o.sales_deposit_status_updated_date &&
          denied_at == o.denied_at &&
          suspended_billing == o.suspended_billing &&
          suspended_billing_date == o.suspended_billing_date &&
          suspended_payment == o.suspended_payment &&
          suspended_payment_date == o.suspended_payment_date &&
          suspended_service == o.suspended_service &&
          suspended_service_date == o.suspended_service_date &&
          suspeded_immediate_use == o.suspeded_immediate_use &&
          suspended_immediate_use_date == o.suspended_immediate_use_date &&
          stop_cancelaltion_memo == o.stop_cancelaltion_memo &&
          obligations_notice == o.obligations_notice &&
          user_shop_name == o.user_shop_name &&
          register_mail == o.register_mail &&
          platform_reprentative_shop == o.platform_reprentative_shop &&
          shared_customer_flag == o.shared_customer_flag &&
          contract_detail == o.contract_detail &&
          contract_bank_account == o.contract_bank_account &&
          contract_virtual_bank == o.contract_virtual_bank &&
          contract_card_destination == o.contract_card_destination &&
          credit_card_setting == o.credit_card_setting &&
          official_registered_corporate_info == o.official_registered_corporate_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shop_id, platform_id, shop_type, status_code, examination, available_status_code, create_date, contracted_at, start_charging_at, expired_at, sales_deposit_status_code, sales_deposit_status_updated_date, denied_at, suspended_billing, suspended_billing_date, suspended_payment, suspended_payment_date, suspended_service, suspended_service_date, suspeded_immediate_use, suspended_immediate_use_date, stop_cancelaltion_memo, obligations_notice, user_shop_name, register_mail, platform_reprentative_shop, shared_customer_flag, contract_detail, contract_bank_account, contract_virtual_bank, contract_card_destination, credit_card_setting, official_registered_corporate_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
