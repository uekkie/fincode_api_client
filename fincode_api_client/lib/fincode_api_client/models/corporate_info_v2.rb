=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class CorporateInfoV2
    # 法人番号 
    attr_accessor :corporate_number

    # 法人名 
    attr_accessor :corporate_name

    # 法人名（カナ） 
    attr_accessor :corporate_name_kana

    # 企業サイトURL 
    attr_accessor :hp

    # 資本金 
    attr_accessor :capital

    # 設立日 
    attr_accessor :established_at

    # 年商 
    attr_accessor :yearly_sales

    # 事業内容 
    attr_accessor :business_details

    # 会社住所 郵便番号\\ 形式： 半角数字（ハイフンあり） 
    attr_accessor :company_postal_code

    # 会社住所 都道府県\\ 形式： 漢字 
    attr_accessor :company_prefecture

    # 会社住所 都道府県（カナ）\\ 形式： 全角カタカナ 
    attr_accessor :company_prefecture_kana

    # 会社住所 市区町村\\ 形式： 漢字/ひらがな/カタカナ/半角英数 
    attr_accessor :company_address_municipality

    # 会社住所 市区町村（カナ）\\ 形式： 全角カタカナ 
    attr_accessor :company_address_municipality_kana

    # 会社住所 町域\\ 形式： 漢字/ひらがな/カタカナ/半角英数 
    attr_accessor :company_address_section

    # 会社住所 町域（カナ）\\ 形式： 全角カタカナ 
    attr_accessor :company_address_section_kana

    # 会社住所 番地\\ 形式： 漢字/ひらがな/カタカナ/半角英数 
    attr_accessor :company_address_chrome

    # 会社住所 番地（カナ）\\ 形式： 全角カタカナ 
    attr_accessor :company_address_chrome_kana

    # 会社住所 ビル名\\ 形式： 漢字/ひらがな/カタカナ/半角英数 
    attr_accessor :company_address_building_name

    # 会社住所 ビル名（カナ）\\ 形式： 全角カタカナ 
    attr_accessor :company_address_building_name_kana

    # 会社情報 電話番号\\ 形式： 半角数字（ハイフンなし） 
    attr_accessor :company_tel

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'corporate_number' => :'corporate_number',
        :'corporate_name' => :'corporate_name',
        :'corporate_name_kana' => :'corporate_name_kana',
        :'hp' => :'hp',
        :'capital' => :'capital',
        :'established_at' => :'established_at',
        :'yearly_sales' => :'yearly_sales',
        :'business_details' => :'business_details',
        :'company_postal_code' => :'company_postal_code',
        :'company_prefecture' => :'company_prefecture',
        :'company_prefecture_kana' => :'company_prefecture_kana',
        :'company_address_municipality' => :'company_address_municipality',
        :'company_address_municipality_kana' => :'company_address_municipality_kana',
        :'company_address_section' => :'company_address_section',
        :'company_address_section_kana' => :'company_address_section_kana',
        :'company_address_chrome' => :'company_address_chrome',
        :'company_address_chrome_kana' => :'company_address_chrome_kana',
        :'company_address_building_name' => :'company_address_building_name',
        :'company_address_building_name_kana' => :'company_address_building_name_kana',
        :'company_tel' => :'company_tel'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'corporate_number' => :'String',
        :'corporate_name' => :'String',
        :'corporate_name_kana' => :'String',
        :'hp' => :'String',
        :'capital' => :'Float',
        :'established_at' => :'String',
        :'yearly_sales' => :'Float',
        :'business_details' => :'String',
        :'company_postal_code' => :'String',
        :'company_prefecture' => :'String',
        :'company_prefecture_kana' => :'String',
        :'company_address_municipality' => :'String',
        :'company_address_municipality_kana' => :'String',
        :'company_address_section' => :'String',
        :'company_address_section_kana' => :'String',
        :'company_address_chrome' => :'String',
        :'company_address_chrome_kana' => :'String',
        :'company_address_building_name' => :'String',
        :'company_address_building_name_kana' => :'String',
        :'company_tel' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'corporate_number',
        :'hp',
        :'capital',
        :'established_at',
        :'yearly_sales',
        :'business_details',
        :'company_postal_code',
        :'company_prefecture',
        :'company_prefecture_kana',
        :'company_address_municipality',
        :'company_address_municipality_kana',
        :'company_address_section',
        :'company_address_section_kana',
        :'company_address_chrome',
        :'company_address_chrome_kana',
        :'company_address_building_name',
        :'company_address_building_name_kana',
        :'company_tel'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::CorporateInfoV2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::CorporateInfoV2`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'corporate_number')
        self.corporate_number = attributes[:'corporate_number']
      else
        self.corporate_number = nil
      end

      if attributes.key?(:'corporate_name')
        self.corporate_name = attributes[:'corporate_name']
      else
        self.corporate_name = nil
      end

      if attributes.key?(:'corporate_name_kana')
        self.corporate_name_kana = attributes[:'corporate_name_kana']
      else
        self.corporate_name_kana = nil
      end

      if attributes.key?(:'hp')
        self.hp = attributes[:'hp']
      end

      if attributes.key?(:'capital')
        self.capital = attributes[:'capital']
      else
        self.capital = nil
      end

      if attributes.key?(:'established_at')
        self.established_at = attributes[:'established_at']
      else
        self.established_at = nil
      end

      if attributes.key?(:'yearly_sales')
        self.yearly_sales = attributes[:'yearly_sales']
      else
        self.yearly_sales = nil
      end

      if attributes.key?(:'business_details')
        self.business_details = attributes[:'business_details']
      else
        self.business_details = nil
      end

      if attributes.key?(:'company_postal_code')
        self.company_postal_code = attributes[:'company_postal_code']
      else
        self.company_postal_code = nil
      end

      if attributes.key?(:'company_prefecture')
        self.company_prefecture = attributes[:'company_prefecture']
      else
        self.company_prefecture = nil
      end

      if attributes.key?(:'company_prefecture_kana')
        self.company_prefecture_kana = attributes[:'company_prefecture_kana']
      else
        self.company_prefecture_kana = nil
      end

      if attributes.key?(:'company_address_municipality')
        self.company_address_municipality = attributes[:'company_address_municipality']
      else
        self.company_address_municipality = nil
      end

      if attributes.key?(:'company_address_municipality_kana')
        self.company_address_municipality_kana = attributes[:'company_address_municipality_kana']
      else
        self.company_address_municipality_kana = nil
      end

      if attributes.key?(:'company_address_section')
        self.company_address_section = attributes[:'company_address_section']
      else
        self.company_address_section = nil
      end

      if attributes.key?(:'company_address_section_kana')
        self.company_address_section_kana = attributes[:'company_address_section_kana']
      else
        self.company_address_section_kana = nil
      end

      if attributes.key?(:'company_address_chrome')
        self.company_address_chrome = attributes[:'company_address_chrome']
      else
        self.company_address_chrome = nil
      end

      if attributes.key?(:'company_address_chrome_kana')
        self.company_address_chrome_kana = attributes[:'company_address_chrome_kana']
      else
        self.company_address_chrome_kana = nil
      end

      if attributes.key?(:'company_address_building_name')
        self.company_address_building_name = attributes[:'company_address_building_name']
      end

      if attributes.key?(:'company_address_building_name_kana')
        self.company_address_building_name_kana = attributes[:'company_address_building_name_kana']
      end

      if attributes.key?(:'company_tel')
        self.company_tel = attributes[:'company_tel']
      else
        self.company_tel = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @corporate_number.to_s.length > 13
        invalid_properties.push('invalid value for "corporate_number", the character length must be smaller than or equal to 13.')
      end

      if @corporate_number.to_s.length < 13
        invalid_properties.push('invalid value for "corporate_number", the character length must be great than or equal to 13.')
      end

      if @corporate_name.nil?
        invalid_properties.push('invalid value for "corporate_name", corporate_name cannot be nil.')
      end

      if @corporate_name.to_s.length > 150
        invalid_properties.push('invalid value for "corporate_name", the character length must be smaller than or equal to 150.')
      end

      if @corporate_name.to_s.length < 1
        invalid_properties.push('invalid value for "corporate_name", the character length must be great than or equal to 1.')
      end

      if @corporate_name_kana.nil?
        invalid_properties.push('invalid value for "corporate_name_kana", corporate_name_kana cannot be nil.')
      end

      if @corporate_name_kana.to_s.length > 150
        invalid_properties.push('invalid value for "corporate_name_kana", the character length must be smaller than or equal to 150.')
      end

      if @corporate_name_kana.to_s.length < 1
        invalid_properties.push('invalid value for "corporate_name_kana", the character length must be great than or equal to 1.')
      end

      if !@hp.nil? && @hp.to_s.length > 300
        invalid_properties.push('invalid value for "hp", the character length must be smaller than or equal to 300.')
      end

      if !@hp.nil? && @hp.to_s.length < 1
        invalid_properties.push('invalid value for "hp", the character length must be great than or equal to 1.')
      end

      if @established_at.to_s.length > 10
        invalid_properties.push('invalid value for "established_at", the character length must be smaller than or equal to 10.')
      end

      if @established_at.to_s.length < 10
        invalid_properties.push('invalid value for "established_at", the character length must be great than or equal to 10.')
      end

      if @business_details.to_s.length > 5000
        invalid_properties.push('invalid value for "business_details", the character length must be smaller than or equal to 5000.')
      end

      if @business_details.to_s.length < 1
        invalid_properties.push('invalid value for "business_details", the character length must be great than or equal to 1.')
      end

      if @company_postal_code.to_s.length > 8
        invalid_properties.push('invalid value for "company_postal_code", the character length must be smaller than or equal to 8.')
      end

      if @company_postal_code.to_s.length < 8
        invalid_properties.push('invalid value for "company_postal_code", the character length must be great than or equal to 8.')
      end

      if @company_prefecture.to_s.length > 4
        invalid_properties.push('invalid value for "company_prefecture", the character length must be smaller than or equal to 4.')
      end

      if @company_prefecture.to_s.length < 3
        invalid_properties.push('invalid value for "company_prefecture", the character length must be great than or equal to 3.')
      end

      if @company_prefecture_kana.to_s.length > 6
        invalid_properties.push('invalid value for "company_prefecture_kana", the character length must be smaller than or equal to 6.')
      end

      if @company_prefecture_kana.to_s.length < 1
        invalid_properties.push('invalid value for "company_prefecture_kana", the character length must be great than or equal to 1.')
      end

      if @company_address_municipality.to_s.length > 50
        invalid_properties.push('invalid value for "company_address_municipality", the character length must be smaller than or equal to 50.')
      end

      if @company_address_municipality.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_municipality", the character length must be great than or equal to 1.')
      end

      if @company_address_municipality_kana.to_s.length > 100
        invalid_properties.push('invalid value for "company_address_municipality_kana", the character length must be smaller than or equal to 100.')
      end

      if @company_address_municipality_kana.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_municipality_kana", the character length must be great than or equal to 1.')
      end

      if @company_address_section.to_s.length > 50
        invalid_properties.push('invalid value for "company_address_section", the character length must be smaller than or equal to 50.')
      end

      if @company_address_section.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_section", the character length must be great than or equal to 1.')
      end

      if @company_address_section_kana.to_s.length > 100
        invalid_properties.push('invalid value for "company_address_section_kana", the character length must be smaller than or equal to 100.')
      end

      if @company_address_section_kana.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_section_kana", the character length must be great than or equal to 1.')
      end

      if @company_address_chrome.to_s.length > 100
        invalid_properties.push('invalid value for "company_address_chrome", the character length must be smaller than or equal to 100.')
      end

      if @company_address_chrome.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_chrome", the character length must be great than or equal to 1.')
      end

      if @company_address_chrome_kana.to_s.length > 100
        invalid_properties.push('invalid value for "company_address_chrome_kana", the character length must be smaller than or equal to 100.')
      end

      if @company_address_chrome_kana.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_chrome_kana", the character length must be great than or equal to 1.')
      end

      if !@company_address_building_name.nil? && @company_address_building_name.to_s.length > 100
        invalid_properties.push('invalid value for "company_address_building_name", the character length must be smaller than or equal to 100.')
      end

      if !@company_address_building_name.nil? && @company_address_building_name.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_building_name", the character length must be great than or equal to 1.')
      end

      if !@company_address_building_name_kana.nil? && @company_address_building_name_kana.to_s.length > 100
        invalid_properties.push('invalid value for "company_address_building_name_kana", the character length must be smaller than or equal to 100.')
      end

      if !@company_address_building_name_kana.nil? && @company_address_building_name_kana.to_s.length < 1
        invalid_properties.push('invalid value for "company_address_building_name_kana", the character length must be great than or equal to 1.')
      end

      if @company_tel.to_s.length > 15
        invalid_properties.push('invalid value for "company_tel", the character length must be smaller than or equal to 15.')
      end

      if @company_tel.to_s.length < 1
        invalid_properties.push('invalid value for "company_tel", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @corporate_number.to_s.length > 13
      return false if @corporate_number.to_s.length < 13
      return false if @corporate_name.nil?
      return false if @corporate_name.to_s.length > 150
      return false if @corporate_name.to_s.length < 1
      return false if @corporate_name_kana.nil?
      return false if @corporate_name_kana.to_s.length > 150
      return false if @corporate_name_kana.to_s.length < 1
      return false if !@hp.nil? && @hp.to_s.length > 300
      return false if !@hp.nil? && @hp.to_s.length < 1
      return false if @established_at.to_s.length > 10
      return false if @established_at.to_s.length < 10
      return false if @business_details.to_s.length > 5000
      return false if @business_details.to_s.length < 1
      return false if @company_postal_code.to_s.length > 8
      return false if @company_postal_code.to_s.length < 8
      return false if @company_prefecture.to_s.length > 4
      return false if @company_prefecture.to_s.length < 3
      return false if @company_prefecture_kana.to_s.length > 6
      return false if @company_prefecture_kana.to_s.length < 1
      return false if @company_address_municipality.to_s.length > 50
      return false if @company_address_municipality.to_s.length < 1
      return false if @company_address_municipality_kana.to_s.length > 100
      return false if @company_address_municipality_kana.to_s.length < 1
      return false if @company_address_section.to_s.length > 50
      return false if @company_address_section.to_s.length < 1
      return false if @company_address_section_kana.to_s.length > 100
      return false if @company_address_section_kana.to_s.length < 1
      return false if @company_address_chrome.to_s.length > 100
      return false if @company_address_chrome.to_s.length < 1
      return false if @company_address_chrome_kana.to_s.length > 100
      return false if @company_address_chrome_kana.to_s.length < 1
      return false if !@company_address_building_name.nil? && @company_address_building_name.to_s.length > 100
      return false if !@company_address_building_name.nil? && @company_address_building_name.to_s.length < 1
      return false if !@company_address_building_name_kana.nil? && @company_address_building_name_kana.to_s.length > 100
      return false if !@company_address_building_name_kana.nil? && @company_address_building_name_kana.to_s.length < 1
      return false if @company_tel.to_s.length > 15
      return false if @company_tel.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] corporate_number Value to be assigned
    def corporate_number=(corporate_number)
      if !corporate_number.nil? && corporate_number.to_s.length > 13
        fail ArgumentError, 'invalid value for "corporate_number", the character length must be smaller than or equal to 13.'
      end

      if !corporate_number.nil? && corporate_number.to_s.length < 13
        fail ArgumentError, 'invalid value for "corporate_number", the character length must be great than or equal to 13.'
      end

      @corporate_number = corporate_number
    end

    # Custom attribute writer method with validation
    # @param [Object] corporate_name Value to be assigned
    def corporate_name=(corporate_name)
      if corporate_name.nil?
        fail ArgumentError, 'corporate_name cannot be nil'
      end

      if corporate_name.to_s.length > 150
        fail ArgumentError, 'invalid value for "corporate_name", the character length must be smaller than or equal to 150.'
      end

      if corporate_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "corporate_name", the character length must be great than or equal to 1.'
      end

      @corporate_name = corporate_name
    end

    # Custom attribute writer method with validation
    # @param [Object] corporate_name_kana Value to be assigned
    def corporate_name_kana=(corporate_name_kana)
      if corporate_name_kana.nil?
        fail ArgumentError, 'corporate_name_kana cannot be nil'
      end

      if corporate_name_kana.to_s.length > 150
        fail ArgumentError, 'invalid value for "corporate_name_kana", the character length must be smaller than or equal to 150.'
      end

      if corporate_name_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "corporate_name_kana", the character length must be great than or equal to 1.'
      end

      @corporate_name_kana = corporate_name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] hp Value to be assigned
    def hp=(hp)
      if !hp.nil? && hp.to_s.length > 300
        fail ArgumentError, 'invalid value for "hp", the character length must be smaller than or equal to 300.'
      end

      if !hp.nil? && hp.to_s.length < 1
        fail ArgumentError, 'invalid value for "hp", the character length must be great than or equal to 1.'
      end

      @hp = hp
    end

    # Custom attribute writer method with validation
    # @param [Object] capital Value to be assigned
    def capital=(capital)
      @capital = capital
    end

    # Custom attribute writer method with validation
    # @param [Object] established_at Value to be assigned
    def established_at=(established_at)
      if !established_at.nil? && established_at.to_s.length > 10
        fail ArgumentError, 'invalid value for "established_at", the character length must be smaller than or equal to 10.'
      end

      if !established_at.nil? && established_at.to_s.length < 10
        fail ArgumentError, 'invalid value for "established_at", the character length must be great than or equal to 10.'
      end

      @established_at = established_at
    end

    # Custom attribute writer method with validation
    # @param [Object] yearly_sales Value to be assigned
    def yearly_sales=(yearly_sales)
      @yearly_sales = yearly_sales
    end

    # Custom attribute writer method with validation
    # @param [Object] business_details Value to be assigned
    def business_details=(business_details)
      if !business_details.nil? && business_details.to_s.length > 5000
        fail ArgumentError, 'invalid value for "business_details", the character length must be smaller than or equal to 5000.'
      end

      if !business_details.nil? && business_details.to_s.length < 1
        fail ArgumentError, 'invalid value for "business_details", the character length must be great than or equal to 1.'
      end

      @business_details = business_details
    end

    # Custom attribute writer method with validation
    # @param [Object] company_postal_code Value to be assigned
    def company_postal_code=(company_postal_code)
      if !company_postal_code.nil? && company_postal_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "company_postal_code", the character length must be smaller than or equal to 8.'
      end

      if !company_postal_code.nil? && company_postal_code.to_s.length < 8
        fail ArgumentError, 'invalid value for "company_postal_code", the character length must be great than or equal to 8.'
      end

      @company_postal_code = company_postal_code
    end

    # Custom attribute writer method with validation
    # @param [Object] company_prefecture Value to be assigned
    def company_prefecture=(company_prefecture)
      if !company_prefecture.nil? && company_prefecture.to_s.length > 4
        fail ArgumentError, 'invalid value for "company_prefecture", the character length must be smaller than or equal to 4.'
      end

      if !company_prefecture.nil? && company_prefecture.to_s.length < 3
        fail ArgumentError, 'invalid value for "company_prefecture", the character length must be great than or equal to 3.'
      end

      @company_prefecture = company_prefecture
    end

    # Custom attribute writer method with validation
    # @param [Object] company_prefecture_kana Value to be assigned
    def company_prefecture_kana=(company_prefecture_kana)
      if !company_prefecture_kana.nil? && company_prefecture_kana.to_s.length > 6
        fail ArgumentError, 'invalid value for "company_prefecture_kana", the character length must be smaller than or equal to 6.'
      end

      if !company_prefecture_kana.nil? && company_prefecture_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_prefecture_kana", the character length must be great than or equal to 1.'
      end

      @company_prefecture_kana = company_prefecture_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_municipality Value to be assigned
    def company_address_municipality=(company_address_municipality)
      if !company_address_municipality.nil? && company_address_municipality.to_s.length > 50
        fail ArgumentError, 'invalid value for "company_address_municipality", the character length must be smaller than or equal to 50.'
      end

      if !company_address_municipality.nil? && company_address_municipality.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_municipality", the character length must be great than or equal to 1.'
      end

      @company_address_municipality = company_address_municipality
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_municipality_kana Value to be assigned
    def company_address_municipality_kana=(company_address_municipality_kana)
      if !company_address_municipality_kana.nil? && company_address_municipality_kana.to_s.length > 100
        fail ArgumentError, 'invalid value for "company_address_municipality_kana", the character length must be smaller than or equal to 100.'
      end

      if !company_address_municipality_kana.nil? && company_address_municipality_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_municipality_kana", the character length must be great than or equal to 1.'
      end

      @company_address_municipality_kana = company_address_municipality_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_section Value to be assigned
    def company_address_section=(company_address_section)
      if !company_address_section.nil? && company_address_section.to_s.length > 50
        fail ArgumentError, 'invalid value for "company_address_section", the character length must be smaller than or equal to 50.'
      end

      if !company_address_section.nil? && company_address_section.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_section", the character length must be great than or equal to 1.'
      end

      @company_address_section = company_address_section
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_section_kana Value to be assigned
    def company_address_section_kana=(company_address_section_kana)
      if !company_address_section_kana.nil? && company_address_section_kana.to_s.length > 100
        fail ArgumentError, 'invalid value for "company_address_section_kana", the character length must be smaller than or equal to 100.'
      end

      if !company_address_section_kana.nil? && company_address_section_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_section_kana", the character length must be great than or equal to 1.'
      end

      @company_address_section_kana = company_address_section_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_chrome Value to be assigned
    def company_address_chrome=(company_address_chrome)
      if !company_address_chrome.nil? && company_address_chrome.to_s.length > 100
        fail ArgumentError, 'invalid value for "company_address_chrome", the character length must be smaller than or equal to 100.'
      end

      if !company_address_chrome.nil? && company_address_chrome.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_chrome", the character length must be great than or equal to 1.'
      end

      @company_address_chrome = company_address_chrome
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_chrome_kana Value to be assigned
    def company_address_chrome_kana=(company_address_chrome_kana)
      if !company_address_chrome_kana.nil? && company_address_chrome_kana.to_s.length > 100
        fail ArgumentError, 'invalid value for "company_address_chrome_kana", the character length must be smaller than or equal to 100.'
      end

      if !company_address_chrome_kana.nil? && company_address_chrome_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_chrome_kana", the character length must be great than or equal to 1.'
      end

      @company_address_chrome_kana = company_address_chrome_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_building_name Value to be assigned
    def company_address_building_name=(company_address_building_name)
      if !company_address_building_name.nil? && company_address_building_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "company_address_building_name", the character length must be smaller than or equal to 100.'
      end

      if !company_address_building_name.nil? && company_address_building_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_building_name", the character length must be great than or equal to 1.'
      end

      @company_address_building_name = company_address_building_name
    end

    # Custom attribute writer method with validation
    # @param [Object] company_address_building_name_kana Value to be assigned
    def company_address_building_name_kana=(company_address_building_name_kana)
      if !company_address_building_name_kana.nil? && company_address_building_name_kana.to_s.length > 100
        fail ArgumentError, 'invalid value for "company_address_building_name_kana", the character length must be smaller than or equal to 100.'
      end

      if !company_address_building_name_kana.nil? && company_address_building_name_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_address_building_name_kana", the character length must be great than or equal to 1.'
      end

      @company_address_building_name_kana = company_address_building_name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] company_tel Value to be assigned
    def company_tel=(company_tel)
      if !company_tel.nil? && company_tel.to_s.length > 15
        fail ArgumentError, 'invalid value for "company_tel", the character length must be smaller than or equal to 15.'
      end

      if !company_tel.nil? && company_tel.to_s.length < 1
        fail ArgumentError, 'invalid value for "company_tel", the character length must be great than or equal to 1.'
      end

      @company_tel = company_tel
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          corporate_number == o.corporate_number &&
          corporate_name == o.corporate_name &&
          corporate_name_kana == o.corporate_name_kana &&
          hp == o.hp &&
          capital == o.capital &&
          established_at == o.established_at &&
          yearly_sales == o.yearly_sales &&
          business_details == o.business_details &&
          company_postal_code == o.company_postal_code &&
          company_prefecture == o.company_prefecture &&
          company_prefecture_kana == o.company_prefecture_kana &&
          company_address_municipality == o.company_address_municipality &&
          company_address_municipality_kana == o.company_address_municipality_kana &&
          company_address_section == o.company_address_section &&
          company_address_section_kana == o.company_address_section_kana &&
          company_address_chrome == o.company_address_chrome &&
          company_address_chrome_kana == o.company_address_chrome_kana &&
          company_address_building_name == o.company_address_building_name &&
          company_address_building_name_kana == o.company_address_building_name_kana &&
          company_tel == o.company_tel
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [corporate_number, corporate_name, corporate_name_kana, hp, capital, established_at, yearly_sales, business_details, company_postal_code, company_prefecture, company_prefecture_kana, company_address_municipality, company_address_municipality_kana, company_address_section, company_address_section_kana, company_address_chrome, company_address_chrome_kana, company_address_building_name, company_address_building_name_kana, company_tel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
