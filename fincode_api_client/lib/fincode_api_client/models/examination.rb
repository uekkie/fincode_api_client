=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class Examination
    attr_accessor :examination_master_id

    attr_accessor :status_code

    # 加盟店番号 
    attr_accessor :member_code

    # 3Dセキュア認証利用可否  - `true`: 利用可 - `false`: 利用不可 
    attr_accessor :tds_available

    # 分割払い利用可否  - `true`: 利用可 - `false`: 利用不可 
    attr_accessor :installments_payment_available

    # MCC 1 
    attr_accessor :mcc_1

    # MCC 2 
    attr_accessor :mcc_2

    # PayPay 加盟店番号 
    attr_accessor :paypay_mid

    # PayPay 店舗ID 
    attr_accessor :paypay_store_id

    # PAYSLE 企業コード 
    attr_accessor :paysle_merchant_code

    # PAYSLE ログイン企業ID 
    attr_accessor :paysle_user_id

    # PAYSLE システム接続パスワード 
    attr_accessor :paysle_user_password

    # 利用開始日\\ 形式：`yyyy/MM/dd` 
    attr_accessor :cut_over_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'examination_master_id' => :'examination_master_id',
        :'status_code' => :'status_code',
        :'member_code' => :'member_code',
        :'tds_available' => :'tds_available',
        :'installments_payment_available' => :'installments_payment_available',
        :'mcc_1' => :'mcc_1',
        :'mcc_2' => :'mcc_2',
        :'paypay_mid' => :'paypay_mid',
        :'paypay_store_id' => :'paypay_store_id',
        :'paysle_merchant_code' => :'paysle_merchant_code',
        :'paysle_user_id' => :'paysle_user_id',
        :'paysle_user_password' => :'paysle_user_password',
        :'cut_over_at' => :'cut_over_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'examination_master_id' => :'ExaminationMasterId',
        :'status_code' => :'ExaminationStatus',
        :'member_code' => :'String',
        :'tds_available' => :'Boolean',
        :'installments_payment_available' => :'Boolean',
        :'mcc_1' => :'String',
        :'mcc_2' => :'String',
        :'paypay_mid' => :'String',
        :'paypay_store_id' => :'String',
        :'paysle_merchant_code' => :'String',
        :'paysle_user_id' => :'String',
        :'paysle_user_password' => :'String',
        :'cut_over_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'member_code',
        :'tds_available',
        :'installments_payment_available',
        :'mcc_1',
        :'mcc_2',
        :'paypay_mid',
        :'paypay_store_id',
        :'paysle_merchant_code',
        :'paysle_user_id',
        :'paysle_user_password',
        :'cut_over_at'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::Examination` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::Examination`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'examination_master_id')
        self.examination_master_id = attributes[:'examination_master_id']
      end

      if attributes.key?(:'status_code')
        self.status_code = attributes[:'status_code']
      end

      if attributes.key?(:'member_code')
        self.member_code = attributes[:'member_code']
      end

      if attributes.key?(:'tds_available')
        self.tds_available = attributes[:'tds_available']
      end

      if attributes.key?(:'installments_payment_available')
        self.installments_payment_available = attributes[:'installments_payment_available']
      end

      if attributes.key?(:'mcc_1')
        self.mcc_1 = attributes[:'mcc_1']
      end

      if attributes.key?(:'mcc_2')
        self.mcc_2 = attributes[:'mcc_2']
      end

      if attributes.key?(:'paypay_mid')
        self.paypay_mid = attributes[:'paypay_mid']
      end

      if attributes.key?(:'paypay_store_id')
        self.paypay_store_id = attributes[:'paypay_store_id']
      end

      if attributes.key?(:'paysle_merchant_code')
        self.paysle_merchant_code = attributes[:'paysle_merchant_code']
      end

      if attributes.key?(:'paysle_user_id')
        self.paysle_user_id = attributes[:'paysle_user_id']
      end

      if attributes.key?(:'paysle_user_password')
        self.paysle_user_password = attributes[:'paysle_user_password']
      end

      if attributes.key?(:'cut_over_at')
        self.cut_over_at = attributes[:'cut_over_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@member_code.nil? && @member_code.to_s.length > 20
        invalid_properties.push('invalid value for "member_code", the character length must be smaller than or equal to 20.')
      end

      if !@member_code.nil? && @member_code.to_s.length < 1
        invalid_properties.push('invalid value for "member_code", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@member_code.nil? && @member_code.to_s.length > 20
      return false if !@member_code.nil? && @member_code.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] member_code Value to be assigned
    def member_code=(member_code)
      if !member_code.nil? && member_code.to_s.length > 20
        fail ArgumentError, 'invalid value for "member_code", the character length must be smaller than or equal to 20.'
      end

      if !member_code.nil? && member_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "member_code", the character length must be great than or equal to 1.'
      end

      @member_code = member_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          examination_master_id == o.examination_master_id &&
          status_code == o.status_code &&
          member_code == o.member_code &&
          tds_available == o.tds_available &&
          installments_payment_available == o.installments_payment_available &&
          mcc_1 == o.mcc_1 &&
          mcc_2 == o.mcc_2 &&
          paypay_mid == o.paypay_mid &&
          paypay_store_id == o.paypay_store_id &&
          paysle_merchant_code == o.paysle_merchant_code &&
          paysle_user_id == o.paysle_user_id &&
          paysle_user_password == o.paysle_user_password &&
          cut_over_at == o.cut_over_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [examination_master_id, status_code, member_code, tds_available, installments_payment_available, mcc_1, mcc_2, paypay_mid, paypay_store_id, paysle_merchant_code, paysle_user_id, paysle_user_password, cut_over_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
