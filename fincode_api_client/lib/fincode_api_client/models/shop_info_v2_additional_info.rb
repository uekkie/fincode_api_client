=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module FincodeApiClient
  # 追加提出情報\\ \\ 審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\\ 特定商取引法に基づく表示情報を基に値を設定してください。 
  class ShopInfoV2AdditionalInfo
    # 販売責任者氏名\\ \\ ショップの販売責任者の氏名 
    attr_accessor :shop_sales_manager_name

    # 屋号・サービス名\\ \\ ショップのサービスの名称 
    attr_accessor :shop_service_name

    # 支払い方法\\ \\ ショップで利用可能な支払い方法 
    attr_accessor :shop_how_to_pay

    # 商品代金以外の料金の説明\\ \\ 送料、手数料、消費税などの商品代金以外の料金についての説明 
    attr_accessor :shop_charge_description

    # 商品の引き渡し時期\\ \\ 商品の引き渡し時期についての説明 
    attr_accessor :shop_product_delivery_time

    # 返品・交換に関する条件\\ \\ 返品・交換に関する条件についての説明 
    attr_accessor :shop_return_goods_handing_conditions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shop_sales_manager_name' => :'shop_sales_manager_name',
        :'shop_service_name' => :'shop_service_name',
        :'shop_how_to_pay' => :'shop_how_to_pay',
        :'shop_charge_description' => :'shop_charge_description',
        :'shop_product_delivery_time' => :'shop_product_delivery_time',
        :'shop_return_goods_handing_conditions' => :'shop_return_goods_handing_conditions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shop_sales_manager_name' => :'String',
        :'shop_service_name' => :'String',
        :'shop_how_to_pay' => :'String',
        :'shop_charge_description' => :'String',
        :'shop_product_delivery_time' => :'String',
        :'shop_return_goods_handing_conditions' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'shop_sales_manager_name',
        :'shop_service_name',
        :'shop_how_to_pay',
        :'shop_charge_description',
        :'shop_product_delivery_time',
        :'shop_return_goods_handing_conditions'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::ShopInfoV2AdditionalInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::ShopInfoV2AdditionalInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shop_sales_manager_name')
        self.shop_sales_manager_name = attributes[:'shop_sales_manager_name']
      else
        self.shop_sales_manager_name = nil
      end

      if attributes.key?(:'shop_service_name')
        self.shop_service_name = attributes[:'shop_service_name']
      end

      if attributes.key?(:'shop_how_to_pay')
        self.shop_how_to_pay = attributes[:'shop_how_to_pay']
      else
        self.shop_how_to_pay = nil
      end

      if attributes.key?(:'shop_charge_description')
        self.shop_charge_description = attributes[:'shop_charge_description']
      end

      if attributes.key?(:'shop_product_delivery_time')
        self.shop_product_delivery_time = attributes[:'shop_product_delivery_time']
      else
        self.shop_product_delivery_time = nil
      end

      if attributes.key?(:'shop_return_goods_handing_conditions')
        self.shop_return_goods_handing_conditions = attributes[:'shop_return_goods_handing_conditions']
      else
        self.shop_return_goods_handing_conditions = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @shop_sales_manager_name.to_s.length > 300
        invalid_properties.push('invalid value for "shop_sales_manager_name", the character length must be smaller than or equal to 300.')
      end

      if @shop_sales_manager_name.to_s.length < 1
        invalid_properties.push('invalid value for "shop_sales_manager_name", the character length must be great than or equal to 1.')
      end

      if !@shop_service_name.nil? && @shop_service_name.to_s.length > 300
        invalid_properties.push('invalid value for "shop_service_name", the character length must be smaller than or equal to 300.')
      end

      if !@shop_service_name.nil? && @shop_service_name.to_s.length < 1
        invalid_properties.push('invalid value for "shop_service_name", the character length must be great than or equal to 1.')
      end

      if @shop_how_to_pay.to_s.length > 1000
        invalid_properties.push('invalid value for "shop_how_to_pay", the character length must be smaller than or equal to 1000.')
      end

      if @shop_how_to_pay.to_s.length < 1
        invalid_properties.push('invalid value for "shop_how_to_pay", the character length must be great than or equal to 1.')
      end

      if !@shop_charge_description.nil? && @shop_charge_description.to_s.length > 5000
        invalid_properties.push('invalid value for "shop_charge_description", the character length must be smaller than or equal to 5000.')
      end

      if !@shop_charge_description.nil? && @shop_charge_description.to_s.length < 1
        invalid_properties.push('invalid value for "shop_charge_description", the character length must be great than or equal to 1.')
      end

      if @shop_product_delivery_time.to_s.length > 1000
        invalid_properties.push('invalid value for "shop_product_delivery_time", the character length must be smaller than or equal to 1000.')
      end

      if @shop_product_delivery_time.to_s.length < 1
        invalid_properties.push('invalid value for "shop_product_delivery_time", the character length must be great than or equal to 1.')
      end

      if @shop_return_goods_handing_conditions.to_s.length > 5000
        invalid_properties.push('invalid value for "shop_return_goods_handing_conditions", the character length must be smaller than or equal to 5000.')
      end

      if @shop_return_goods_handing_conditions.to_s.length < 1
        invalid_properties.push('invalid value for "shop_return_goods_handing_conditions", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @shop_sales_manager_name.to_s.length > 300
      return false if @shop_sales_manager_name.to_s.length < 1
      return false if !@shop_service_name.nil? && @shop_service_name.to_s.length > 300
      return false if !@shop_service_name.nil? && @shop_service_name.to_s.length < 1
      return false if @shop_how_to_pay.to_s.length > 1000
      return false if @shop_how_to_pay.to_s.length < 1
      return false if !@shop_charge_description.nil? && @shop_charge_description.to_s.length > 5000
      return false if !@shop_charge_description.nil? && @shop_charge_description.to_s.length < 1
      return false if @shop_product_delivery_time.to_s.length > 1000
      return false if @shop_product_delivery_time.to_s.length < 1
      return false if @shop_return_goods_handing_conditions.to_s.length > 5000
      return false if @shop_return_goods_handing_conditions.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_sales_manager_name Value to be assigned
    def shop_sales_manager_name=(shop_sales_manager_name)
      if !shop_sales_manager_name.nil? && shop_sales_manager_name.to_s.length > 300
        fail ArgumentError, 'invalid value for "shop_sales_manager_name", the character length must be smaller than or equal to 300.'
      end

      if !shop_sales_manager_name.nil? && shop_sales_manager_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_sales_manager_name", the character length must be great than or equal to 1.'
      end

      @shop_sales_manager_name = shop_sales_manager_name
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_service_name Value to be assigned
    def shop_service_name=(shop_service_name)
      if !shop_service_name.nil? && shop_service_name.to_s.length > 300
        fail ArgumentError, 'invalid value for "shop_service_name", the character length must be smaller than or equal to 300.'
      end

      if !shop_service_name.nil? && shop_service_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_service_name", the character length must be great than or equal to 1.'
      end

      @shop_service_name = shop_service_name
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_how_to_pay Value to be assigned
    def shop_how_to_pay=(shop_how_to_pay)
      if !shop_how_to_pay.nil? && shop_how_to_pay.to_s.length > 1000
        fail ArgumentError, 'invalid value for "shop_how_to_pay", the character length must be smaller than or equal to 1000.'
      end

      if !shop_how_to_pay.nil? && shop_how_to_pay.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_how_to_pay", the character length must be great than or equal to 1.'
      end

      @shop_how_to_pay = shop_how_to_pay
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_charge_description Value to be assigned
    def shop_charge_description=(shop_charge_description)
      if !shop_charge_description.nil? && shop_charge_description.to_s.length > 5000
        fail ArgumentError, 'invalid value for "shop_charge_description", the character length must be smaller than or equal to 5000.'
      end

      if !shop_charge_description.nil? && shop_charge_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_charge_description", the character length must be great than or equal to 1.'
      end

      @shop_charge_description = shop_charge_description
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_product_delivery_time Value to be assigned
    def shop_product_delivery_time=(shop_product_delivery_time)
      if !shop_product_delivery_time.nil? && shop_product_delivery_time.to_s.length > 1000
        fail ArgumentError, 'invalid value for "shop_product_delivery_time", the character length must be smaller than or equal to 1000.'
      end

      if !shop_product_delivery_time.nil? && shop_product_delivery_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_product_delivery_time", the character length must be great than or equal to 1.'
      end

      @shop_product_delivery_time = shop_product_delivery_time
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_return_goods_handing_conditions Value to be assigned
    def shop_return_goods_handing_conditions=(shop_return_goods_handing_conditions)
      if !shop_return_goods_handing_conditions.nil? && shop_return_goods_handing_conditions.to_s.length > 5000
        fail ArgumentError, 'invalid value for "shop_return_goods_handing_conditions", the character length must be smaller than or equal to 5000.'
      end

      if !shop_return_goods_handing_conditions.nil? && shop_return_goods_handing_conditions.to_s.length < 1
        fail ArgumentError, 'invalid value for "shop_return_goods_handing_conditions", the character length must be great than or equal to 1.'
      end

      @shop_return_goods_handing_conditions = shop_return_goods_handing_conditions
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shop_sales_manager_name == o.shop_sales_manager_name &&
          shop_service_name == o.shop_service_name &&
          shop_how_to_pay == o.shop_how_to_pay &&
          shop_charge_description == o.shop_charge_description &&
          shop_product_delivery_time == o.shop_product_delivery_time &&
          shop_return_goods_handing_conditions == o.shop_return_goods_handing_conditions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shop_sales_manager_name, shop_service_name, shop_how_to_pay, shop_charge_description, shop_product_delivery_time, shop_return_goods_handing_conditions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
