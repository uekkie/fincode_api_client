=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class GetInvoicesListParameter
    # ページ番号
    attr_accessor :page

    # 1回で取得するデータの最大件数
    attr_accessor :limit

    # 総件数のみ取得するか。\\ `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。 
    attr_accessor :count_only

    # インボイス請求書のステータス       カンマ(,)区切りで複数指定も可能です。       - `DRAFT`: 下書き - `AWAITING_CUSTOMER_PAYMENT`: 支払い待ち - `PAID`: 支払い完了 - `CANCELED`: キャンセル済 
    attr_accessor :status

    # キーワード      指定した場合、請求書作成時に指定した client_field_1, client_field_2, client_field_3 のいずれかにおいて指定したワードが部分一致する請求データのみを取得します。 
    attr_accessor :keyword

    # 支払期日範囲（開始）   形式： `yyyy/MM/dd`      指定した場合、支払期日が指定日以降である請求データのみを取得します。 
    attr_accessor :due_date_from

    # 支払期日範囲（終了）   形式： `yyyy/MM/dd`      指定した場合、支払期日が指定日以前の請求データのみを取得します。 
    attr_accessor :due_date_to

    # 発行日範囲（開始）   形式： `yyyy/MM/dd`      指定した場合、発行日が指定日以降である請求データのみを取得します。 
    attr_accessor :issue_date_from

    # 発行日の範囲指定（終了）   形式： `yyyy/MM/dd`      指定した場合、発行日が指定日以前の請求データのみを取得します。 
    attr_accessor :issue_date_to

    # 合計金額範囲（上限）      指定した場合、合計金額が指定金額以下の請求データのみを取得します。 
    attr_accessor :total_amount_max

    # 合計金額範囲（下限）      指定した場合、合計金額が指定金額以上の請求データのみを取得します。 
    attr_accessor :total_amount_min

    # 作成日範囲（開始）   形式： `yyyy/MM/dd`      指定した場合、作成日が指定日以降である請求データのみを取得します。 
    attr_accessor :created_from

    # 作成日範囲（終了）   形式： `yyyy/MM/dd`      指定した場合、作成日が指定日以前の請求データのみを取得します。 
    attr_accessor :created_to

    # 顧客ID      指定した場合、顧客IDが完全一致する請求データのみを取得します。 
    attr_accessor :customer_id

    # 顧客名（請求先宛名）      指定した場合、顧客名が部分一致する請求データのみを取得します。 
    attr_accessor :customer_name

    # 請求番号      指定した場合、請求番号が一致する請求データのみを取得します。 
    attr_accessor :invoice_number

    # 取引日付範囲（開始）   形式： `yyyy/MM/dd`      指定した場合、「取引の日付」として入力した取引日が指定日以降の請求データのみを取得します。 
    attr_accessor :lines_date_from

    # 取引日範囲（終了）   形式： `yyyy/MM/dd`      指定した場合、「取引の日付」として入力した取引日が指定日以前の請求データのみを取得します。 
    attr_accessor :lines_date_to

    # 支払完了日範囲（開始）   形式： `yyyy/MM/dd`      指定した場合、支払い完了日が指定日以降の請求データのみを取得します。 
    attr_accessor :transaction_date_from

    # 支払完了日範囲（終了）   形式： `yyyy/MM/dd`      指定した場合、支払い完了日が指定日以前の請求データのみを取得します。 
    attr_accessor :transaction_date_to

    # 回収困難マーク      - `true`: 回収困難マーク済の請求データのみを取得 - `false`: 回収困難マークの無い請求データのみを取得 - `null`: いずれも取得 
    attr_accessor :is_uncollectible

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'page' => :'page',
        :'limit' => :'limit',
        :'count_only' => :'count_only',
        :'status' => :'status',
        :'keyword' => :'keyword',
        :'due_date_from' => :'due_date_from',
        :'due_date_to' => :'due_date_to',
        :'issue_date_from' => :'issue_date_from',
        :'issue_date_to' => :'issue_date_to',
        :'total_amount_max' => :'total_amount_max',
        :'total_amount_min' => :'total_amount_min',
        :'created_from' => :'created_from',
        :'created_to' => :'created_to',
        :'customer_id' => :'customer_id',
        :'customer_name' => :'customer_name',
        :'invoice_number' => :'invoice_number',
        :'lines_date_from' => :'lines_date_from',
        :'lines_date_to' => :'lines_date_to',
        :'transaction_date_from' => :'transaction_date_from',
        :'transaction_date_to' => :'transaction_date_to',
        :'is_uncollectible' => :'is_uncollectible'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'page' => :'Integer',
        :'limit' => :'Integer',
        :'count_only' => :'Boolean',
        :'status' => :'String',
        :'keyword' => :'String',
        :'due_date_from' => :'String',
        :'due_date_to' => :'String',
        :'issue_date_from' => :'String',
        :'issue_date_to' => :'String',
        :'total_amount_max' => :'Float',
        :'total_amount_min' => :'Float',
        :'created_from' => :'String',
        :'created_to' => :'String',
        :'customer_id' => :'String',
        :'customer_name' => :'String',
        :'invoice_number' => :'String',
        :'lines_date_from' => :'String',
        :'lines_date_to' => :'String',
        :'transaction_date_from' => :'String',
        :'transaction_date_to' => :'String',
        :'is_uncollectible' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'page',
        :'limit',
        :'count_only',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'InvoiceListRetrievingQueryParams',
      :'PaginationQueryParams'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::GetInvoicesListParameter` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::GetInvoicesListParameter`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'count_only')
        self.count_only = attributes[:'count_only']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'keyword')
        self.keyword = attributes[:'keyword']
      end

      if attributes.key?(:'due_date_from')
        self.due_date_from = attributes[:'due_date_from']
      end

      if attributes.key?(:'due_date_to')
        self.due_date_to = attributes[:'due_date_to']
      end

      if attributes.key?(:'issue_date_from')
        self.issue_date_from = attributes[:'issue_date_from']
      end

      if attributes.key?(:'issue_date_to')
        self.issue_date_to = attributes[:'issue_date_to']
      end

      if attributes.key?(:'total_amount_max')
        self.total_amount_max = attributes[:'total_amount_max']
      end

      if attributes.key?(:'total_amount_min')
        self.total_amount_min = attributes[:'total_amount_min']
      end

      if attributes.key?(:'created_from')
        self.created_from = attributes[:'created_from']
      end

      if attributes.key?(:'created_to')
        self.created_to = attributes[:'created_to']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'customer_name')
        self.customer_name = attributes[:'customer_name']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'lines_date_from')
        self.lines_date_from = attributes[:'lines_date_from']
      end

      if attributes.key?(:'lines_date_to')
        self.lines_date_to = attributes[:'lines_date_to']
      end

      if attributes.key?(:'transaction_date_from')
        self.transaction_date_from = attributes[:'transaction_date_from']
      end

      if attributes.key?(:'transaction_date_to')
        self.transaction_date_to = attributes[:'transaction_date_to']
      end

      if attributes.key?(:'is_uncollectible')
        self.is_uncollectible = attributes[:'is_uncollectible']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@keyword.nil? && @keyword.to_s.length > 150
        invalid_properties.push('invalid value for "keyword", the character length must be smaller than or equal to 150.')
      end

      if !@keyword.nil? && @keyword.to_s.length < 1
        invalid_properties.push('invalid value for "keyword", the character length must be great than or equal to 1.')
      end

      if !@due_date_from.nil? && @due_date_from.to_s.length > 10
        invalid_properties.push('invalid value for "due_date_from", the character length must be smaller than or equal to 10.')
      end

      if !@due_date_from.nil? && @due_date_from.to_s.length < 10
        invalid_properties.push('invalid value for "due_date_from", the character length must be great than or equal to 10.')
      end

      if !@due_date_to.nil? && @due_date_to.to_s.length > 10
        invalid_properties.push('invalid value for "due_date_to", the character length must be smaller than or equal to 10.')
      end

      if !@due_date_to.nil? && @due_date_to.to_s.length < 10
        invalid_properties.push('invalid value for "due_date_to", the character length must be great than or equal to 10.')
      end

      if !@issue_date_from.nil? && @issue_date_from.to_s.length > 10
        invalid_properties.push('invalid value for "issue_date_from", the character length must be smaller than or equal to 10.')
      end

      if !@issue_date_from.nil? && @issue_date_from.to_s.length < 10
        invalid_properties.push('invalid value for "issue_date_from", the character length must be great than or equal to 10.')
      end

      if !@issue_date_to.nil? && @issue_date_to.to_s.length > 10
        invalid_properties.push('invalid value for "issue_date_to", the character length must be smaller than or equal to 10.')
      end

      if !@issue_date_to.nil? && @issue_date_to.to_s.length < 10
        invalid_properties.push('invalid value for "issue_date_to", the character length must be great than or equal to 10.')
      end

      if !@created_from.nil? && @created_from.to_s.length > 10
        invalid_properties.push('invalid value for "created_from", the character length must be smaller than or equal to 10.')
      end

      if !@created_from.nil? && @created_from.to_s.length < 10
        invalid_properties.push('invalid value for "created_from", the character length must be great than or equal to 10.')
      end

      if !@created_to.nil? && @created_to.to_s.length > 10
        invalid_properties.push('invalid value for "created_to", the character length must be smaller than or equal to 10.')
      end

      if !@created_to.nil? && @created_to.to_s.length < 10
        invalid_properties.push('invalid value for "created_to", the character length must be great than or equal to 10.')
      end

      if !@customer_id.nil? && @customer_id.to_s.length > 60
        invalid_properties.push('invalid value for "customer_id", the character length must be smaller than or equal to 60.')
      end

      if !@customer_id.nil? && @customer_id.to_s.length < 1
        invalid_properties.push('invalid value for "customer_id", the character length must be great than or equal to 1.')
      end

      if !@customer_name.nil? && @customer_name.to_s.length > 384
        invalid_properties.push('invalid value for "customer_name", the character length must be smaller than or equal to 384.')
      end

      if !@customer_name.nil? && @customer_name.to_s.length < 1
        invalid_properties.push('invalid value for "customer_name", the character length must be great than or equal to 1.')
      end

      if !@invoice_number.nil? && @invoice_number.to_s.length > 30
        invalid_properties.push('invalid value for "invoice_number", the character length must be smaller than or equal to 30.')
      end

      if !@invoice_number.nil? && @invoice_number.to_s.length < 1
        invalid_properties.push('invalid value for "invoice_number", the character length must be great than or equal to 1.')
      end

      if !@lines_date_from.nil? && @lines_date_from.to_s.length > 10
        invalid_properties.push('invalid value for "lines_date_from", the character length must be smaller than or equal to 10.')
      end

      if !@lines_date_from.nil? && @lines_date_from.to_s.length < 10
        invalid_properties.push('invalid value for "lines_date_from", the character length must be great than or equal to 10.')
      end

      if !@lines_date_to.nil? && @lines_date_to.to_s.length > 10
        invalid_properties.push('invalid value for "lines_date_to", the character length must be smaller than or equal to 10.')
      end

      if !@lines_date_to.nil? && @lines_date_to.to_s.length < 10
        invalid_properties.push('invalid value for "lines_date_to", the character length must be great than or equal to 10.')
      end

      if !@transaction_date_from.nil? && @transaction_date_from.to_s.length > 10
        invalid_properties.push('invalid value for "transaction_date_from", the character length must be smaller than or equal to 10.')
      end

      if !@transaction_date_from.nil? && @transaction_date_from.to_s.length < 10
        invalid_properties.push('invalid value for "transaction_date_from", the character length must be great than or equal to 10.')
      end

      if !@transaction_date_to.nil? && @transaction_date_to.to_s.length > 10
        invalid_properties.push('invalid value for "transaction_date_to", the character length must be smaller than or equal to 10.')
      end

      if !@transaction_date_to.nil? && @transaction_date_to.to_s.length < 10
        invalid_properties.push('invalid value for "transaction_date_to", the character length must be great than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@keyword.nil? && @keyword.to_s.length > 150
      return false if !@keyword.nil? && @keyword.to_s.length < 1
      return false if !@due_date_from.nil? && @due_date_from.to_s.length > 10
      return false if !@due_date_from.nil? && @due_date_from.to_s.length < 10
      return false if !@due_date_to.nil? && @due_date_to.to_s.length > 10
      return false if !@due_date_to.nil? && @due_date_to.to_s.length < 10
      return false if !@issue_date_from.nil? && @issue_date_from.to_s.length > 10
      return false if !@issue_date_from.nil? && @issue_date_from.to_s.length < 10
      return false if !@issue_date_to.nil? && @issue_date_to.to_s.length > 10
      return false if !@issue_date_to.nil? && @issue_date_to.to_s.length < 10
      return false if !@created_from.nil? && @created_from.to_s.length > 10
      return false if !@created_from.nil? && @created_from.to_s.length < 10
      return false if !@created_to.nil? && @created_to.to_s.length > 10
      return false if !@created_to.nil? && @created_to.to_s.length < 10
      return false if !@customer_id.nil? && @customer_id.to_s.length > 60
      return false if !@customer_id.nil? && @customer_id.to_s.length < 1
      return false if !@customer_name.nil? && @customer_name.to_s.length > 384
      return false if !@customer_name.nil? && @customer_name.to_s.length < 1
      return false if !@invoice_number.nil? && @invoice_number.to_s.length > 30
      return false if !@invoice_number.nil? && @invoice_number.to_s.length < 1
      return false if !@lines_date_from.nil? && @lines_date_from.to_s.length > 10
      return false if !@lines_date_from.nil? && @lines_date_from.to_s.length < 10
      return false if !@lines_date_to.nil? && @lines_date_to.to_s.length > 10
      return false if !@lines_date_to.nil? && @lines_date_to.to_s.length < 10
      return false if !@transaction_date_from.nil? && @transaction_date_from.to_s.length > 10
      return false if !@transaction_date_from.nil? && @transaction_date_from.to_s.length < 10
      return false if !@transaction_date_to.nil? && @transaction_date_to.to_s.length > 10
      return false if !@transaction_date_to.nil? && @transaction_date_to.to_s.length < 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] page Value to be assigned
    def page=(page)
      @page = page
    end

    # Custom attribute writer method with validation
    # @param [Object] limit Value to be assigned
    def limit=(limit)
      @limit = limit
    end

    # Custom attribute writer method with validation
    # @param [Object] keyword Value to be assigned
    def keyword=(keyword)
      if keyword.nil?
        fail ArgumentError, 'keyword cannot be nil'
      end

      if keyword.to_s.length > 150
        fail ArgumentError, 'invalid value for "keyword", the character length must be smaller than or equal to 150.'
      end

      if keyword.to_s.length < 1
        fail ArgumentError, 'invalid value for "keyword", the character length must be great than or equal to 1.'
      end

      @keyword = keyword
    end

    # Custom attribute writer method with validation
    # @param [Object] due_date_from Value to be assigned
    def due_date_from=(due_date_from)
      if due_date_from.nil?
        fail ArgumentError, 'due_date_from cannot be nil'
      end

      if due_date_from.to_s.length > 10
        fail ArgumentError, 'invalid value for "due_date_from", the character length must be smaller than or equal to 10.'
      end

      if due_date_from.to_s.length < 10
        fail ArgumentError, 'invalid value for "due_date_from", the character length must be great than or equal to 10.'
      end

      @due_date_from = due_date_from
    end

    # Custom attribute writer method with validation
    # @param [Object] due_date_to Value to be assigned
    def due_date_to=(due_date_to)
      if due_date_to.nil?
        fail ArgumentError, 'due_date_to cannot be nil'
      end

      if due_date_to.to_s.length > 10
        fail ArgumentError, 'invalid value for "due_date_to", the character length must be smaller than or equal to 10.'
      end

      if due_date_to.to_s.length < 10
        fail ArgumentError, 'invalid value for "due_date_to", the character length must be great than or equal to 10.'
      end

      @due_date_to = due_date_to
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_date_from Value to be assigned
    def issue_date_from=(issue_date_from)
      if issue_date_from.nil?
        fail ArgumentError, 'issue_date_from cannot be nil'
      end

      if issue_date_from.to_s.length > 10
        fail ArgumentError, 'invalid value for "issue_date_from", the character length must be smaller than or equal to 10.'
      end

      if issue_date_from.to_s.length < 10
        fail ArgumentError, 'invalid value for "issue_date_from", the character length must be great than or equal to 10.'
      end

      @issue_date_from = issue_date_from
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_date_to Value to be assigned
    def issue_date_to=(issue_date_to)
      if issue_date_to.nil?
        fail ArgumentError, 'issue_date_to cannot be nil'
      end

      if issue_date_to.to_s.length > 10
        fail ArgumentError, 'invalid value for "issue_date_to", the character length must be smaller than or equal to 10.'
      end

      if issue_date_to.to_s.length < 10
        fail ArgumentError, 'invalid value for "issue_date_to", the character length must be great than or equal to 10.'
      end

      @issue_date_to = issue_date_to
    end

    # Custom attribute writer method with validation
    # @param [Object] total_amount_max Value to be assigned
    def total_amount_max=(total_amount_max)
      if total_amount_max.nil?
        fail ArgumentError, 'total_amount_max cannot be nil'
      end

      @total_amount_max = total_amount_max
    end

    # Custom attribute writer method with validation
    # @param [Object] total_amount_min Value to be assigned
    def total_amount_min=(total_amount_min)
      if total_amount_min.nil?
        fail ArgumentError, 'total_amount_min cannot be nil'
      end

      @total_amount_min = total_amount_min
    end

    # Custom attribute writer method with validation
    # @param [Object] created_from Value to be assigned
    def created_from=(created_from)
      if created_from.nil?
        fail ArgumentError, 'created_from cannot be nil'
      end

      if created_from.to_s.length > 10
        fail ArgumentError, 'invalid value for "created_from", the character length must be smaller than or equal to 10.'
      end

      if created_from.to_s.length < 10
        fail ArgumentError, 'invalid value for "created_from", the character length must be great than or equal to 10.'
      end

      @created_from = created_from
    end

    # Custom attribute writer method with validation
    # @param [Object] created_to Value to be assigned
    def created_to=(created_to)
      if created_to.nil?
        fail ArgumentError, 'created_to cannot be nil'
      end

      if created_to.to_s.length > 10
        fail ArgumentError, 'invalid value for "created_to", the character length must be smaller than or equal to 10.'
      end

      if created_to.to_s.length < 10
        fail ArgumentError, 'invalid value for "created_to", the character length must be great than or equal to 10.'
      end

      @created_to = created_to
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_id Value to be assigned
    def customer_id=(customer_id)
      if customer_id.nil?
        fail ArgumentError, 'customer_id cannot be nil'
      end

      if customer_id.to_s.length > 60
        fail ArgumentError, 'invalid value for "customer_id", the character length must be smaller than or equal to 60.'
      end

      if customer_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_id", the character length must be great than or equal to 1.'
      end

      @customer_id = customer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_name Value to be assigned
    def customer_name=(customer_name)
      if customer_name.nil?
        fail ArgumentError, 'customer_name cannot be nil'
      end

      if customer_name.to_s.length > 384
        fail ArgumentError, 'invalid value for "customer_name", the character length must be smaller than or equal to 384.'
      end

      if customer_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_name", the character length must be great than or equal to 1.'
      end

      @customer_name = customer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_number Value to be assigned
    def invoice_number=(invoice_number)
      if invoice_number.nil?
        fail ArgumentError, 'invoice_number cannot be nil'
      end

      if invoice_number.to_s.length > 30
        fail ArgumentError, 'invalid value for "invoice_number", the character length must be smaller than or equal to 30.'
      end

      if invoice_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "invoice_number", the character length must be great than or equal to 1.'
      end

      @invoice_number = invoice_number
    end

    # Custom attribute writer method with validation
    # @param [Object] lines_date_from Value to be assigned
    def lines_date_from=(lines_date_from)
      if lines_date_from.nil?
        fail ArgumentError, 'lines_date_from cannot be nil'
      end

      if lines_date_from.to_s.length > 10
        fail ArgumentError, 'invalid value for "lines_date_from", the character length must be smaller than or equal to 10.'
      end

      if lines_date_from.to_s.length < 10
        fail ArgumentError, 'invalid value for "lines_date_from", the character length must be great than or equal to 10.'
      end

      @lines_date_from = lines_date_from
    end

    # Custom attribute writer method with validation
    # @param [Object] lines_date_to Value to be assigned
    def lines_date_to=(lines_date_to)
      if lines_date_to.nil?
        fail ArgumentError, 'lines_date_to cannot be nil'
      end

      if lines_date_to.to_s.length > 10
        fail ArgumentError, 'invalid value for "lines_date_to", the character length must be smaller than or equal to 10.'
      end

      if lines_date_to.to_s.length < 10
        fail ArgumentError, 'invalid value for "lines_date_to", the character length must be great than or equal to 10.'
      end

      @lines_date_to = lines_date_to
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_date_from Value to be assigned
    def transaction_date_from=(transaction_date_from)
      if transaction_date_from.nil?
        fail ArgumentError, 'transaction_date_from cannot be nil'
      end

      if transaction_date_from.to_s.length > 10
        fail ArgumentError, 'invalid value for "transaction_date_from", the character length must be smaller than or equal to 10.'
      end

      if transaction_date_from.to_s.length < 10
        fail ArgumentError, 'invalid value for "transaction_date_from", the character length must be great than or equal to 10.'
      end

      @transaction_date_from = transaction_date_from
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_date_to Value to be assigned
    def transaction_date_to=(transaction_date_to)
      if transaction_date_to.nil?
        fail ArgumentError, 'transaction_date_to cannot be nil'
      end

      if transaction_date_to.to_s.length > 10
        fail ArgumentError, 'invalid value for "transaction_date_to", the character length must be smaller than or equal to 10.'
      end

      if transaction_date_to.to_s.length < 10
        fail ArgumentError, 'invalid value for "transaction_date_to", the character length must be great than or equal to 10.'
      end

      @transaction_date_to = transaction_date_to
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          page == o.page &&
          limit == o.limit &&
          count_only == o.count_only &&
          status == o.status &&
          keyword == o.keyword &&
          due_date_from == o.due_date_from &&
          due_date_to == o.due_date_to &&
          issue_date_from == o.issue_date_from &&
          issue_date_to == o.issue_date_to &&
          total_amount_max == o.total_amount_max &&
          total_amount_min == o.total_amount_min &&
          created_from == o.created_from &&
          created_to == o.created_to &&
          customer_id == o.customer_id &&
          customer_name == o.customer_name &&
          invoice_number == o.invoice_number &&
          lines_date_from == o.lines_date_from &&
          lines_date_to == o.lines_date_to &&
          transaction_date_from == o.transaction_date_from &&
          transaction_date_to == o.transaction_date_to &&
          is_uncollectible == o.is_uncollectible
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [page, limit, count_only, status, keyword, due_date_from, due_date_to, issue_date_from, issue_date_to, total_amount_max, total_amount_min, created_from, created_to, customer_id, customer_name, invoice_number, lines_date_from, lines_date_to, transaction_date_from, transaction_date_to, is_uncollectible].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
