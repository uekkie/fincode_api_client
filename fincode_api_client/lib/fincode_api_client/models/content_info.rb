=begin
#fincode API

#fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。 

The version of the OpenAPI document: 1.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module FincodeApiClient
  class ContentInfo
    # 商材1 名称 
    attr_accessor :content1_name

    # 商材1 説明 
    attr_accessor :content1_description

    # 商材1 単価 
    attr_accessor :content1_unit_price

    # 商材2 名称 
    attr_accessor :content2_name

    # 商材2 説明 
    attr_accessor :content2_description

    # 商材2 単価 
    attr_accessor :content2_unit_price

    # 商材3 名称 
    attr_accessor :content3_name

    # 商材3 説明 
    attr_accessor :content3_description

    # 商材3 単価 
    attr_accessor :content3_unit_price

    # 商品情報ID 
    attr_accessor :id

    # 取扱商材 品目種別  - `0`: 物品販売 - `1`: サービス - `2`: デジタルコンテンツ 
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'content1_name' => :'content1_name',
        :'content1_description' => :'content1_description',
        :'content1_unit_price' => :'content1_unit_price',
        :'content2_name' => :'content2_name',
        :'content2_description' => :'content2_description',
        :'content2_unit_price' => :'content2_unit_price',
        :'content3_name' => :'content3_name',
        :'content3_description' => :'content3_description',
        :'content3_unit_price' => :'content3_unit_price',
        :'id' => :'id',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'content1_name' => :'String',
        :'content1_description' => :'String',
        :'content1_unit_price' => :'Integer',
        :'content2_name' => :'String',
        :'content2_description' => :'String',
        :'content2_unit_price' => :'Integer',
        :'content3_name' => :'String',
        :'content3_description' => :'String',
        :'content3_unit_price' => :'Integer',
        :'id' => :'String',
        :'type' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'ContentInfoV2'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FincodeApiClient::ContentInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FincodeApiClient::ContentInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'content1_name')
        self.content1_name = attributes[:'content1_name']
      else
        self.content1_name = nil
      end

      if attributes.key?(:'content1_description')
        self.content1_description = attributes[:'content1_description']
      else
        self.content1_description = nil
      end

      if attributes.key?(:'content1_unit_price')
        self.content1_unit_price = attributes[:'content1_unit_price']
      else
        self.content1_unit_price = nil
      end

      if attributes.key?(:'content2_name')
        self.content2_name = attributes[:'content2_name']
      end

      if attributes.key?(:'content2_description')
        self.content2_description = attributes[:'content2_description']
      end

      if attributes.key?(:'content2_unit_price')
        self.content2_unit_price = attributes[:'content2_unit_price']
      end

      if attributes.key?(:'content3_name')
        self.content3_name = attributes[:'content3_name']
      end

      if attributes.key?(:'content3_description')
        self.content3_description = attributes[:'content3_description']
      end

      if attributes.key?(:'content3_unit_price')
        self.content3_unit_price = attributes[:'content3_unit_price']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @content1_name.nil?
        invalid_properties.push('invalid value for "content1_name", content1_name cannot be nil.')
      end

      if @content1_name.to_s.length > 200
        invalid_properties.push('invalid value for "content1_name", the character length must be smaller than or equal to 200.')
      end

      if @content1_name.to_s.length < 1
        invalid_properties.push('invalid value for "content1_name", the character length must be great than or equal to 1.')
      end

      if @content1_description.nil?
        invalid_properties.push('invalid value for "content1_description", content1_description cannot be nil.')
      end

      if @content1_description.to_s.length > 200
        invalid_properties.push('invalid value for "content1_description", the character length must be smaller than or equal to 200.')
      end

      if @content1_description.to_s.length < 1
        invalid_properties.push('invalid value for "content1_description", the character length must be great than or equal to 1.')
      end

      if @content1_unit_price.nil?
        invalid_properties.push('invalid value for "content1_unit_price", content1_unit_price cannot be nil.')
      end

      if !@content2_name.nil? && @content2_name.to_s.length > 200
        invalid_properties.push('invalid value for "content2_name", the character length must be smaller than or equal to 200.')
      end

      if !@content2_name.nil? && @content2_name.to_s.length < 1
        invalid_properties.push('invalid value for "content2_name", the character length must be great than or equal to 1.')
      end

      if !@content2_description.nil? && @content2_description.to_s.length > 200
        invalid_properties.push('invalid value for "content2_description", the character length must be smaller than or equal to 200.')
      end

      if !@content2_description.nil? && @content2_description.to_s.length < 1
        invalid_properties.push('invalid value for "content2_description", the character length must be great than or equal to 1.')
      end

      if !@content3_name.nil? && @content3_name.to_s.length > 200
        invalid_properties.push('invalid value for "content3_name", the character length must be smaller than or equal to 200.')
      end

      if !@content3_name.nil? && @content3_name.to_s.length < 1
        invalid_properties.push('invalid value for "content3_name", the character length must be great than or equal to 1.')
      end

      if !@content3_description.nil? && @content3_description.to_s.length > 200
        invalid_properties.push('invalid value for "content3_description", the character length must be smaller than or equal to 200.')
      end

      if !@content3_description.nil? && @content3_description.to_s.length < 1
        invalid_properties.push('invalid value for "content3_description", the character length must be great than or equal to 1.')
      end

      if !@id.nil? && @id.to_s.length > 19
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 19.')
      end

      if !@id.nil? && @id.to_s.length < 1
        invalid_properties.push('invalid value for "id", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @content1_name.nil?
      return false if @content1_name.to_s.length > 200
      return false if @content1_name.to_s.length < 1
      return false if @content1_description.nil?
      return false if @content1_description.to_s.length > 200
      return false if @content1_description.to_s.length < 1
      return false if @content1_unit_price.nil?
      return false if !@content2_name.nil? && @content2_name.to_s.length > 200
      return false if !@content2_name.nil? && @content2_name.to_s.length < 1
      return false if !@content2_description.nil? && @content2_description.to_s.length > 200
      return false if !@content2_description.nil? && @content2_description.to_s.length < 1
      return false if !@content3_name.nil? && @content3_name.to_s.length > 200
      return false if !@content3_name.nil? && @content3_name.to_s.length < 1
      return false if !@content3_description.nil? && @content3_description.to_s.length > 200
      return false if !@content3_description.nil? && @content3_description.to_s.length < 1
      return false if !@id.nil? && @id.to_s.length > 19
      return false if !@id.nil? && @id.to_s.length < 1
      type_validator = EnumAttributeValidator.new('Float', [0, 1, 2])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] content1_name Value to be assigned
    def content1_name=(content1_name)
      if content1_name.nil?
        fail ArgumentError, 'content1_name cannot be nil'
      end

      if content1_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "content1_name", the character length must be smaller than or equal to 200.'
      end

      if content1_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "content1_name", the character length must be great than or equal to 1.'
      end

      @content1_name = content1_name
    end

    # Custom attribute writer method with validation
    # @param [Object] content1_description Value to be assigned
    def content1_description=(content1_description)
      if content1_description.nil?
        fail ArgumentError, 'content1_description cannot be nil'
      end

      if content1_description.to_s.length > 200
        fail ArgumentError, 'invalid value for "content1_description", the character length must be smaller than or equal to 200.'
      end

      if content1_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "content1_description", the character length must be great than or equal to 1.'
      end

      @content1_description = content1_description
    end

    # Custom attribute writer method with validation
    # @param [Object] content1_unit_price Value to be assigned
    def content1_unit_price=(content1_unit_price)
      if content1_unit_price.nil?
        fail ArgumentError, 'content1_unit_price cannot be nil'
      end

      @content1_unit_price = content1_unit_price
    end

    # Custom attribute writer method with validation
    # @param [Object] content2_name Value to be assigned
    def content2_name=(content2_name)
      if content2_name.nil?
        fail ArgumentError, 'content2_name cannot be nil'
      end

      if content2_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "content2_name", the character length must be smaller than or equal to 200.'
      end

      if content2_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "content2_name", the character length must be great than or equal to 1.'
      end

      @content2_name = content2_name
    end

    # Custom attribute writer method with validation
    # @param [Object] content2_description Value to be assigned
    def content2_description=(content2_description)
      if content2_description.nil?
        fail ArgumentError, 'content2_description cannot be nil'
      end

      if content2_description.to_s.length > 200
        fail ArgumentError, 'invalid value for "content2_description", the character length must be smaller than or equal to 200.'
      end

      if content2_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "content2_description", the character length must be great than or equal to 1.'
      end

      @content2_description = content2_description
    end

    # Custom attribute writer method with validation
    # @param [Object] content2_unit_price Value to be assigned
    def content2_unit_price=(content2_unit_price)
      if content2_unit_price.nil?
        fail ArgumentError, 'content2_unit_price cannot be nil'
      end

      @content2_unit_price = content2_unit_price
    end

    # Custom attribute writer method with validation
    # @param [Object] content3_name Value to be assigned
    def content3_name=(content3_name)
      if content3_name.nil?
        fail ArgumentError, 'content3_name cannot be nil'
      end

      if content3_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "content3_name", the character length must be smaller than or equal to 200.'
      end

      if content3_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "content3_name", the character length must be great than or equal to 1.'
      end

      @content3_name = content3_name
    end

    # Custom attribute writer method with validation
    # @param [Object] content3_description Value to be assigned
    def content3_description=(content3_description)
      if content3_description.nil?
        fail ArgumentError, 'content3_description cannot be nil'
      end

      if content3_description.to_s.length > 200
        fail ArgumentError, 'invalid value for "content3_description", the character length must be smaller than or equal to 200.'
      end

      if content3_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "content3_description", the character length must be great than or equal to 1.'
      end

      @content3_description = content3_description
    end

    # Custom attribute writer method with validation
    # @param [Object] content3_unit_price Value to be assigned
    def content3_unit_price=(content3_unit_price)
      if content3_unit_price.nil?
        fail ArgumentError, 'content3_unit_price cannot be nil'
      end

      @content3_unit_price = content3_unit_price
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if !id.nil? && id.to_s.length > 19
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 19.'
      end

      if !id.nil? && id.to_s.length < 1
        fail ArgumentError, 'invalid value for "id", the character length must be great than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('Float', [0, 1, 2])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          content1_name == o.content1_name &&
          content1_description == o.content1_description &&
          content1_unit_price == o.content1_unit_price &&
          content2_name == o.content2_name &&
          content2_description == o.content2_description &&
          content2_unit_price == o.content2_unit_price &&
          content3_name == o.content3_name &&
          content3_description == o.content3_description &&
          content3_unit_price == o.content3_unit_price &&
          id == o.id &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [content1_name, content1_description, content1_unit_price, content2_name, content2_description, content2_unit_price, content3_name, content3_description, content3_unit_price, id, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FincodeApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
